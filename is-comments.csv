vhquang,I guess the check for new line does not run on its own configuration. :)
vhquang,:+1: 
vhquang,Is there a reason we not need to lock the version of this library? 
ForeverWintr,I opened a separate pull request that applies all the fixes from these hooks (#21). Hopefully it caught this!
ForeverWintr,"I didn't see a need to lock it, although I guess we could require a minimum version. Do you see a benefit to locking it?"
flexatone,"We should at least lock it to a major release. We do not want to jump to a new major release automatically ever, I think. So `2.6.*` or `2.*`."
ForeverWintr,"Ok, I've pinned it. "
ForeverWintr,"Fyi, if these are pandas date objects you can do `df['tgt_model_update_time'].dt.date`"
flexatone,Should `plugin_outputs` also be populated in the companies table here?
flexatone,This is great!
flexatone,"While I like the concise name, this sounds like a Boolean field rather than a function. Maybe adding a verb will help, like `get_in_carve` or `process_in_carve`?"
flexatone,Same with this method.
flexatone,This is a great place for this information to live!
nekobon,"In our use case, we're currently adding them to company table and then passing the new column name in the plugin_output."
nekobon,That's a great point! I'll rename them to `process_in/pre_carve`.
flexatone,"ah, I did not see where they were being added to the company table!"
flexatone,wow!
flexatone,"Rather than directly interact with self._streams here, you can simply pass the SF `Frame` to `self.manage_table` and then `self.write_managed_table`; it is a bit more idiomatic that way, I think."
flexatone,This is an excellent function!
flexatone,"Is this the only way to do figure out if a callable is a lambda? If so, maybe just store `one_lambda` as a module-level constant."
nekobon,"Thanks! That sounds great. I followed how we write xlsx, but I see Frame is already supported in `managed_table`."
nekobon,"That `one_lambda` could be any lambda, so I think it can stay in the function. Perhaps `any_lambda` is a better name."
johnjhawk,"Can we rename foo? When I see foo, I think of that the dev left in some testing code.  Maybe obj?"
nekobon,"Thank you John, I will definitely change it to something else. I don't like foo! I've almost never used foo even for sketch code, so it's strange I did here! "
ForeverWintr,Don't forget to remove this!
ForeverWintr,This exception's docstring is `'An exception for when an if/elif/else branch has not matched any valid condition.'` So I think it's intended for a different case than you're using it for here.
gdevanla,"Ha. Its funny, this function uses that exception to mean vcs branch!   Good catch, we should create a new exception for this.  Probably, `InvalidCandidateChangeset`?"
vhquang,"I think this is the first time I see the `NotImplementedError` raise with message, let alone the kindness in the message."
nekobon,"We can take `sf.Series` and return `sf.Series` here. Recently, we don't make functions that only supports pandas in papyri's public api."
nekobon,Sending values to index seems a bit confusing. Is this the same as `m.index.loc[m!=sen]`?
nekobon,What is the dtype of returning Series? Can we make sure it always returns Series with the same dtype?
nekobon,"If you don't need to convert from pandas, maybe you can do something like this right below the lookup. ```python bics = [bics_6, bics_5, bics_4, bics_3] mapped = [b.iter_element().map_fill(lookup, fill_value=np.nan) for b in bics] return functools.reduce(lambda s1, s2: s1.fillna(s2), mapped) ```"
vhquang,It is a bit different than `m.index.loc[]`. The `loc` seems to select the matching index _values_. I was filtering the `m.index` base on the True/False _position_.
vhquang,The dtype of the return Series will be mix of string (from our lookup data) and the np.nan (which is float). Do you prefer using `None` instead of `np.nan`?
nekobon,"Here, I think an empty string would be a good ""missing"" value. We started to it in other places such as missing industry code. Also you would be able to use <U dtype then."
nekobon,Can you please add `get_raw_nace_data` and `get_raw_sic_data`? Please then make `get_raw_data` to call `get_raw_sic_data` and wrap it with `ISLib.deprecation.deprecated` (i.e. `get_raw_data = deprecated(get_raw_sic_data)`)
vhquang,This way of deprecating a classmethod feels a bit hacky. Is there a better way for me to use `deprecation.deprecated`?
flexatone,"You should be able to just use deprecated() as a decorator on top of (or under, I always forget) the classmethod decorator."
vhquang,"The `deprecation` wraps around the new method as the suggested replacement. So, follow Yu's suggestion above, if we have: ``` # get_raw_data = deprecated(get_raw_sic_data) >>> SectorIndustry.get_raw_data() -> DeprecationWarning: Use get_raw_sic_data instead. ```  If we do: ``` @classmethod @deprecated def get_raw_sic_data(cls):   pass  @classmethod def get_raw_data(cls):   cls.get_raw_sic_data()  >>> SectorIndustry.get_raw_data() -> DeprecationWarning: Use get_raw_sic_data instead. >>> SectorIndustry.get_raw_sic_data() -> DeprecationWarning: Use get_raw_sic_data instead. ``` :shrug: "
flexatone,"oh, i see! then there may be no other way than what you have done."
nekobon,I'd like to add a classmethod deprecation decorator in `deprecation.py`. We can make it take the new method name explicitly for the message. What do you think?
vhquang,"That would be nice, however I think it would be great if we can make it more generic by making it work with decorator. At its current form, the `deprecated` method will target the decorating function (ie: outer function) instead of the decorated function (ie: inner function). That's why I have to apply it before any `@classmethod`.   Anyway, let separate that into another PR. If you are OK with the change, let me merge it. And we can do another pass to update this classmethod deprecation."
nekobon,Is `<U` the same as `<U1`?
vhquang,Probably not. I will update it to be more explicit!
flexatone,"The legacy version needs to be converted to Pandas? That seems counter intuitive. (It might be right, I am just not sure.)"
flexatone,"Do we need the default of None for these? If so, the type should be `tp.Optional[sf.Frame]`"
chaburkland,"Yes, it's a bit odd. The finpan process on default is all using static-frame, but the legacy version of fin adjustment expects pandas. I was previously converting sf.Series -> pd.Series, and I need to continue to do this when using legacy fin adjustment code."
chaburkland,Sorry! This branch isn't ready to merge - I was playing around with GitHub PRs earlier. I had gutted a lot of this code and this is a vestige I missed.
chaburkland,"If I remember correctly, I originally tried to convert fin adjustment to static-frame when I did the original finpan refactor, but it was giving me a decent amount of trouble (due to that Panda's bug I showed you late last week), and so I left it alone since it was a bit outside the scope of what I was doing."
flexatone,"Why do this in a loop, here and above? The GEIU sec table is an SF `Frame`; you can do all these selections in one `.loc` call, I think."
flexatone,Why iterate over all `co_ids` in the GEIU? You just need to use `prim_sec_ids` for selection.
flexatone,"But note that what you have selected here are not the PSU constituents, but all securities in the GEIU that have a `pu_primary_security` . Use a `PSUAttrs` object to get just the PSU priumary securities."
flexatone,"`--cached` is `-j`, and not sure we need to report slowest tests, so maybe just `python uroborus/apps/main.py -jbtqfm`"
ForeverWintr,"Apparently I've been supplying the `cached` parameter twice this whole time!  I like to show slow tests in the hope that people will notice if they accidentally make a change that causes a 'fast' test to run slow, so I prefer to leave `-z`."
brandtbucher,"Good suggestion. Perhaps we can just keep it simple, though?  ```suggestion     python kozuchi/apps/airflow_disque_cli.py submit 'uroborus/apps/main.py <tlt-name>' -c <your-branch-name> ```  I'm sure everyone has their own preferences for output format (I certainly do), and the command you provide by default is a bit overwhelming! I had to dig through `pytest --help` for a few minutes just to see what those last three switches were doing."
brandtbucher,"Agreed `-z` is good here (I think it's what `fast_tests_pass` does, too)."
ForeverWintr,"I agree! But that's the best way I've found to get a simple list of passes and fails in the test output. I thought I'd share the best command I've come up with, so that people can start with useful output and customize as needed. "
vhquang,I like this refactor :+1:
vhquang,"Since the mapping file `BICS_NACE_mapping.tsv` is commit to our code base, I think this can be in unit test to assert the quality of the data, to prevent someone commit bad mapping, instead of running this check when we doing build.  It is just my suggestion. I will leave final decision to yours."
vhquang,"I see what you are doing to re-use this function. I think a more descriptive name, ie: `get_field`, can provide more context than `field_nace`. It is just nitpick. Final decision is yours."
vhquang,:+1: 
nekobon,"Good point. I think `get_field` sounds a bit like a callable, so I'll change it to `target_field`."
nekobon,"Adding a unittest sounds good, but I'd like to check here as well. We reuse the same method for section and division, so not having any missing is critical to work correctly (otherwise wrong results returned without raising), so this check is part of the algorithm."
gdevanla,"For now I think it is a good idea to recalculate. Is there any reason you would like to make this assumption? Delta's might change on the same day, and if the end_date is on the same day, we will not capture that change, correct?"
gdevanla,"just so that we scope 'ids' within these operations, should we consider naming these `delta_history_start_date` and `delta_history_end_date`. That way, in the future if we have other buttons, we will not  step over these `ids`."
gdevanla,Did you already check with Jim on the 'ticker' column. Can we ignore that?
gdevanla,"So, if a fund was deleted, than `info_column_labels` will not be set for those funds, correct?  Don't we need to handle it?"
gdevanla,These tests are nice. Thanks for adding them.
ForeverWintr,"Yes, good point. I'll just re-calculate. "
ForeverWintr,"Sure! I meant to check what the scope of these was, and forgot to check. I'll change them. "
ForeverWintr,I didn't. I'll ask in today's meeting. 
ForeverWintr,I'll ask this in today's meeting. I think it's probably best just to use the index of the latest model. 
ForeverWintr,:smile: 
gdevanla,I don't remember how this works. Do we not need this decorator anymore?
gdevanla,"I don't see it used anywhere? Is this some old code you were trying? Plus, this might break, if the df passed is a `MultiIndex`. "
gdevanla,"Curious, is this to avoid fund no showing up more than once? Should we consolidate and make values unique before the formatter is called?"
gdevanla,Curious. Why is this needed. Was it `true` by default?
gdevanla,I don't think we have to do this move here. Do we need this check and drop the funds. I am thinking we can leave the funds we find in the latest list till they are removed physically.
gdevanla,Um..why do we remove funds if there were no deltas?  Shouldn't the final list be all the funds for given AAF/A4F etc?
gdevanla,"Do we plan to use this elsewhere?  This might not work, since we don't have `run_id` for these runs.  Also, I do not see this function called from anywhere."
ForeverWintr,"That was something I added, because I thought we should have a generic error handler, on top of the `BadRequest` handler you have above. However, I later observed it catching errors internal to flask, which I don't think we want. I'll remove it. "
ForeverWintr,This seems to work fine with multiindexes (friendly pandas!). And it doesn't cause any test failures. This is how I facilitate adding another empty column to account for the fact that tickers can't be displayed in the type and category tables. It's used in `DeltaApprovalReport.create_reports` to signify that you want an empty column.  
ForeverWintr,"I meant to talk to you about this. I added this because the old version would return the same label multiple times if the labels weren't sorted. For example, if the funds were ordered so that the types were `Fixed Income, Fixed Income, Credit, Fixed Income`, the `section_sort_order` would be `['Fixed Income', 'Credit', 'Fixed Income']`.   I discovered that while dealing with the report containing old funds, and once I stopped including the old funds, I no longer had type/categories that weren't grouped. I think the change might be nice to keep though. What do you think?   "
gdevanla,I am confused. Aren't we overwriting the `df` in line 657. I am probably overlooking something silly.
ForeverWintr,"This disables csrf for the unit tests, and yes it's enabled by default. As I recall, the mechanism I'm using to 'login' the flask test client in the new tests I added doesn't work without this. "
ForeverWintr,"This was the result of our discussion about old funds with different Type and Category labels showing up in the output. Without this, the output contains funds that have types like `'6. equities'`."
ForeverWintr,"This is another result of our discussion on slack. The final result is all funds with deltas, or which have target wt in the latest model."
ForeverWintr,Nope! That's a remnant of an earlier version! Thanks for catching it.
gdevanla,Um. We can chat about this in person. I still feel this condition by drop valid funds.
gdevanla,Let's chat about this condition along with the other location where you have the similar check.
gdevanla,"I see. Makes sense. That's a good change, then."
gdevanla,"Ok Sounds good. But, without that, do all functionality in the UI work. I remember it used to fail while work on PARC in the past."
ForeverWintr,"Yes we are, but we overwrite it with columns specified in `column_mapping`. if `PLACEHOLDER_COLUMN_SENTINEL` is in the column mapping, it'll be selected. Otherwise it'll be dropped. "
ForeverWintr,"Can you give an example of a fund you think might be dropped here that should not be? To me, it doesn't seem useful to show funds that don't have deltas or target weight. "
ForeverWintr,Or we can discuss in person. 
gdevanla,"Oh, I see. It was not clear without that context.  Do you think add   ```  if cls.PLACEHOLDER_COLUMN_SETTLE in column_mapping:          df[cls.PLACEHOLDER_COLUMN_SENTINEL] = np.nan ```  would help?  I am okay with leaving as is, but it was not clear why the caller would create this column and not set a value.  I leave it to you."
ForeverWintr,"Hmm. All the functionality that I've tried has worked! I think disabling CSRF protection makes the site less secure, but I assumed that was ok as this is the testing app. However, I'm not sure what else the testing app is used for."
vhquang,Thanks for improving this test! :+1: 
vhquang,"Originally I was thinking try with `get_changeset_from_ref` first, since changeset is more specific. But I see why you do that after `get_remote_branch`. Because otherwise `get_changeset_from_ref` would match with local branch, which we don't want.  This looks good to me, and I am OK with merging. Alternatively, I was thinking about implementing `is_changeset_hash`/`is_branchname` in VCSUtil so that you don't have to do this try-catch here. Let me know your thought."
brandtbucher,"I'm going to go ahead with merging this since I want to bring uroborus back up. I think this case is a bit unique, but if there are other places that could use it and you decided to create those utilities, this would probably be a good refactoring candidate!"
nekobon,Please feel free to add this in the base Vigeo data reader.
nekobon,Maybe this is not necessary if you put get_carbon_intensity in the base class.
nekobon,"I don't think we want to call `get_df` if it returns sf.Frame, not pd.DataFrame."
nekobon,"We want to use the GEU date, not trade date to construct co_sec_map. "
vhquang,"There are couple thought I had when considering this class vs base Vigeo class: - There are couple methods that are specific to this product: `greenhouse_gas` with penalty, `baseline_exclusion` (to be implement). I would prefer to keep the base class in papyri generic for multi-use purpose, while having this class be product specific. - Having this specific class also helps for exposing only the columns that we use for this product, versus the large amount of columns that we expose in base class. - Base class is still using DataFrame. Having this class allows me to wrap around and iterate developing with StaticFrame while not interfere with the base class. After we done iterating and happy with the result, we can decide if we want to update base class to work with StaticFrame, and if the methods are generic enough to be in base class.  A relevant point, I don't know if we want the boolean conversion of ""Yes/No"" to be in the base class? I don't see we do that for other AlphaType columns, so I didn't do it in the base class, to keep it consistent with other columns."
vhquang,"I am looking at the build posted on PARC: http://parc01-prd-i:8000/build/download/rmc-2020_MARCH-20200427161707-bid6597b I don't see we use geu_date in spec. Is that specified somewhere else, or should I calculate it base on `trade_date`?"
nekobon,You can get it from `spec.geu`. `process_pre_carve` in FFReductionPlugin has an example: ```geu_date=util.extract_date_str(spec.geu)```
ForeverWintr,I made a similar change on my recent branch (#120). I'll merge this branch into mine and deal with the conflict. 
nekobon,"Sounds good, we can keep it for now and revisit if we want to refactor."
flexatone,doesn't this duplicate what is done in lines 229-230?
gdevanla,Should this also be price_id_field?
gdevanla,"Not important, but consider moving the two assignment into else. Since, there is where it is used."
gdevanla,Just making sure the extra 'a' is intentional here.
johnjhawk,it certainly does duplicate it.  I'll remove.  thanks
johnjhawk,"good point, it is not!"
johnjhawk,"good thought, but the price_id is used outside of the else so I grouped them together"
nekobon,"We usually use '_' to combine two string fields, so I changed it here too."
nekobon,"Our ""universe"" (== Dev Large + Mid) is defined by `field_region_size`. I removed `field_rafi_u` that shouldn't be used."
vhquang,"I think we probably would want to have the number of iteration in the spec, to make it more explicit, even it seems redundant as the QC team can see how many iterations we did.  We can do that later, or discuss that after the build is done, I think."
nekobon,"That is a great point. It is important to make it transparent, however, for a constant that is expected to never change, we usually hard code and not put in spec. Especially because it is only used by this methodology and this carveout. It is not really a ""parameter"" but it's part of the methodology algorithm.  It would help QC to output how many times it went to loop, and whether or not it converged in the summary file. Let's discuss it after dual coding progresses more."
vhquang,"Should we bring this up to Joseph? My understanding is that CI near 0.0 would mean they produce low carbon, and we are interested in them (ignore their enterprise value for now). Maybe we want to change them to 0.0000001 to keep them calculated.  On another hand, 0.0 CI (ie: no carbon produced) may sound like data error. "
nekobon,"Yes, Please tell Joseph about that with some example companies data. Thanks!"
johnjhawk,I like the module level salt addition.
johnjhawk,"may want to add a comment on line 643 like: ""# companies that violate carbon threshold"""
johnjhawk,are you sure there are no -1 coming from the database
johnjhawk,"after talking to Quang, it's nan from the db!  fyi - Quang is working with data team to define a non nan key"
vhquang,"Good point, I can add comment to help clear things up."
flexatone,"I can see that this works, but I was thinking we would move lines 127 to 130 into the `if active` block, rather than add it and then remove it. Would that work?"
ForeverWintr,"I tried that first, but note that we use `id_to_other[id_key]` on line 132 to determine if the field is active! I suspect this is why the entry was left in `id_to_other` in the first place. "
ForeverWintr,"Actually, It might be nicer to store the result of line 128's dict comprehension in a temporary variable, and only insert it into `id_to_other` within 133's if statement. That occurred to me while lying in bed last night for some reason. "
chaburkland,Adding a comment here to see if my name shows up under the reviewers for this.
flexatone,That sounds like a nice approach!
ForeverWintr,"I've made the change, and the product tests pass. I still want to wait for an agent q run before merging. "
gdevanla,"If you want to preserve this database from enviro clean, you could consider using .local/share folder. But, may be you don't care if you loose old data?"
gdevanla,Is this threshold sufficient :smile: 
brandtbucher,"Yeah, this functions only as a short-term store in practice."
johnjhawk,why are my clicq changes part of this review?  Am I seeing merged changes?
flexatone,I merged from default; but I do not understand why they are here!
johnjhawk,"I get tripped up when I see ""anb"". I have to tell my brain that there is no such thing as a China ""anb"" security. I slightly prefer  ""a_and_b"". "
flexatone,"its not ""a_and_b""! it is A north bound! I have to use it in so many places, it was hard to come up with something that was not too long. "
johnjhawk,How coupled are these three parameters? Will we ever want to use inclusion_factor_* while china_anb_eligible_active is False?
johnjhawk,"ha! wow, well I guess ""anb"" works then!  I should have know that you wouldn't have said ""a 'n b""."
flexatone,"Turning on `china_anb_eligilble_active`, even when inclusion factors are 0, does change how the GEIU processes Chinese securities. The reverse is not true: if `china_anb_eligible_active` is False, the value of inclusion factors is irrelevant."
brandtbucher,This should be removed before merging.  ```suggestion ```
brandtbucher,```suggestion DO_NOT_MERGE = None ```
nekobon,"Does ""additional"" here mean there are some derived fields already in the given `frame` and you're adding more? I wonder if we can name it a bit more specific."
nekobon,This number is so big! :laughing:
chaburkland,That's a good point. It probably should just be `add_derived_fields`.
vhquang,"I just want to to point out that in this change, I apply the counting company for each region_sector only in the Carbon universe. Previously we have that region&sector for all companies.  The effect it has is that we now use max CI of company in universe's region_sector as penalty for missing CI. It sounds like what we would want, reading from the techdoc. I will confirm it with Joseph."
chaburkland,I'm wondering if it would be good to either typehint this or rename this variable. I'm wondering if `series` would be preferable to `sr`
vhquang,Agreed! I see no harm in having more meaningful variable.
nekobon,It looks like the previous version (without pandas) was more conventional and easier to read. Did you change to pandas because they were too slow?
nekobon,"Can we rename this ""field"" to more specific? Maybe this is ""new_field"" to be added?"
nekobon,"We usually call ""small"" when the company is small (its rafi size == small). I wonder if you can put this in the MZ calculation Factor."
nekobon,I'm confused what this is trying to do. Maybe we can meet on zoom for more discussion.
vhquang,"~It is just an exercise to force me to learn more about static_frame. I thought sf.Series is safer to use than pd.Series.~ I didn't read the code you quote carefully, it is just for me to avoid add column into the table then read it back into Series. I don't notice any speed difference when doing build (I haven't benchmark the difference yet).   If you prefer to have conventional implementation, to keep thing consistent, it is a valid request for me, and I happy to switch back to the conventional `add_column_from_function` way."
vhquang,"I thought about having it in the MZ factor, but 2 thought come up: - I don't right away know how to do that filtering with function pipe. I usually have hurdle with function_pipe. - If I do it in MZ factor, I may not output the intermediate values (mz with NaN and mz filled with zero), which may be more explicit and more helpful for QC."
vhquang,"That is one of the thing I brought up in the `static_frame` channel, about how to filter numeric value in the series with None/NaN. The None/NaN value will cause comparison to fail: ``` ipdb> f = sf.Frame.from_dict({'a': [1, 2, 3, None], 'b': [None, None, None, None]})                                                                   ipdb> f                                                                                                                                               <Frame> <Index> a        b        <<U1> <Index> 0       1        None 1       2        None 2       3        None 3       None     None <int64> <object> <object> ipdb> f['a'] < 3 *** TypeError: '<' not supported between instances of 'NoneType' and 'int' ``` So, the code is just a hacky way to fill the NaN with a numeric value that will be false for the filter."
nekobon,"You can write intermediate columns within Factors, too. Let's discuss on zoom."
gdevanla,You have an ipdb here!
gdevanla,I think  we need a `return` here.
gdevanla,Should we move the `imports` to the top now?
gdevanla,Looks like we don't need this variable any more.
gdevanla,Do we need any asserts here?
gdevanla,Do we need any asserts here?
chaburkland,"Out of curiosity, what is the reason for making this a frozenset?"
flexatone,"It could be a tuple as it has only two elements, but if it is a set that does not need to be mutated I always try to favor a `frozenset`."
flexatone,"Yes, that is a good idea. The gen-spec might have some side-effects, but it should be fine to move it up."
flexatone,"sorry, I had not pushed my last changes; this fixed now!"
flexatone,also outdated; this is fixed!
flexatone,good catch!
flexatone,"yes! again, this was in the not-yet-pushed code."
flexatone,"yes! again, this was in the not-yet-pushed code."
nekobon,Would `Series.from_overlay` replace this function?
nekobon,I thought sf.Frame.mean does this already by default. Is it different?
nekobon,nice test coverage!
chaburkland,Yes - this is an artifact from creating this method before `.from_overlay` was released. I'll remove this.
chaburkland,"Hmm, let me check."
chaburkland,:)
chaburkland,Haha! It is the exact same. I'm wondering why I did it this way.... (I'll replace this method with `sf.Frame.mean`)
nekobon,"It is a very minor point, how about to add underscore in these names, like `ceiling_1`? "
chaburkland,Done.
flexatone,"we probably do not need this `print`, right?"
ForeverWintr,Why the nested tuple here?
ForeverWintr,"I think this type hint should be `tp.Dict[int, UserDeltaInput]`"
ForeverWintr,I think we prefer to use `loc` when selecting rows like this. 
gdevanla,Good point. I should flatten that.
brandtbucher,"If we want to make this a `cached_property`, then we can ditch the `self._meta_data = None` line in the init method above too.  ```suggestion     @functools.cached_property     def meta_data(self):         '''         Metadata here is a property, so that we can keep this loading lazy. Only few apps(kozuchi)  needs this meta_data while using SQL Alchemy expression language. This operations typically seems to take 10-15 seconds and we don't expect this to be refreshed unless we are getting a new connection (or by way of restarting the process.)         '''         return MetaData(self.engine, reflect=True) ```"
gdevanla,Cool. I like it. Will make the change. Did not know that existed.
brandtbucher,New in 3.8!
gdevanla,That shows I need to read up on 3.8! Thanks!
nekobon,:+1:
nekobon,"This looked strange first, but I see you use it as a column name. Maybe change to `FIELD_NAN_MEASURE`?"
nekobon,Please change the strings to symbolic constants.
nekobon,Also at the creation of these columns.
ForeverWintr,"I just thought of an edge case: if static's `download` is called with `force_fetch=True` and `fp` is a directory I think we'd hit this `pass` without a race condition. In practice I don't think we ever actually do this (because we zip directories).   I think we could explicitly remove the file in `download` if `force_fetch` is `True`, to address this. "
ForeverWintr,"Looking at this now, `temp_target` should never be a directory (I don't think you can create a directory with `open`). Maybe we don't need the try except here?"
ForeverWintr,"My bad, `fp` *can* be a directory, as its the result of unzipping, so I think we do need to handle this case. Explicitly trying to delete in `download` is probably sufficient. "
brandtbucher,Good eye. I'll remove it.
brandtbucher,"Yep, nice catch. Fixed here."
ForeverWintr,Unfortunately I see another race condition between this and the `exists` check above. The best solution I can think of is just to catch `FileNotFoundError`. 
brandtbucher,"Just one more fix I added here: we were previously catching *way* too many types of errors here (see the `TODO` above). One effect this had was downloading the whole zip file without unzipping if e.g. a timeout occurred (perhaps due to 8-12 processes all hitting static at once...). I actually saw this happen on some trials on my machine today, where a `.zip` file was being downloaded where we expected a normal file or directory to be... just a consequence of this function's ""nice"" interface.  I've verified that this doesn't happen anymore."
ForeverWintr,"Wow, great catch!   Can we go even further, and only try the second download if the error code is `404`? I assume that's the only case we actually intend to handle here. "
brandtbucher,"Yep, good idea. Done."
flexatone,"If `count` is 0, do we get the current quarter? If `count` is -1, do we get the next quarter? Perhaps a more general interface would be: ```python get_quarter_end(d: datetime.date, quarter_shift: int = 0) ``` where quarter shift can be positive or negative, and `-1` returns the previous quarter (rather than `1`). I also wonder if we should return a year-mo tuple rather than a date, and let the user decide if they want to convert that to last calendar date or last business date (with or without holidays)."
flexatone,"This is a fine start, but these will need to change if we change the interface. Also, it is easier to create the date object with integers rather than going through strings: `datetime.date(2019, 12, 31)`"
flexatone,"is it better to model `quarter_num` as integers 0 to 3 here, rather than 1 to 4?"
AlanMLin,"I like the idea to make the function more general. I will rename the function to get_quarter_end(), and 0 gets the current quarter end, -1 gets the previous quarter end, 1 get the next quarter end."
AlanMLin,"I now use date.date(), a lot simpler.           date_in = datetime.date(2020, 3, 18)          # get current quarter end                  date_out = get_quarter_end(date_in, 0)         self.assertEqual(date_out, datetime.date(2020, 3, 31))"
AlanMLin,"I am a little hesitant here. quarter # 1-4 is easier to understand. Do we use 0 for Jan, and 11 for Dec when we refer number of month? Or just 1-12 ? I would like to keep it 1-4. but we can discuss."
flexatone,"I do not have a strong view on this. You are right that we always refer to January as 1, but here, this is an internal number only used for this calculation and not exposed to external clients, so using 0 seems plausible, particularly because you to add and then remove it. But I can accept it is easier to debug or reason about as values 1-4!"
flexatone,You might be able to avoid calling `.date()` on line 1157 if you use `datetime.date` instead of `datetime.datetime` on lines 1153 and 1155.
flexatone,"I think these tests can go in the existing module `test_date_util.py`.  Also: I think you want to test a few other `date_in` values, such as those that get to a year wrap right away, such as 2020-12-15, for example."
AlanMLin,I made the change as you suggested.
AlanMLin,I moved the tests to public/test_date_util.py and added a few more tests around year end
flexatone,"I am not sure you pushed yet, but just to be clear: you want to return a `datetime.date` object, not a `datetime.datetime`; if you use `datetime.date` on lines 1153 and 1155, you will get a `datetime.date` automatically."
gdevanla,stray comment?
gdevanla,Why do we construct this here and pass it around? Looks like we could derived this from `sedol_to_co_id` in the called function as needed. 
flexatone,"fixed, thanks."
flexatone,"That is True, but I figured it was better to be explicit as the `sedol_to_co_id` mapping is 1 to 1, but the `co_id_to_sedol` mapping may be 1 to many. I had not realized that we were relying on PD's support for this in this implementation; I do not want to rely on that, so by having two arguments we provide a pathway for replacing the `pd.Series` with non-unique index with something else in the future."
vhquang,"There may be more background of this, that I don't understand. From the diff and the comment, it looks like previously we expect other security lines of same company to be zero. Did the data change, or our expectation change?"
vhquang,"So if I understand this change correctly, we now apply different max_cap per security (SEDOL), ~but still use the same min_cap (L897)~ (edit: misread it with `trap_door`). I imagine this will bring lot of change to our `hlw`. It would be helpful (for me) to get more context of why we decide to have such change."
flexatone,"We permitted multiple security lines per co, but were not handling them correctly in some situations; this change handles them correctly in all cases. Our expectations have changed as we now are expecting multiple security lines per company during this ""security migration"" phase a few products are in right now."
flexatone,"Not exactly: we are transforming a a company-level constraint to a security level constraint. If we say the company-level max weight is .5, and we have two security lines, the max weight of each security lines could .25 and .25 and thus not violate the company-level constraint; this example assumes an equal distribution, but in practice we use the observed ratio of weight between the security lines to do the distribution."
gdevanla,"We need this. This value is used to restrict number of workers that can run an AgentQ test at any point in time. Currently, we have this set to 5."
flexatone,"Should we remove `/tmp/falcon-sensor_5.34.0-9917_amd64.deb` after we install, such that we leave `/tmp` clean? It is not a major concern as it is small, but probably a good practice."
brandtbucher,"That makes sense. I originally left it so that repeated runs on the same machines don't keep downloading and deleting the same file. But as you point out, it's small enough that that's not really an issue."
johnjhawk,"Hi John, Use series.from_overlay("
johnjhawk,this needs to go to include doc thing
johnjhawk,comment about rapcinput
johnjhawk,"good idea, done"
johnjhawk,Good catch. Done.
vhquang,"I think this method is too specialized for `PlatformResource`. I saw we have `GitHubIS` inherited from it, which I think this method is better suite.  Along that line, I see: https://github.com/ResearchAffiliates/invsys/pull/215/files#diff-028fb17787b630452f8d18833684d345R279 I am not familiar with docbot, but it seems to me we only expect a repo-type resources (`Mercurial`, `GithubIS`), and not all type of `PlatformResource`. If that is correct, maybe it is better that we just have it type-hint to `GithubIS` instead of `PlatformResource`. "
brandtbucher,"Hm, it's tricky because StaticFrame's docs also use this, and it's in inventory as `GitHubStaticFrame`. I agree that `PlatformResource` is probably the wrong place for this, though. I think I'll just hardcode the f-string in the `_clone` method, which makes this much simpler."
vhquang,It is little ambiguous to me what this class does. Is it only used for staging data?
vhquang,"Github doesn't let me quote on the line I want to quote, so I just quote this diff. Deleting and inserting row inside a loop is quite bad in term of database performance. I think we can do that better by collecting the row we want to delete and insert, and execute them in batch outside of this loop."
vhquang,"I see in couple places that we reference to table in `meta_data`. I would think it is better to define a class that reference to those tables, so we can have benefit of static typing/typehint. Are those tables well-defined, or still sketchy?"
gdevanla,"Good point. But, we are not taking about too many rows at any point. May be less than 100. So, I am avoiding the complexity of batch operation."
gdevanla,"Good point. These are table names which are very stable and will not change. It is equivalent to using them in a SQL statement. Therefore, not sure adding a class would be a good approach."
nekobon,Maybe it would be a bit cleaner to convert `as_of_date` before sending it to `super().__init__`.
ForeverWintr,"I think it's good to get in the habit of doing `os.makedirs(base_dir, exist_ok=True)`, to prevent race conditions. "
chaburkland,That's a lot better. I'll do that.
chaburkland,Thanks Tom. Will do
vhquang,"I know it is conventional, but is there a clearer acronym that the industry used for bps?"
vhquang,"Are these tests intended for this change, or leaked from other changes? By quick search, I don't see them use `bps`?"
chaburkland,Are you wanting `bps(12.44)` to be valid? I typically only hear people talk about basic points in strict integers.
nekobon,"Yes, `bps(12.44)` should be valid. We can have non-integer bps, like 0.2 bps (min weight of multi products)."
vhquang,"Would it be better to call it `bips`, or `basic_points`? https://www.investopedia.com/ask/answers/what-basis-point-bps/"
vhquang,"For a person not familiar with financial terms like me, it feels better to state the definition of `bps`, rather than how it can be used. The usage is already clear with the included example."
nekobon,"How about to call it `basis_points`? But again it is to convert ""from"" basis_points, so it still feels a bit strange."
nekobon,"In order to add `test_bps` as not a free-floating function, I wanted to put these tests into a class. "
nekobon,Perhaps `basis_points` or `from_basis_points` could help better. But `from_basis_points` somehow sounds too long for me!
vhquang,"On the to/from perspective, I think it is fine, as we are adding labeled unit, that its goal is to hide the internal value (ie: float). To say it another way, I don't think people need to know the internal value, nor we need to hint them. Our goal is to let people use the semantic value."
nekobon,"I'm more afraid people might think that `bps` converts the argument TO bps unit, just like `float` converts things TO float. So one might assume `bps(0.0001) -> 1`"
vhquang,"This is obviously my bias, as we talk about the ""from bps to float"" direction first. But I am not sure if the opposite direction is what people will be using. If I already had a value `min_weight = 0.0001`, I can just use it rather than convert it to `bps`, which internally just converts it back to `0.0001`.  I think the goal is to have a layer that would help the reader, so using `min_weight = bps(1)` is more preferable than `min_weight = 0.0001` in the first place.  If we can have `min_weight = 1 * bps()`, maybe thing will be less confusing? And ignore the whole convert thing?"
nekobon,"Oh, I really like the multiplication idea! I'll change it now."
vhquang,"The issue is not with the size of the data, but doing query in a loop increases the chance the database get into deadlock, especially with insert/delete which needs to acquire table lock.  Beside, I think doing bulk insert/delete wouldn't increase much code complexity, seeing that you already using SQLAlchemy core. There is an (old) example about it:  https://github.com/ResearchAffiliates/invsys/blob/990412f1d492837e0a3777b84aea7bf9e867e599/deprecated/bb_tracking.py#L149 You would just need to collect them and execute in builk."
vhquang,"It the tables is stable, I think a schema class is nicer to have. Referencing columns the meta data like `returns_char_t.c.` wouldn't give statistical autocompletion, as we would with defining a class."
flexatone,NOTE: this needs to be controlled with a blender timeline parameter.
ForeverWintr,"Out of curiosity, what's the time complexity of this move? If most `sec_id`s are in the index, the previous approach might be faster. "
ForeverWintr,Maybe a bit more descriptive here?
ForeverWintr,"I think you mean '**no** handling for {lw_source}'. Also if `LiveWeightForWCRSource` was an enum, you could use identity checking instead of string comparison here. "
ForeverWintr,I think you're recomputing `live_holdings > 0` here. Maybe just hold on to the result from the computation on 2422 above?
chaburkland,Maybe: `aphl_psu = dict(co_group[Fields.APPROX_HL_PRE_WEIGHT].items())`
nekobon,:laughing:
nekobon,This can use `df_processor.get_union_index(dfs)` 
flexatone,good idea!
flexatone,"yeah, that as a joke for John, but we never got it, so I will provide a better message."
flexatone,"Like a dictionary, constant time. I found the old implementation verbose without a likely material benefit."
flexatone,"that might work, thanks!"
flexatone,agreed!
flexatone,"good catch; I thought about using Enum, but went with string thinking there might be places where we supply the parameter with strings... but there are not, so Enum is better. thanks!"
flexatone,agreed!
flexatone,"well, its a little tricky, as the dict is defined outside of a big groupby, and each group might take different paths to updating that one dictionary, I think this approach is reasonable. The only other option might be to create a dictionary and update, i.e., `aphl_psu.update(dict(co_group[Fields.APPROX_HL_PRE_WEIGHT].items()))`, but that seems more expensive than just doing the loop over items."
chaburkland,"Oh I see. I misread what scope this is taking place in.  I think you don't need to create a throwaway dict. I think you can just do: `aphl_psu.update(co_group[Fields.APPROX_HL_PRE_WEIGHT].items())`  I do think this is prefereable, since it delegates the for-loop to cpython."
flexatone,"ah, right, I forget that update() can take items; let me try that!"
chaburkland,Maybe `FIELD_DATADATE`?
chaburkland,Same for the `FIELD_MAPPING` on line 40
chaburkland,"Maybe replace ""sich"" with `self.RESOURCE.FIELD_SIC`?"
chaburkland,Delete this comment?
nekobon,Thanks for catching! I will change this
nekobon,Thanks! I'll update them 
johnjhawk,Does the 2018 grafi not us the grafi include spec? I'm surprised that this parameter needs to be changed here.
nekobon,"I was surprised, too!"
nekobon,"I think we should put this in **kwargs instead of CarveSpec. Multi is a special case min weight are different, and we don't want to use it for other products."
nekobon,I don't think you changed this in your branch. Would it be possible (pull from default?) to show only your changes?
nekobon,It's great to raise the error here!
vhquang,"This is a manual fix, to pick up your work on BPS to be used in this branch."
ForeverWintr,Do you need the `apply` here? Can't you just pass the array to `isclose`?
ForeverWintr,"The reason for this check is that only one delta can exist for a fund at a time, right? Maybe the error message could explain that a bit more. Something like `f'Cannot add delta for {acct_name}, because a future delta already exists'`"
ForeverWintr,"Why use `datetime` instead of `pd.to_datetime`? I think we observe strange things when using python dates in pandas frames, and jrebach has said pandas doesn't support it. "
ForeverWintr,Do you intend to use this to typehint the `AAF_DATA_SOURCES` dict below?
ForeverWintr,"`current_date` should be `tp.Optional[datetime.date]`. Given that it's not provided in production, maybe the parameter should be called `current_date_override`?"
ForeverWintr,I think the name of the parameter in this docstring needs an update. 
ForeverWintr,Why does the header need to be different for the sqlalchemy object vs the calculator?
ForeverWintr,"Should `pair_1, pair_2` be arguments to the method? It looks like this will fail unless date_pairs is exactly 2 pairs. Or if the date_pairs are always those produced by `generate_dates` above, maybe just call that method from `create_target_weights`?"
ForeverWintr,Extraneous import?
ForeverWintr,This seems like it would be easy to forget about. Maybe you should make these tests fail until you're ready to implement them?
ForeverWintr,You could also pass `reverse=True` to `sorted`
nekobon,How about to call this ATTRIBUTE_CARVE_MIN_WEIGHT to match with the max one?
vhquang,"Thanks Yu, totally agree!"
brandtbucher,"@flexatone I'm not familiar with this code, but it looks like this change could have been accidental?"
chaburkland,"This is actually a mistake I made! I had moved `EARLIEST_BB_FA_DATE` off the resource onto the class directly, but missed this reference.  The reason the test still worked, is because earlier in the test run, a different unit test updated the attribute properly, and so the state was updated to be correct before this test ran... :grimacing:  The reason we found this, was because we needed to run this test in isolation due to a sf 0.7 upgrade, but the test failed due to the state being incorrect."
gdevanla,"Yeah, I am still trying to tune the use of this. Will see if I can make use of it soon or else I will get rid of it."
gdevanla,"I was intending to make that argument mandatory at this level, since I did not like the side-effect call to datetime.date in this function.  I will fix all calling sites to pass this values. We should only be calling datetime.date at the outermost level (in our controller etc)."
gdevanla,"It the responsibility of generate_dates to produces a pair with same length.  I left the flexibility in there with `create_target_weights` to be able to create different set of fixtures. But, I think I will reconsider it given that the fixture set up is already complicated."
gdevanla,Yep.   I don't know why I always reach out reversed! 
gdevanla,This can go. I have these tests elsewhere. Thanks for pointing that out.
gdevanla,"Because, currently the dataframe fed into the trade calculator has different set of columns. The AAFTarget object needs columns to map to the attributes.   Ideally, it would have been nice to use just one object. But, for now I think we are stuck.  For now, I will mark this resolved. But,we can chat on better ways to do this, if you have other thoughts."
ForeverWintr,"Isn't `init_db` the wrong name? This is creating a session, not initializing the database. Maybe `get_session`?"
gdevanla,Yep. Ill change it. Thanks!
vhquang,@nekobon I spot this while debuging the difference between my `post_min_weight` and portfolio weight. Please let me know if this is the right way to return the result from our plugin calculation.
vhquang,"Also, I just realize that this only has the max_cap. Do I need to include the min_cap before return it back? ie: `new_vol_cap = max(spec.min_weight, max_vol_cap)`"
nekobon,Maybe we don't need this any more?
nekobon,"How about to call it `preprocess_vigeo_data`, or more explicitly, `remove_unwanted_isin`?"
nekobon,"It would be great if you can output these in somewhere for SI team to be aware, maybe in the summary table."
nekobon,How about to add a symbolic constant of `Yes` to the vigeo reader class?
nekobon,:+1: 
nekobon,I think it is better to avoid assigning repeatedly. How about something like ```python involved = (frame[involve_check] == Vigeo.MAJOR_INVOLVEMENT).any(axis=1) with_yes = (frame[boolean_check] == 'Yes').any(axis=1) return involved | with_yes ```
nekobon,I think you can replace lines 568 and 569 with this (not tested yet!) ```python ghg = _ghg.reindex(p_indices) ```
nekobon,"If EVIC unit is always 1/1M, should we do this multiplication within EVIC Factor?"
nekobon,"Do we use this -1 somewhere, or just for QC purpose? (If we use it, it might be better to have a symbolic constant)"
nekobon,Is it possible to have `nace_mapping == ''` when we use `fill_missing=-1`?
nekobon,I don't think you need `to_frame()` here
nekobon,:+1: 
nekobon,"Since `excluded == True` contains all companies excluded, but `included == True` does not contain all that is included and also requires `.get(.., True)`, I have a slight preference on keeping `excluded`.  How about something like ```python excluded = set(excluded.loc[excluded]) # and  function = lambda row: row[target_table.pkey] not in excluded ```"
nekobon,Universe weight sounds like RAFI weight vector. How about to call it `_get_universe_ci` as in the tech doc? It also aligns with `_get_portfolio_ci`
nekobon,Please confirm the tech doc and remove this comment
nekobon,:+1: 
nekobon,We can put these two divisions outside `re_alloc`
nekobon,This looks like a temp function you used for debugging. Maybe remove before merge?
nekobon,"Minor point, but since there are many field columns, I think it is safer to use kwargs here"
nekobon,I'm a bit confused. `field_weight_in_u` seems to have CI multiplied already. Do we multiply again (CI^2)?
nekobon,We need to add this and other CI in the summary table before building for production. Is it added somewhere?
vhquang,"TODO for me, see if using dictionary or series is better"
vhquang,"I see, that is a great point!"
vhquang,"TODO for me, check '' vs -1"
nekobon,Nevermind! I was reading incorrectly 
vhquang,"This should be out of this function, maybe another step."
vhquang,Thanks Yu!
vhquang,"TODO for me, clean up this function."
vhquang,This is a good point!
vhquang,"TODO put this in summary! Universe EVIC, target CI."
vhquang,"I decide to go with your suggestion about reindex, since I need ghg in series format, rather than dictionary format, for vector calculation."
vhquang,"The '-1' is only used for QC and inspection at the moment . It was previously blank space, but then was uncompletely refactor into '-1'."
vhquang,"I didn't realize the `nace_mapping` is sf.Series, so I need to transform it into sf.Frame before convert that into pd.Frame."
gdevanla,I am guessing you also moved `program` and `machine` from base class to keep the `base` class bare.
gdevanla,I see linting errors here for ` = `.  Do you see them as well?
gdevanla,"This is cool, TIL that using dc.field, you can control the parameters that are set up with the __init__ method. Magic!"
gdevanla,"Since, you are making this change, you might as well use  `AirflowQueues.DEFAULT.value`. We have an `enum` defined for this in the inventory file."
gdevanla,"Interesting choice.  We get the advantage of bundling the related parameters. But, we need to remember to set the values for the extra parameters.  With the `__init__` approach, we are forced to provide values for all attrs.     I am not suggesting we change this. Just an observation on this design choice.  Is that understanding correct?"
ForeverWintr,"Hmm, I do not see linting errors there. What linter are you using?"
gdevanla,I am using the standard pylint. Doesn't the linter complain about spaces around `=`?
ForeverWintr,"We would need to remember to set the values for the extra parameters in the old version too, right?   I ran into trouble with the `__init__` approach because I didn't realize that there was an implicit grouping of the required parameters. If you're using `'PROD'` env you must use the `AirflowDBHost` app_db and `'imcron01-prd-i'` as broker machine, for example. Mixing those by mistake is how I accidentally pointed the dev server to prod. "
gdevanla,Yep. I realize how you arrived at it.
ForeverWintr,"I had to do this to work around the `dataclasses` limitation where inheritance causes non-default attributes to appear after defaults. Because `ExecutionAirflow` has defaults for `user` and `dir_layout`, It couldn't inherit from `ExecutionBase` which defines them ahead of `program` and `machine`."
ForeverWintr,"Strange. It doesn't on my machine, and I see spaces around `=` in other class definitions in inventory! "
gdevanla,Ok. It could be that you are I am using a stricter version of .pylintrc. 
vhquang,"You need to switch your quote around. This will work: :exploding_head:  ``` ""{{ '\n'.join(public_keys.values()) }}"" ``` I will not tell you how long it takes me to figure that out..."
ForeverWintr,You mean that results in correct formatting in the authorized keys file? Wow! 
vhquang,"We have similar functionality in `git_deploy_access.yml`: https://github.com/ResearchAffiliates/invsys/blob/9cbfa837acd5eb8f80bf280aab99b33fda5971f5/deploy/core/tasks/git_deploy_access.yml Do you think that can be re-used here, or is there a use case that we should have separated config?"
vhquang,"I am just curious, is this the user that will be created on the image?"
vhquang,Is this a fix for sandbox setup?
vhquang,"Is it for your ""testing"" AMI? I dont' see any issue merging dev-specific code in for this case, just want to double check that you intend to merge it in."
vhquang,"I feel weird to have this in our testing. If there is any failure, it will notify everyone the failure with the expected password in blank text. Maybe we can mock it out, or not testing our credential this way."
gdevanla,"I think this should not be here any more, correct?"
gdevanla,I think we talked about it. This change would imply that all users of app_start would end up having to configure airflow. Do you plan to update this before the merge?
gdevanla,"Nitpick. Do we need a symbolic constant for `imcron` user, or may be we already have made this assumption in other places in our code?"
gdevanla,Um. Should this be app_install or app_start?
vhquang,"Also, no problem merging this in as well, but just double check you indeed intend to merge."
vhquang,Somehow I am under the impression that we are already doing that (or maybe were doing that at some points).
ForeverWintr,The problem is that I configure the AMI by running ansible from the vm that's creating the ami. That means I have to clone our code onto the vm before I can run any of our playbooks. I had to duplicate this step of adding the deploy key in order to do that. 
ForeverWintr,"imcron is the user that's created on the image, but this line isn't what dictates that. The base image definition above contains the line `""user_data_file"": ""../config/cloud_init_defaults.cfg""`. That uploads a special cloud init file that tells AWS to change the username to imcron. This line just tells packer that when it connects to the instance, it should do so using 'imcron' as the username. "
ForeverWintr,"When we run bash_setup on the VM, we run it locally. When `bash_setup` was written, we assumed that when `ansible_connection == 'local'` it means we're running on one of our personal machines. That's not the case here, so I added an exception to continue to apply the PYTHONBREAKPOINT fix. "
ForeverWintr,It would be nice. I'm not sure what best practice is for ansible playbooks though. 
ForeverWintr,"Yes it is. Note that it doesn't actually exist right now. To create it, I move this file out of the `stage` directory. I think it makes sense to merge it for now (maybe I should rename it to something more generic though). "
ForeverWintr,That's a good point!
ForeverWintr,I'm not sure. I didn't change that line and I'm not really sure what its purpose is/was. Do you think we should remove it?
ForeverWintr,"This should be the same as our old `app_start`, I've just moved some of it into a different playbook. The only difference is I've uncommented the airflow setup task, but I think my additional `when` clause will make it only run on airflow related executions. "
ForeverWintr,"`app_start` here is deliberate. This is executed when the VM launches, so I actually want to turn the app on. I could technically create a dedicated AMI for the db_monitor, but its `app_start` is fast enough, and we deploy it rarely enough, that a dedicated AMI didn't seem worthwhile. "
ForeverWintr,"Thanks for checking. This was usefil for submitting a bunch of jobs to test autoscaling. It can probably be deleted once autoscaling is in production, but I think its useful to have for now. "
ForeverWintr,"This is actually a change from #261, so I'll address it there. "
flexatone,Nice catch on the type!
flexatone,"I assume we are adding `input_date_revision` as a parameter for test repeatability, right?"
ForeverWintr,"Actually I added it for speed purposes! My sketch resulted in calling this multiple times, and if you don't specify an input revision each call results in a roundtrip to the SVN server to get the latest revision number. Passing a revision here speeds things up dramatically. "
flexatone,nice!
flexatone,"`get_measures_tall` would be a more hierarchical name; but if there will never be a `get_measures_wide` method, perhaps just `get_tall` is sufficient?"
chaburkland,Yeah that's a better name.
nekobon,:+1: 
nekobon,I like this teeny-tiny zero
nekobon,"How about to call this something like `CachedPropertyRenamedFrame`? It sounds like for generic purpose, but I see it needs to return a Frame (or anything with `.rename`)"
nekobon,"Your implementation is clean and fast. I just wanted to share my attempt of vectorizing this sacrificing memory and readability :see_no_evil:.  ```python dim_multiplier = (len(prev_research_capital), 1)  rcdr = np.full(dim_multiplier, RESEARCH_CAPITAL_DEPR_RATE) power, _ = np.indices(dim_multiplier) # [0, 1, 2, 3, ...] multiplier = np.power(rcdr, power[::-1]) # [..., δ**2, δ**1, δ**0] prev_research_capital = (prev_research_capital * multiplier)[::-1].cumsum(axis=0)[::-1] ```"
nekobon,:+1:  It is interesting we need this line just to get a value from dict!
nekobon,"`disk_memoize` uses `(type(cls).__name__, str(cls))`, so you might not need this extra `salt`, if that's always the name of cls. "
nekobon,Would this and `exclude_first=True` take the first PED instead of the latest?
nekobon,:+1:
nekobon,"I updated this on my branch, too! Let's discuss with team how we can make this safe during collaboration with multiple branches."
chaburkland,I didn't know this! Thanks for clarifying. I'll remove that kwarg
chaburkland,"I don't fully understand the question, but I think the answer is yes. By sorting first, we guarantee the peds are in order, so when we exclude_first, it drops all peds except the latest one."
nekobon,"Is the PED sorted from larger to smaller? If smaller to larger (by default of `sort_values`), it seems like `exclude_first` would drop all duplicates except the first (smallest) PED."
chaburkland,Oh wow! Good catch. I'll updated it to use `exclude_last=True` as that gives the behavior I thought it was doing.
chaburkland,Yeah I've been a bit confused about how best to do this.
chaburkland,"I'm fascinated by this, so I'm trying to understand it. I'm pretty sure it's buggy though, as it's giving me different (incorrect) answers :grimacing:  "
ForeverWintr,"How about using the new fstring debug syntax here? Otherwise this will print `'... in mode = True'`.  ```suggestion         logger.debug('Invoking from module = {__name__}, {debug_mode=}') ```"
ForeverWintr,Thanks for fixing this name!
ForeverWintr,"But `price_drifted_dfs` is not actually a dict of dfs, right? It's `tp.Dict[int, tp.Dict[str, pd.Dataframe]]`? Maybe it could be called `drifted_wts_by_account`?"
ForeverWintr,"```suggestion         if targets.empty: ```  I think it's preferable to use `df.empty`. If there's an index but no values, `len(df)` returns the length of the index. I'm not sure if that can happen in this case, but `df.empty` seems a bit more readable too. "
ForeverWintr,Was this intended to be an fstring? 
ForeverWintr,"I think you need to account for `future_target_wts` being `None` here. However, maybe it's better to just return an empty df from `get_future_target_wts_if_any` when there are no future target weights?"
ForeverWintr,"Does this need to be a warning? ""You told me not to update, so I'm not updating' seems better suited to `info` to me. "
ForeverWintr,It seems we re-pack the results with the `current` and `future` keys inside `update_target_model` (line 729). Can you just pass the `results` dictionary and iterate over it? That would reduce the number of places where those strings are hardcoded. 
gdevanla,"My thoughts are that failing with `None` is better than failing with empty `df`. A `None` makes it more explicit that nothing was found and forces us to check. Empty df may get processed incorrectly downstream, I think."
gdevanla,"I probably should spend time and just define a namedtuple, that will have 'current' and 'future' attrs. That way, we can remove this 'stringy' references, and also define the `future` to be Optional type.  I will save this for a task after I complete the engine enhancements."
gdevanla,"yeah, I went back and forth on this, being explicit vs packing it up. I will reserve this change along with the change to add a namedtuple that will hold two attrs (`current` and `future`) and we can pass around that named-tuple."
ForeverWintr,"Oh, I misread your zip, and thought you were iterating over future_target_wts! I retract my suggestion!"
ForeverWintr,I'll change this to point to default after I merge. 
gdevanla,"Wondering does this caching provide significance performance boost?  Also, will this be valid for long running processes. That is, does a session get timeout/resource get timeout when not is use?"
gdevanla,You could consider using `AirflowQueue` enum defined in inventory for these queues.
gdevanla,Can you  add `type` of `group`?
ForeverWintr,"Good questions. I don't actually know how big the performance boost is, but looking at the source code of boto3 I see that creating a new client/resource involves many steps; enough to make me think it was worth not re-creating the client/resource on every request.   I'm not sure about timeouts either, but boto3 itself caches a global session object for the duration of the process, which suggests to me that they intend these objects to be cached.   For context, the monitor that uses the `AWSAgent` makes multiple aws calls per second, so I think it makes sense to hold onto these resources. "
ForeverWintr,"Good point, thanks!"
ForeverWintr,"Good catch, thanks. Unfortunately `group` is a big, nested `Dict`.   "
ForeverWintr,"I'll leave it as is for now, and monitor for issues. "
gdevanla,"We need to consider negative weights in Leverage funds as well, correct?"
gdevanla,Um..Can you please clarify why we need this step. I am not able to see it. 
gdevanla,"Just to confirm both `raw_dfs` and `formatted_dfs`, have the same df's other than order change on like 335?"
ForeverWintr,"You're right! I initially took that into consideration, but forgot about leverage and removed it. I'll adjust. "
ForeverWintr,"Before my changes, we added columns to the report dfs in the order we wanted them displayed. In other words, the dataframes were constructed with columns in the right order.   I added the 3 new columns that Jay requested in the `_build_net_sheet` function, and we add the 'net' column in this loop. If I don't re-order the columns, the net df will have it's net trades column after the new 'all shares trade' columns, which isn't what we want. This step is restoring that desired order.   "
ForeverWintr,"Correct. I wasn't able to change column order in place, so I had to make a new df collection."
nekobon,"If this is for missing SIC code, please use 0. We have symbolic constants for missing data in my branch, but I've not yet merged to default."
nekobon,:+1: 
chaburkland,"I'm not sure I understand the distinction. This is for companies in MeasuresCAF that do not exist in the compustat sic data. It's not about companies with missing sic data, it's about companies with_no_ sic data."
nekobon,It is not too important because users wouldn't be seeing this data. I want to make users always receive 0 as missing SIC data instead of 0 OR nan.
ForeverWintr,"Adding these to the css mostly worked. I notice when I resize the web browser that the padding on the targets page has changed a bit, I think because the `body` attribute here defines a 52px padding, which was not present when these tags were in the targets table."
ForeverWintr,Should this still be here?
ForeverWintr,"I don't think it makes sense to use `get` here, as if either `trade_date` or `a` isn't found, we'll fail anyway. Mypy complains to that effect, too. "
ForeverWintr,When do we use `previous_output`?
ForeverWintr,Can this be removed?
ForeverWintr,I have the same comment about `get`s here. 
ForeverWintr,"If this is for testing, should it be in `test`/`sketch`?"
ForeverWintr,Mypy gives an error here because `'TradeInput'` isn't defined. 
ForeverWintr,It looks like this is the start of a sentence?
ForeverWintr," Why are you creating `fn_components` as a tuple, then immediately unpacking it? Also, should you use the invsys temp dir here?"
ForeverWintr,"Isn't this simpler? ```suggestion         if for_writing:             return os.path.join('/tmp', 'stress_test_input_loading', 'snapshot_1') ```"
ForeverWintr,"You should try pytest's `tmpdir` fixture! I like it better than `self_destructing_directory` because it persists after the test runs, so its easier to debug if needed. "
gdevanla,"This again is going to change. But, we need previous output to get the updated wts of funds after the trade from previous day's trade plan."
gdevanla,"Yeah, I will clean up the tuple usage. I did not do a good job of cleaning that up."
gdevanla,"Good suggestion. Yeah, I will look at it. Not used one yet."
ForeverWintr,I think the `\` here is unnecessary.
nekobon,"Does this happen? If so, do we need to worry about potential value change? (e.g. str -> float -> str, such as ""1"" -> 1.0 -> ""1.0"")"
nekobon,:+1: 
nekobon,`~ped.isna()` operation is called every time `_get_tall_measure` is called. How about to put it in the cached `_period_ending_date_tall`?
nekobon,"This is a good idea, but it seems like we also need the reader class itself just in case. Otherwise any instance with the same `fp` would resolve to the same cache.  Also, please comment on the reader class that `fp` is the only key used for caching. Or to be more self-documenting, add a method `get_hash` to the reader which returns `(self.__class__, self.fp)` and use it here."
nekobon,:+1: 
nekobon,Please also remove `get_raw_data` from these two classes
chaburkland,"This does happen, especially as it relates to dates. There are times where pandas will downcast to either object types, or nanosecond date types, and so this ensure the original sf dtype is preserved after the pviot."
chaburkland,"Yeah I just now see that. It probably makes sense to rename the property to `_valid_ped_screen`, or something along those lines."
chaburkland,"Good point. I like the second option better, so I'll add `get_hash` method to the readers."
chaburkland,It seems then like the convention is that `get_raw_data` will only go on classes that apply some form of cleaning or logic to the static data once it's retrieved?
nekobon,"Since pandas behavior is relatively unpredictable, how about to add a quick check on one of the values, for example, to check the first value in the series and the corresponding one in the original frame are the same?"
nekobon,"Yes, `get_raw_data` does not exist on the data that does not have ""raw"" (= as in the database) data. For example, GEIU reader doesn't have one"
chaburkland,"Are you referring to a property-like test? In seems to be out of place in the  context of production code  I could be wrong, but it seems like the only real concern here is what pandas might do with dtypes, not values. I would think it's highly unlikely that pivotting will change values, and I'm not sure that a one-element spot check will guard against that, if it were to ever happen."
gdevanla,I have already updated the database to remove this constraint. We will watch the test run on the stage server and then I will set the data_date to None.
ForeverWintr,"I realize you didn't change the lambda here, but why not `targets['tgt_model_created_time'].values[0].date()`? Then you don't do a bunch of date conversions that never get used."
ForeverWintr,Why not use `pd.to_datetime` here?
ForeverWintr,"Can't you use `pd.to_datetime` here? If you expect missing data to be `None` instead of `NaT`, I think you can do a fillna.  ```python a = pd.Series(['2020-01-01', None, np.nan]) pd.to_datetime(a) 0   2020-01-01 1          NaT 2          NaT dtype: datetime64[ns] ```"
ForeverWintr,"Is there a benefit to `loc` here, over `df[col] = col_type.convert(df[col])`?"
ForeverWintr,"I think an improvement we could make here is, instead of having `col_types` attached to each class, have `col_converters`, which maps name to converter function. That way we could just call each function with the applicable column, and we wouldn't have to branch on type/subclass as we currently do in this loop. "
ForeverWintr,Do you intend to leave this here?
ForeverWintr,"This is the same as `_load_user_test` above, isn't it? Can we just define the function at module level and reuse it?"
gdevanla,Thanks. Will do.
vhquang,"Is there a list of previous delivery schedule that I can pull to check? (ex: 202003, 202006, 202009)"
nekobon,It's better to use the get_delivered_by_product with explicit `yearmo_label` with a quarter-ago yearmo from current year mo.
vhquang,I agree. Do you know if we already did that else where in RAPC? If not I can implement a helper function to do so.
nekobon,Should this be removed?
nekobon,:+1: 
nekobon,"I remember Ted requested to insert one row, with key = 'target_ci_source' and value = one of {'target_ci_universe', 'target_ci_reduction'}, but I think your way is better."
nekobon,I don't think these TODOs are needed
nekobon,We can remove this for production date parameter instead of changing to December build manually (will inherit `psu_distribution = psu_util.get_psu_ref_dist`)
nekobon,We usually put this in the date parameter for dates not for production
nekobon,"These TODOs look unnecessary, too"
vhquang,"This keeps going in and out, as I need to make study build. Do you think I should have this in date_parameter to make it easier for doing study build? I will remove this from the PR for now, to avoid forgetting to do that before merge."
vhquang,"In the summary, it will show up as: ``` target_ci_universe   xxxx.xx target_ci_reduction  yyyyy.yy target_ci              xxxxx.xx ``` Yea, I hope it is clearer to Ted that way, as he can see which one is actually lower."
vhquang,"Yea, it is a note for me while I learn about the spec. I was under the impression the date needs to be precise. Let me remove them."
nekobon,I don't think it is worth being a parameter since it should never change. It is good that you already put it in summary file.
vhquang,"Ha, thanks for spotting that. I ended up not using study RMS for RMC study build. I will remove those RMS study params."
vhquang,That's a good point. Is there anything you think I should address? Can I go ahead and merge this change?
vhquang,"I think it would be clearer to label `invigilator_card.note` to variable like `full_name`, mainly because I don't know what kind of content is in the note."
vhquang,"Would it be better to add type for your event, given that you already defined the type?"
vhquang,"I think this action may be better in its own class, than mix in with other event Actions (ie: assigned, closed, submitted). It is clearer for me to expect which kind of value `event['schedule']` can be, as well."
gdevanla,"Do you want the data_date do be GEU_DATE? If that is the case, then   `VAR_DATE_DATE := VAR_RUN_DATE - 3 DB`    "
ForeverWintr,"This should be updated too, I think?"
ForeverWintr,Why do we need this?
ForeverWintr,Do we always want debug to be true?
ForeverWintr,```suggestion         # These checks here are to make sure a given process only uses either the PROD database or during test a combination of STAGE and TEST databases. ```
ForeverWintr,"We don't want to inherit from this anymore, right?"
ForeverWintr,"We need to remember to remove this when the above todo (in `_load_old_aaf_data_source`) is done, right?"
ForeverWintr,"Changing the input params like this seems like the sort of thing I would find confusing down the road. Is this another step to defer updating the tests? Also, is the typehint wrong? You can't pop/update a namedtuple like is happening here."
ForeverWintr,It seems to me we have to do a lot of type checking to avoid updating the tests with this change. Is the cost of additional complexity here worth it? 
gdevanla,Yes. Good catch. I overlooked that while resolving the merge.
gdevanla,No. this is not just for the tests. This is how we save that information regarding the connection spec to the file. We read the value and get a handle to the class while we load data from the snapshot.  This is a necessary step for serializing and de-serializing the snapshot.
gdevanla,"Agreed. I went back and forth on this.  It is a trade-off we make in switching to connection_spec for this release.  We will have to fix/update these tests outside this release. When I let the tests fail I identified around 15+ tests that needed updates to different snapshots. I expect that to take 2/3 days.  My plan was to work on it next week. But, I wanted to get these changes out for deployment."
ForeverWintr,"Ah! Sorry, I misunderstood the function signature! I understand now. For typing purposes it might be clearer to have the dict version of `input_params` named differently, since `input_params` is typehinted as `ApprovedDataInputParams`"
gdevanla,This is useful to capture sql queries we use in our logs that get emailed to us.
gdevanla,Why not add this as a type-hint?
gdevanla,"spec says, this should be set to 0. Is setting to np.nan OK?"
gdevanla,"I assume the return values of  `self.m.book` , `self.m.sales`, `self.m.assets`, all return an index based on `score_input.main_screen`.  Is that correct?"
flexatone,"Because its a function node I assumed that that that hint would not work, but it would be more clear."
flexatone,Correct!
flexatone,Good find. I will raise the issue on the Redmine ticket. http://irv-sc101/redmine/issues/7606#note-10
johnjhawk,"The tech doc shows that the ratio be floored at zero.  Oh wait, I think that is not needed since the numerator and denominator of the ratio already removing neg values. "
flexatone,"Yes, I think you are right."
johnjhawk,Will we change this (and the others) to irafi in a new *_2021 spec directory? 
johnjhawk,I like this approach :)
nekobon,Oh! This is not needed here. I put in `ra_multi_2020`. We will put IRafi in `ra_multi_2021`
gdevanla,This will be addressed here. https://github.com/ResearchAffiliates/invsys/issues/387
gdevanla,Legacy. Will be fixed with https://github.com/ResearchAffiliates/invsys/issues/387
flexatone,"I cannot tell where `unique` is coming from here, but probably better to use the method on the `Series` which returns an array: `tall[SDKFields.DATA_DATE].unique()`."
ForeverWintr,"The set of IDs returned here isn't the same as all IDs in `targets_aaf`, and I'm not sure why. Do you have any idea @gdevanla?"
gdevanla,Should we call it Approval Time?
gdevanla,Should we call this `Future deltas`. We already use that term for non-approved deltas.
gdevanla,Should we call this `Future deltas`. We already use that term for non-approved deltas.
gdevanla,"This looks correct to me in terms of what the query returns. If you referring to the target_ids = 6,8,10,12,14,15,16, then that is because the `parent_id` is not getting set correctly for these set of targets. I will have to fix that is the fixture setup. "
gdevanla,"Should we remove that `session` added to `db._GLOBAL_SESSIONS` in the finally block. That way, the test cleans up after itself."
gdevanla,Um..why do we call this method `add_delta`. We are not adding any `deltas` are we? Is it because the `_make_target_and_funds` adds a `delta`?  
gdevanla,"Overall, I like this use of fixtures. Need to see how I can re-use them without trampling over other tests."
gdevanla,"I know I did not have this in the original query I shared with you.    If you have the `effective_start_date` with you, then you could also pass that value and check for the equality of those values. It just gives us another level of guarantee. It is not required, but something to consider for extra guarantees."
gdevanla,We need  `>=` here.  That is how I have coded the restrictions in other places. I am assuming the `result` returned by this function determines what we see in the cancellation page.
gdevanla,"Wonder, why you made this generic.  Will the following be simpler or is there a reason we need this looping here?  ``` result =  summary.apply(lambda y: f""{y['target_id']}|{y['target_delta_id']}"", axis=1)      ```"
gdevanla,"If I remember this correctly, Jim wanted us to call this 'Cancel'.  "
gdevanla,"Question: So, did you run some kind of a js formatter on this code?"
ForeverWintr,Good point! Thanks
ForeverWintr,Sure. I'll change the names
ForeverWintr,"That would be equivalent to checking that the start date you get back is the same one as you expect, right? I prefer to leave that assertion up to the caller. Making `effective_start_date` required in the signature of this method would imply that you need it to select a record, when really you don't (if I understand correctly!)"
ForeverWintr,"If the effective date == today, wouldn't the delta no longer be 'future'?"
ForeverWintr,"Ah, this was generic because I was initially including more columns in the key. I left it because I wasn't sure the two I'm using would be sufficient. I think I can remove it now. "
ForeverWintr,"I shied away from 'cancel' because I didn't want to have a confirmation box with `confirm cancel` and `cancel cancel` buttons. Introducing 'delete' seemed easier. However, I'm sure there's a way to make `cancel` unambiguous if it's important to Jim. I suggest we show them this version, and include changing the name of the button with other changes they may request. "
ForeverWintr,"Hmm. I opened it in vscode, and apparently there's some sort of auto formatter enabled. The space between `function` and `(` is strange. I can undo it if desired. "
gdevanla,I don't have any preference given that I don't know what is the best formatting myself :)
gdevanla,"We need to consider it to be the future. Since, we might want to recreate delta's on the same date and we cannot do that without canceling that day's delta."
gdevanla,Sounds good.
ForeverWintr,I see. Thanks!
gdevanla,Were you going to remove this?
ForeverWintr,Woops
chaburkland,I couldn't ever figure out how to properly type-hint this. Looks like disabling was the way to go.
chaburkland,Should this just be deleted instead of commented out?
chaburkland,"This should probably be more specific. The source of `get_rate` is also raising a bare Exception. I'm wondering if it should be a `NotImplementedError`, based off of the comment in the function source."
chaburkland,Perhaps just delete?
chaburkland,I think this should probably update the typehint of the function's return type instead of disabling.
chaburkland,:+1: 
chaburkland,Delete?
flexatone,"I am not sure if that will fix the issue, but I can try!"
flexatone,This might be fixed with a new version of pylint...
flexatone,agreed!
flexatone,"This whole thing should be deprecated in the future, so I am going to leave it as is for now."
flexatone,agreed!
flexatone,that worked! pylint is better than I thought...
brandtbucher,```suggestion         raise RuntimeError(f'The following requested columns do not exist in {table!r}: {missing!r}') ```
brandtbucher,"Why the tuple copy?  In fact, the way you're using this below, this whole function could probably just be a generator that just yields these on line 87."
brandtbucher,"```suggestion     ) -> tp.Tuple[recipe_objects.FrameRecipe, ...]: ```"
brandtbucher,"Just curious, any reason you prefer returning a generator expression to just yielding from inside of a loop? I personally find this much more readable (I think it's probably nicer for debugging too):  ```suggestion     for k, v in label_to_val.items():         yield recipe_objects.Constant(value=v, label=k) ```  But they're basically equivalent, so I don't care all that much."
brandtbucher,"Why is this a dictionary? A list of two-tuples would work, right? Then you don't need the `items()` call in the loop below."
ForeverWintr,"Haha, I guess I just like dictionaries. I agree tuples are sufficient here. "
ForeverWintr,"This came about because I was initially returning a list (which I find makes debugging easier), and converted it to a generator later. I agree yielding is a bit more debuggable than returning a generator though."
ForeverWintr,"To adhere to my typehint. When I construct a collection of items like this, I like to make it immutable once it's done construction.   You're right that this could be a generator, but in this case I prefer to construct a tuple that can be inspected later/used multiple times. The overhead from these objects is negligible, so I don't think there's a big benefit to making this a generator. "
ForeverWintr,"I habitually attach potentially large objects like this instead of formatting them into a string so that handlers of the exception can access the object, e.g., to choose to display it differently."
gettodaze,Does this then mean that the yml file: ``` on:   issues:     types:       - assigned       - closed       - labeled       - opened       - reopened       - unassigned       - unlabeled   pull_request_review:     types:       - submitted   pull_request_target:     types:       - assigned       - closed       - labeled       - opened       - ready_for_review       - reopened       - review_request_removed       - review_requested       - unassigned       - unlabeled ``` should also have these actions removed?
gettodaze,"I think this is good, but maybe it would be nice to return `CONSTANT`s instead of strings/fstrings?"
gettodaze,"This is maybe more for my benefit of knowing how the script gets run, but are `active, backlog, other` expected to change in value between calls of `find_card`?"
gettodaze,"Again, this is more for my personal knowledge (and you probably talked about it during your CR), but where do these environment vars come from? My guess is that the script gets instantiated and run separately for each github event, and the event names and path are stored in the environment variables? Then the file in the path contains the JSON data for the event itself, which gets read and processed in `main` with the `EVENT_HANDLER`?"
brandtbucher,"No, it's just that the new code doesn't need these constants anymore. I think I might just leave them though - they're not hurting anything, and they may come in handy in the future,"
brandtbucher,Good idea!
brandtbucher,Nope. Which suggests that it's probably clearer to just do this at module level.
ForeverWintr,"This creates a new `Border` object for each cell, correct? Doesn't that lead to unnecessarily large file sizes? I think this only applies to the few cells at the top of the report, but maybe you should create a module level `Border` object and reference it here.   "
gdevanla,Good point. I forgot about it. Ill fix that.
gettodaze,"Ah, that's what I suspected."
ForeverWintr,10 points for removing an `import *` :ok_hand: 
ForeverWintr,"I'm happy to see these `from itertools import *` lines removed too. Did you verify that none of these tests depend on them? I know we have AATC test failures on default, so it could be easy to miss itertools related ones in an agent Q run."
ForeverWintr,"Now that these are `enum`s, you can use identity testing: ` if lme_source is LMESource.BB`"
ForeverWintr,I'm really happy to see this removed!
ForeverWintr,Why make only the last argument kwarg only?
ForeverWintr,Wow. Thanks for doing this.
ForeverWintr,Is this still needed?
ForeverWintr,Can this be removed?
ForeverWintr,Were these imports coming into the namespace as a result of `from RALib.core.function_node_pa import *`?
ForeverWintr,This `.. note::` just renders as plain text in github's rst viewer. Does it work when this is rendered in sphynx?
ForeverWintr,"```suggestion Lucky for us, the ``pipe_node`` and ``pipe_node_factory`` methods can be optionally given desired kwargs we want to positionally bind in the actual function signature. ```  It looks like these are given as positional args, not as a list."
ForeverWintr,Do you still want this here?
ForeverWintr,Nice write up! 
ForeverWintr,"Why declare this class inside the function, instead of at module level? Defining it here will make type inspection/hinting difficult, as no one will be able to reference it directly. "
ForeverWintr,Do you expect this to ever fail? if so a message explaining why it's here would be nice. 
ForeverWintr,Why do you need the inner `_store` and `_recall` functions?
chaburkland,"I'm pretty sure I verified this. I removed most `import *` before the AATC failures on default, so I remember getting green runs back after removing these. I'll double check though."
chaburkland,Just verified :sunglasses: 
chaburkland,"This is because in all the places this was used, only one constructor used this argument, so it made more sense to me to make the arguments positional (every `FreeFloat` subclass instance used them), and make this a default kwarg only.  See `poly_universe_gen.py:299`."
chaburkland,I'm not sure what you mean. This was added in this PR. It's possible there was a code review comment I forgot about though :grimacing: Can you remind me what was said?
chaburkland,Good point.
chaburkland,Yes!
chaburkland,"Yeah, when using `doc_build.py` it renders properly. I should probably not include these rsts in this PR though, since they are still pretty incomplete, and the newly created fpn folder was only for fast iteration on rst changes. The goal is to have this end up in the ISManual."
chaburkland,"The reason is because RALib/core/function_pipe.py partials all of the decorators to use a specialized `core_decorator`. `store`, `recall`, and `call` are already defined as pipe nodes, which means that you can't specify a `core_decorator` anymore. I wanted to put the core logic in non-pipe node methods so that they could be redefined, without having to rewrite the core code. Hopefully that makes sense.  It doesn't seem to be worth all the trouble, so it's probably worth figuring out a better way to do this."
chaburkland,I'll remove these docs from this PR. I was still iterating on them but forgot. Ideally this should be on a different branch.
chaburkland,"The reason was because `key_positions` and `core_handler` are needed, so it made sense initially to define it so it has access to them in the closure, instead of building a ""heavier"" init.  I also wasn't wanting the class to be public, but I don't have a great reason for that other than not wanting to change or add to the public api very much. It probably makes sense to define it at the module level."
chaburkland,"I can't prove this (haha), but I'm nearly positive the only place that `expression_f` gets called is when the pipeline is created, and it is only ever called with `**kwargs` (namely `fpn.PREDECESSOR_PN`). This was a bit of risky assert that I wanted to leave in case in fails, in which case I'll need to update my understanding of what's happening.  I feel decently confident, as nowhere in any of our production code, or all the newly added unit tests, has this ever been untrue.  Regardless though, it's a good point: I should add a failure message."
ForeverWintr,"Your logic for making the first two positional makes sense, but the `restrictions_filename` could be positional too, right? "
ForeverWintr,"I don't mean to imply that it *should* be positional, but I don't yet understand the reason for making it kwarg only."
ForeverWintr,"Last night it looked like an empty inner class, but today with fresh eyes I see you're adding attributes to it in init, and I remember discussing it in code review.   I don't remember if it came up at code review, but did you consider using `types.SimpleNamespace` for this?  ```python import types agg = types.SimpleNamespace() agg.havg = 5 agg # namespace(havg=5) ```"
ForeverWintr,"I prefer to have classes defined at module level unless there's a very compelling reason not to.   Another thing to note is that by doing it this way you create a new class called `PipeNodeDescriptor` every time this is called. That means descriptors created by different calls to this function will have different types, which could be confusing.  "
ForeverWintr,"I don't totally follow (probably because of lack of function pipe knowledge), but I think this is ok. Maybe just add a comment to the effect of what you wrote above?"
chaburkland,"I think that since it's so uncommon (out of dozens of places, it's used only once), it seems better to force the user to be explicit about what the third argument to the constructor is. When I see optional kwarg-only arguments, I usually interpret that to mean ""This is likely uncommon"". Agreed it is ultimately not necessary, but I think it definitely improves readability."
chaburkland,"That's a good idea, but the more I look at, the more I like having an explicit `Factors.Aggregators` class. I think I'll just subclass it as `types.SimpleNamespace` to be even more clear."
gdevanla,"We should not need drop duplicates here. If we got back more than one record, that we should just fail, I think."
ForeverWintr,"Hmm. I end up with duplicates here. I thought it was because the targets table is fund level, and I'm aggregating to fund_of_funds. Maybe I'm misusing the test fixtures though. Here's what it looks like in my test before dropping duplicates.  <table border=""1"" class=""dataframe"">   <thead>     <tr style=""text-align: right;"">       <th></th>       <th>target_id</th>       <th>target_delta_id</th>       <th>fof_account_num</th>       <th>fof_name</th>       <th>data_dt</th>       <th>effective_start_date</th>       <th>created_time</th>       <th>created_by</th>       <th>canceled_time</th>       <th>canceled_by</th>     </tr>   </thead>   <tbody>     <tr>       <th>0</th>       <td>43</td>       <td>1</td>       <td>736</td>       <td>AAF</td>       <td>2020-11-06</td>       <td>2020-11-16</td>       <td>2020-11-06</td>       <td>test</td>       <td>None</td>       <td>None</td>     </tr>     <tr>       <th>1</th>       <td>43</td>       <td>1</td>       <td>736</td>       <td>AAF</td>       <td>2020-11-06</td>       <td>2020-11-16</td>       <td>2020-11-06</td>       <td>test</td>       <td>None</td>       <td>None</td>     </tr>     <tr>       <th>2</th>       <td>43</td>       <td>1</td>       <td>736</td>       <td>AAF</td>       <td>2020-11-06</td>       <td>2020-11-16</td>       <td>2020-11-06</td>       <td>test</td>       <td>None</td>       <td>None</td>     </tr>     <tr>       <th>3</th>       <td>43</td>       <td>1</td>       <td>736</td>       <td>AAF</td>       <td>2020-11-06</td>       <td>2020-11-16</td>       <td>2020-11-06</td>       <td>test</td>       <td>None</td>       <td>None</td>     </tr>   </tbody> </table>"
gdevanla,"I see. I think you need to get rid of the join to the funds table. You are not using any data from the funds table. Once you get rid of the join, you should get only one record per fof.   Sorry, I overlooked that query earlier. "
flexatone,"I think `n` here properly starts at 1, and thus supporting zero or negative is not necessary."
flexatone,"space after comma: `year, mo`"
flexatone,I think you want to use `mo` in your f-string.
flexatone,"If this just raises on error and returns `None`, better to not assign to `_` and just call the function."
flexatone,"When you look at how this being used in our code, it seems that the argument is always being given with a negative number, so I do not think we need to scale by `-1` here. Instead, lets perhaps raise if `offset > 0`."
flexatone,"For our PARC web-app, we use months as labels, given in all caps."
flexatone,"As originally implemented, we are only looking at time, not date, so lets revert to the previous constraint unless we hear otherwise. "
flexatone,"I think the typehint is wrong, but I am not sure... try to find examples of usage."
flexatone,No problem putting this here.
flexatone,"Remember space between arguments to functions: `date_util.bd_after(2020, 12, 32)`"
flexatone,"You could use a generator expression here for something a bit more concise: ```python expect = (datetime.datetime(2020, 1, n) for n in range(1, 10)) ```"
gettodaze,fixed
gettodaze,fixed
gettodaze,"Ahh I see! I was mirroring `_check_date_fields` in `datetime` and was returning the same input value, but I do feel better just returning `None`."
gettodaze,Oh I see! So `bd_after` and `bd_before` are supposed to be exact copies of each other?
gettodaze,"The previous implementation gives ```     if ((current_time.hour, current_time.minute) < min_time  or TypeError: '<' not supported between instances of 'tuple' and 'datetime.datetime' ``` and would not capture the case around 23:59 - 00:00 and doesn't give resolution to seconds/microseconds leading to some false positives. Should the `min_time` and `max_time` args instead be `Tuple[int, int]` `(hour, minute)` pairs to clarify the function behavior?"
gettodaze,changed
gettodaze,"Ah, I found it. It's supposed to be `Union[int, str]`"
gettodaze,Never mind; I see. I'll raise an error is `bd_after` if `offset < 0` and in `be_before` if `offset > 0`
flexatone,You can probably remove this sketch now.
flexatone,"As we talked about, lets break this up into a few groups. We do not need one test per function, but the groups you have as comments, i.e., `#add`, might be a nice way to partition this."
gettodaze,removed
nekobon,The return type might be different here
nekobon,:+1: 
gettodaze,"Oh, right! Thanks! I had originally been returning the `year_mo` and I switched it to return `None`."
ForeverWintr,"We can probably remove this, right?"
ForeverWintr,Did you make this change? This looks like an old version before we realized that your username has spaces in ldap. I don't think we should be stripping here. 
ForeverWintr,We can remove this too I think. 
gdevanla,"Yeah, I made this change to make me go forward.  I am removing it now. But, I need to check why my name shows up sometime with 100 characters and sometimes with 50 characters :("
ForeverWintr,strange!
flexatone,"Maybe: `new_cols = sf.Index(convert(c) for c in columns)`  or, you could do `columns.iter_label().apply(convert)`"
flexatone,"I think this is returning a new sf.Index. We might update the function name to reflect this, or at least provide at type hint."
flexatone,"You could just convert these to dt64 right here, so as to avoid the `astype` below, i.e.: `return np.datetime64(f'{s[:4]}-{s[4:6]}-{s[6:]}')`"
ForeverWintr,Even concise-er:  ```suggestion - [ ] The `default` branch as been merged into this branch just before merging. ```  
ForeverWintr,I suppose we can assume people know to run on the head of the branch.   ```suggestion - [ ] All tests pass for applicable TLTs on this branch. Run TLT tests asynchronously: ```
gettodaze,Usage of the ``function_pipe`` module is used
gettodaze,"maybe:  The first node is special. In the context of the pipeline it lives in, there are no PNs preceding it, hence ``predecessor_pn`` and ``predecessor_return`` are not passed in! "
gettodaze,"""printing the repr of ``expr``"" is a little confusing to read fast, but I think it's fine."
gettodaze,exlusive -> exclusive
gettodaze,"Using the previous example, it would... -> The previous example would..."
gettodaze,"This goes elsewhere too, but I really like how this is written with summaries, warnings, examples etc."
gettodaze,Could we rename: `pn_a` -> `pn_12345` `pn_b` -> `pn_double` `pni` -> `pni_99`
gettodaze,maybe `pni` -> `pni_99`
gettodaze,"I think this expr needs to be surrounded with `()`, right?"
chaburkland,:)
gettodaze,"What is `lookup_function`? Do you mean ""a ``lookup_function`` is __a__ callable with the following signature""? Maybe should it go in the definitions above?"
chaburkland,I'll touch it up a little bit
gettodaze,"Maybe replace with a simple sentence:  The first PN in a pipeline must always be a `measure`, optionally followed by any number of `pre_aggregation_sp` PNs, then by a required `measure_aggregator`, then optionally by any number of `sp` PNs. "
gettodaze,"I think this is really the same section, right? Still about ""Measures, Measure Aggregators, and Series Processors"""
gettodaze,"Maybe replace the title with a simple sentence saying something like"" ""These PN types are defined as:"". And maybe this section can go before the text summary of the RAPC pipeline specification. "
gettodaze,I think this section should go after the first section where they are defined
gettodaze,"I think this section is only related to RAPC usage because the multi pn processors are in `score.py` right? It feels like it might belong better abstracted from score.py and put in the tutorial section. Then in `Modules`, the `scores.py` section can be updated to say it also contains Multi PN Processors?"
gettodaze,"Maybe emphasize in the title that it is a usage example. ""Example: Analyzing GRafiFactors"""
gettodaze, ``Factors`` subclasses ->  any ``Factors`` subclass
gettodaze,Oh I really like this layout!
gettodaze,"caps the ratio at 1 : this means taking the `min(ratio, 1)`, right?"
gettodaze,Do these pipelines need to be in `()` too?
gettodaze,Could these comments be put into the main code block? I think that way I don't have to wonder as the reader if I am still reading from the `GRafiFactors` `init` or something else. And also `()` around the PNs right?
gettodaze,Same with the `# method is defined in the base class as:` comments below.
chaburkland,"It actually doesn't, but I should probably be consistent."
chaburkland,"Yeah. I meant that a `lookup_function` is a callable. Basically, the PN will return a function, not a value.  What do you mean by ""definitions above""?"
chaburkland,This is a great suggestion.
chaburkland,"I'm going to rework this section quite a lot, so I think this comment will be a bit moot."
chaburkland,I'm not sure what you mean...
chaburkland,"Hmm. I thought this was addressed in the tutorial in the `Broadcasting` section. It was brief, but it highlighted that PN factories will evaluate PNs when they are given as args/kwargs.  You're probably right though in that it's better to move this to the `Modules` section."
chaburkland,"Yeah, that would be another way to put it haha. I don't think `min` is implemented as an operation on PipeNodes, nor as a `series_processor`, so this is way we acheive that."
chaburkland,"They actually don't. I generally like wrapping pipelines in parentheses, but it's not required. "
chaburkland,Yeah I'll try that to see how it looks.
gettodaze,PNS -> PNs
ForeverWintr,"```suggestion Obviously, this approach is not very pretty, and it's quite a lot to type for the privilege of evaluation. Thus, the ``__getitem__`` syntactical sugar was introduced to make it so the user isn't required to unpack a single kwarg whenever they want to evaluate a pipeline. ```"
gettodaze,"I think it's fine. I was just thinking to put the naming conventions for measures, measure aggregators, etc in section `5.2.2` where you define them, but I think this is fine too."
gettodaze,"I was thinking the definitions for measure, pre-aggregation SPs, etc. But in retrospect, its good to separate the definition for `lookup_function` from those because `lookup_function`s are not `PN`s."
gettodaze,"Right, it is addressed in the `Broadcasting` section."
gettodaze,"Oh, whoops! Then forgive my misunderstanding; I wrote so many comments about this."
brandtbucher,"I noticed you suffixed your constants above with `_PRE_202010`. But this as-of-date is also ""pre 202010"" as well. Should we be more specific with the actual date it changes?"
brandtbucher,```suggestion     def test_crsp_permno_to_date_pre_202010(self): ```
brandtbucher,It `COLUMNS_PRE_202010` needed?
nekobon,I didn't know you can submit suggestion like that! 
nekobon,"Ah, maybe not, because the reader doesn't use it. I'll remove it!"
nekobon,"This was not intentional. After I update the code to apply from 202010, I decided to back-fill 9/30 for testing. I'll change pre_202010 to 202009."
johnjhawk,"so before, nans in sales would not propagate, and now they do?"
johnjhawk,"Should we be comparing 0. (float) instead of 0 (int)  ie b[b < 0.]  s is always going to be a float? same with a, b and ratio."
johnjhawk,"if all sales_adj are nan in the mean calc, we DONT propagate the nan? should we let the caller of this function decide whether to propagate nans or not?  in this case, in the Rafi2021Factors, the d_sales function could na_to(0)."
flexatone,"Yes, this is as defined in the tech doc, and there, that nan goes to zero, is part of the definition of delevered sales. So for now at least, I think it is best here. "
flexatone,"I have never had that problem before, but this is Pandas, so it is worth being defensive!"
flexatone,Correct. See the email thread for more context.
johnjhawk,"oh, I see. If delevered sales always goes to zero in the tech doc then that makes sense. Thanks."
chaburkland,"Similar comment to the one above:  `assert not (log['mean'] < 0).any(), 'Adjusted sales should be floored at 0.'`"
chaburkland,"It's possible this is unnecessary, but I wonder if an assert here would be nice to align the code even more closely with the tech doc. Something like:  `assert not (ba_ratio < 0).any(), 'Ratio should be floored at 0.'`"
chaburkland,"The reason I ask, is because the tech doc explicitly floors the ratio (and mean) at 0, although I can see how that would naturally happen given the other steps.  I think the assert is a good way to indicate to the reader, ""Yeah, we known the tech doc says to floor at 0, and we can prove that happens naturally."" without forcing them to infer it themselves or double-take the tech doc to see if a mistake was made."
flexatone,But `ba_ratio` cannot be less than zero as `b` and `a` have been treated to always be positive.
flexatone,"Not sure this is necessary either, again due to upstream treatment."
chaburkland,"I get that it's not necessary, it just took me a second when comparing this code to the tech doc to reason out why the code didn't floor at 0, but the tech doc did. I think either the tech doc should be updated to remove the 0 (i.e. force everyone to realize it must be positive due to math), or the code should be updated to align with the tech doc. I think an assert does this nicely.  I guess in summary, I don't think an assert will hurt anything, and for me, it makes the translation between code & tech doc a little easier."
flexatone,"Just because the tech doc is redundant does not mean that we should also be redundant in our code. I understand that it takes some effort to translate, but the goals of the code and tech doc are different. So for now I am going to leave out the assert."
flexatone,"Here, I think the tech doc should be updated as you suggest. More lines of code hurts us!"
gettodaze,"What's the purpose of `debug_mode` (here and elsewhere)? I would normally expect debug_mode to be handled by something like `logging`, but I'm not sure what the convention is in IS. Or in this case, even just having `months` be a kwarg with a default of -24."
nekobon,"Great, thank you!"
gdevanla,"@gettodaze We usually pass around the `debug_mode`, so that our applications can make decisions like, where/whom to send the email too, which databases to connect to etc. Its like a global variable passed around for testing/staging our application."
flexatone,This is `tp.Optional[str]` if your default is `None`
gettodaze,"Ah, I see! Thanks for the info :)"
flexatone,"no space before the comma in `str ,`"
flexatone,"You do not need `keys()` here, instead, just say `if connection not in inventory.ISDBConnectionSpecMap`"
flexatone,"maybe look at the `len` of the `Frame`; if the `Frame` is empty, this will raise."
flexatone,Here and elsewhere: use snake case: `sql_table_exist`
flexatone,"Also, try not to combine words: use `column_names`, or just `columns`"
flexatone,`all_columns`
flexatone,"What are you trying to do here? I am sure you do not need to do `T` on the entire table, which could be very expensive."
kocharR,"Basically, I ran a query on system table where the table = 'shiller'. it gives me static frame with  all column names  ( columns are in rows) and then I transpose it to a list. Now when the user calls the function with the list of column names, those subset of columns needs to be in the rows list. if not, then user provided a wrong table name. SF has just one column and I am transposing just one column. I hope that makes sense."
kocharR,Sure. This query will always return a row. true or false. so the frame  will ever be empty but I can still check the length 
flexatone,"do you just want to check if all values in `columnnames` are in the first row of the `Frame`? I would do something like this, which will be much more efficient.  ```python row = frozenset(allcolumns.iloc[0].values) result = all(e in row for e in columnnames) ```"
kocharR,"A slight modification row = frozenset(all_columns.iloc[0:len(all_columns),0].values) because row = frozenset(allcolumns.iloc[0].values) gave me the first element. "
flexatone,Provide a comment on why we did this! I think it was to get the Pandas xls reading to work.
flexatone,"note that `all_columns.iloc[0:len(all_columns), 0]` is equivalent to `all_columns.iloc[:, 0]`, which simply means select the first column. If you do not do the `T` (which you do not need and should avoid), you can select the first row, as I suggested, with `iloc[0]`."
flexatone,"I think this should be tuple of `str`, not  an `str` with a semicolon."
flexatone,Please remove these `ipdb` comments.
flexatone,"The flag here turns on sending email, so the `help` should probably just be something like ""Send notification email."""
flexatone,You do not need the outer parenthesis here; it can just be `choices=inventory.ISDBConnectionSpecMap.keys()`
flexatone,Please remove these sections if we are no longer taking this approach.
flexatone,We probably should not download from the actual server as part of a test: this could be run many times a day.
kocharR,"Just to clarify , adding a boolean ""false"" means I need to modify _download function. should I just get rid of line ShillerData._download(out_file)? "
flexatone,What does the function do if the first argument is `False`?
kocharR,"_download doesn't take any bool argument. It takes the temp path where the file is downloaded and then a call to upload_to_static function delete the files.  Here is the definition of  def _download(cls, out_file: str)-> sf.Frame:"
flexatone,My point here is that running this tests hits Shiller's server; we do not want to do that as part of our tests. so perhaps we should just remove this test. I don't think you need to change the function.
kocharR,Sure. Sorry about the confusion.
gdevanla,Can you add a type for as_of_date.
gdevanla,I am open to a more explicit name like `airflow_with_sandbox`. But. `all` felt right because it includes all related airflow executions.
ForeverWintr,We need a PR hook to check for this!
ForeverWintr,"Building `delivered_geu_dates` will be very slow, because it involves reanimating every spec in the psur history (and downloading each psur).  I think it's best to short circuit here, and as far as I know geu dates will always be in order. Something like:  ```python # Generates geu dates, starting from the most recent. reversed_geu_dates = (datetime.datetime.strptime(i.geu, '%Y%m%d').date() for i in reversed(spec_hist)) for geu_date in reversed_geu_dates:     if latest_geu == geu_date:         return True     if latest_geu > geu_date:         return False return False ```"
gdevanla,"I see. ~So, is spec_hist lazy?~  Sorry, I take it back. I am guessing, you are suggesting saving time on converting the date from strings?"
ForeverWintr,"Spec hist is lazy, yes. Accessing a new index in the history creates a new live spec for that index.  "
johnjhawk,But it shouldn't be changed to None until after PR is reviewed?
johnjhawk,Short circuiting here is a great suggestion. I'll make the change.
johnjhawk,Is there a way to request the reverse order for the history. I think that it goes from oldest to newest. Most of the time (for this application at least) we are more interested in the more recent builds.
gdevanla,"But, reversed cannot work on a generator object, right?  Is the laziness handled in the __getitem__ calls? Plus, wouldn't `reversed` has to exhaust the list? (Unless, you  have the __len__ already computed somehow)"
ForeverWintr,I think it should be changed before it's merged (otherwise code won't be importable on default).
johnjhawk,"I agree that is needs to be changed before merge, but not before a PR review.  Are we saying the same thing?"
ForeverWintr,"Yes, the laziness is handled in `__getitem__`, so the histories are lazy, but they aren't generators. We know the length ahead of time (from the imcron calendar) and we can index into any point in the history. We just don't actually do the work of creating the object at that index until it's first accessed.   You can think of it as a list, where every element isn't created until it's accessed. This is also similar to how StaticFrame's `Bus` works.   That means you can get the newest value in constant time by accessing the last element (`spec_hist[-1]`). And you can iterate over it in reverse using `reversed` without animating every element, as I'm doing in my example above.   Reversed doesn't need to exhaust iterables that support the `sequence` protocol. From [the docs](https://docs.python.org/3/library/functions.html#reversed): > reversed(seq) > >    Return a reverse iterator. seq must be an object which has a `__reversed__()` method or supports the sequence protocol (the `__len__()` method and the `__getitem__()` method with integer arguments starting at 0). "
ForeverWintr,"Haha I'm not sure. Right now is *during* a PR review, isn't it? Are you saying we should make it the last change before merging the PR?  I think we should make sure tests pass on this branch too, and I don't think we can do that with `DO_NOT_MERGE` set. "
johnjhawk,"ahh, so we are not saying the same thing.   I think all the tests (agent Q) will pass with this flag set. We are just unable to merge to default; which is desirable.  It's nice to guard against accidental merges while the code is being reviewed, I think. "
johnjhawk,That's clear.  Thanks!  I'll make the change. 
gdevanla,"Great. Thanks for the explanation. I understand this better now.  Yeah, its interesting how `reverse` is able to use `__len__` and walk through from the last element!"
ForeverWintr,You're right. I forgot that tests only fail with the flag if they're run on default!  I agree it's fine to leave this until you're ready to merge then. Ideally a CI action can disable the PR merge button until DO_NOT_MERGE is unset. 
johnjhawk,fyi - I implemented this suggestion and the test run went from ~36 seconds to ~12
flexatone,Just need a space between operators `(holdings_df['SHARES'] < 0)`
gdevanla,Is this TODO still relevant?
gdevanla,"Do we still need 'string' annotations here. Since, we are importing above. I have never used this paradigm, so curious."
gdevanla,"Perhaps, `co.loc[co_id, field]` would be better for performance."
gdevanla,Can you add type hints here?
gdevanla,Can `frame` here can be renamed to a better name?
gdevanla,Does `report_date` here has to be string. Can we force the client to provide a proper date?
gdevanla,"In genreal, are columns created in this function referenced elsewhere or they there purely for logging. If they are referenced elsewhere, it is better we define some symbolic constants for the fields used in this function."
gdevanla,Is this still relevant?
gdevanla,Or this Vendor Fields or Normalized fields. Can we use that in the name to clarify?
gdevanla,Why not use field_norm everywhere. For example instead of using SEDOL or add it to the mapping?
gdevanla,Is this block still relevant?
gdevanla,maybe type hints here?
gdevanla,Does this still need cleanup?
vhquang,This is separated issue. I open an issue to work on it outside of this PR: https://github.com/ResearchAffiliates/invsys/issues/419
vhquang,"Nice catch! Yea, we don't need string quote (future reference) any more since I already import them. I also realize `string` is not the proper Dict key type. It needs to be `util.Constant`.  -edit: It doesn't look like it is going to work for `tp.Dict` without `__future__.annotations`. I wonder why. I will add future annotation."
vhquang,"I also don't like it being string, but it is more convenient, as later I will have to trim it into 6 char year_mo. So, if we use datetime.date, it will need to be convert to string anyway."
vhquang,"This is just anticipate if Chris has time for a quick pair programming, and we can compare the 2 sec_co_map side by side, to see why one has way more match than the other (6000 vs 1000)."
vhquang,"Only `field_ci_evic` and `field_ci_rev` are exposed/stored for the report. Other columns are intermediate columns are used internally for mapping and calculating, and are not expected to be used outside."
vhquang,"hmm, I don't know. It is carried from the old code. I just convert the hardcode string to alias constant."
flexatone,Where / for what are you using annotations?
vhquang,"Techdoc specifies this as million dollar: > The unit of EVIC is million dollar.  http://centcon01-prd-i:5009/Technical+DocumentationModels/rafi_indices/rafi_multi_factor_climate_transition_developed/rafi_multi_factor_climate_transition_developed.html#enterprise-value-including-cash-evic  If we want to change it, I would need to ask Joseph to update the techdoc first. I just don't know what to tell him, beside to keep the Factor result consistent to our convention, which I think is internal to our team."
flexatone,Type hints here are very helpful!
flexatone,"This change is more efficient, but not backward compatible with the old GEU, which is based on `table_dict`, not SF. You could create new ScoreSeries subclass that has this change, or just revert to as it was."
flexatone,Why not just call the spec `spec` instead of `g_spec`?
flexatone,same here: just `spec` instead of `g_spec`?
flexatone,Just a note: the necessity of this class will go away once I merge #434 
flexatone,"Maybe the same, but more common to use `report_frame.to_frame_go()`"
flexatone,Do not use `np.isin` here: better to use ``bb_co_ids.isin``: it will handle some cases that NP will not.
flexatone,Are filling a `Series` of co_ids? That seems odd. And a `Series` named `isin_*` to me suggests this would be a Boolean `Series`: is that the case?
vhquang,"Though I am not 100% sure, ti seems that `tp.Dict` will require future reference, even when the target is already imported."
gdevanla,I think this was needed for forward annotations prior to Python 3.7. They are not required any more. 
gdevanla,I think I got it reversed. It is needed to support the typechecking during edit and suppress it during runtime.  https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING 
vhquang,"Thanks for pointing out the issue with backward compatibility before this get merged. The original change `co[co_id, field]` to `co.loc[co_id, field]` is not just for efficiency, but because SF does not have index selection without `.loc`. I guess I am the first one using `ScoreSeriesInput` with SF.  Normally I would favour subclass, so that we can track usage and deprecate old code when there is no more usage. However, in this case, it depends on the type of `geu`, which I feel tricky to document and to let users know when to use old class vs new class. Plus, I don't imagine we will ever deprecate the old `geu`. So I am incline to make type check, and let it live on with this code. Is that reasonable direction?"
gdevanla,"Oh, I did not realize that. My bad."
vhquang,"Sorry I don't understand this comment. Can you elaborate, or rephrase?"
vhquang,:+1:  I think it is a side-effect while I refactor. Thanks for pointing it out.
vhquang,I am still blur on what the best way to update this once you merge #434. Maybe we can revisit it once it is on `default` and I can play around with it.
vhquang,:+1:  I am totally unaware of that. Thanks for this catch!
flexatone,Thanks of pointing this out; I will send an email to address this.
vhquang,"`isin_evic` means EVIC values for ISIN as oppose to bb_co_evic (EVIC for BB_CO_ID). The two series have different length due to multi ISIN -> companies,  and due to our we don't have all the mapping. They are aligned by row index, and technically ``` frame['CI_EVIC'] = bb_co_evic ``` may have worked. I just want to be explicitly handling series with different length with `iter` and `map_fill`. Maybe I am a bit over defensive.  Anyway, my code above is wrong. Earlier change the `get_evic` return series with BB_CO_ID as index, I forgot to do that with the new `get_evic`, it now uses row index, which will make wrong mapping. I will make fix.  "
vhquang,"That will be the default behaviour in 3.10, so it will not be needed anymore: https://docs.python.org/3.10/whatsnew/3.10.html But untill we are on 3.10..."
flexatone,Got it; thanks.
flexatone,"Yes, if branching by the type if GEIU is something we have ended up doing in a lot of other places."
flexatone,"Yup, no problem."
brandtbucher,I wish I could do this. 😉
brandtbucher,Alphabet:  ```suggestion     INTEREST_EXPENSE_ON_DEBT             = 'interest_expense_on_debt'     INTEREST_EXPENSE_TOTAL_BANK          = 'interest_expense_total_bank' ```
brandtbucher,Alphabet:  ```suggestion     interest_expense_on_debt             = lookup(FundamentalFields.INTEREST_EXPENSE_ON_DEBT)     interest_expense_total_bank          = lookup(FundamentalFields.INTEREST_EXPENSE_TOTAL_BANK) ```
brandtbucher,This is also out of alphabetical order.
brandtbucher,"I'm not sure what this is doing here. What you've written is equivalent to:  ```py     post = expected_fields ^ set(frame.columns)     post ^= added     post ^= removed     post ^= {SDKFields.GVKEY}     assert not post ```  Which is equivalent to:  ```py     assert expected_fields ^ set(frame.columns) ^ added ^ removed == {SDKFields.GVKEY} ```  What this is asserting, exactly?"
chaburkland,"I didn't realize `^` was the operator for `symmetric_difference`! Good to know.  I'm trying to demonstrate that all fields are accounted for. The `^` of expected fields and frame.columns gives me all columns either missing from the frame, or added by the frame. I then remove the expected added & removed fields, and it should leave me with an empty set, implying everything has been properly accounted for."
chaburkland,Maybe `du.year_mo_day_str_to_date(run_date)`?
chaburkland,"I'm not opposed to moving this to a different file, but I'm unsure why you're doing it."
chaburkland,Is this 24 seconds? I'm wondering if this warrants a comment.
gdevanla,"Good point. If you notice this module mutates the `globals()`, when it is loaded. We want to be able to call this function from tests without that mutation."
gdevanla,24 hours. The comment was there and then it disappeared during code cleanup!
vhquang,"If it is year mo, can we name it `yearmo` instead of `date`?"
vhquang,"I would prefer to do comparison with tuple(int, int), or datetime.date, than with string. It can be less convenient, but it would reduce human error, such as `202002` or `200001`. Whenever I see those strings, I have to mentally find the divider."
vhquang,"Should the typehint for them be `Type[CascadeSpec]` instead of `Cascade`, as we almost always subclass CascadeSpec? Also, in your below implementation, they can be optional as well. So I think it is better to set them as `Optional[Type[CascadeSpec]]`.  And for someone who is not familiar with the history of development, a comment for historical mark when those element become required, would be helpful. But this is just a request for clarity and improvement."
vhquang,"I realize this is the old code that is not yours, but same thought of `yearmo` vs `date` apply here."
vhquang,:+1: 
vhquang,"This `arg` seems to refer to `methodology_include_spec`, but just become outdated."
vhquang,"I don't understand this comment and how it applies to the check below. But it is obviously because I don't know the requirements of PSUR and PSUC. Would you mind elaborate on, or rephrase, this comment?"
vhquang,"Would you mind also add document for when to use `use_geiu` and when not to? It may be something obvious for people with background knowledge, but still strange for me."
flexatone,"This is in line with conventions used in other specs, so for I prefer to keep it this way, until we do a more complete refactoring of these interfaces."
flexatone,"Agreed, but same as above."
flexatone,Great point; I will do this.
flexatone,Great suggestion. I have made that comment more clear.
flexatone,Good catch; this is fixed.
flexatone,"I agree, but as elsewhere, that change would be better as part of a holistic refactor rather than piecemeal changes. As we assert the yearmo strings are of length 6, comparisons works as expected."
nekobon,"I think tuple(int, int) is a good substitute for str, but I prefer not to use datetime.date for month in general to avoid readers to think the date has any meaning"
flexatone,Good suggestions!
vhquang,Got it. I think I have the same problem with RMC. I still don't know the origin of that convention. 
vhquang,"I don't know if this is discussed before, but do we prefer explicit setting changeset per factor, or let it inherit from base class and only override if needed?"
vhquang,"I don't think it is needed, as we inherit from `_TardisBuild`."
gdevanla,Good catch. I declared this in the wrong class!
flexatone,Why make changes in `deprecated`?
chaburkland,"It was because I felt a bit uncomfortable fully deleting a factors class, so I opted to just move them to `deprecated` as the code that uses it is in `deprecated`.  In my mind, if the code that uses it didn't warrant deletion but instead being moved to `deprecated`, then the same applies to this factors class."
ForeverWintr,"I guess we need to self assign these because other places in our code reference these builtins via the numpy namespace, but I don't like it."
brandtbucher,"Yeah, it's weird to lift things out of builtins and into the global namespace like this. It might just be worth going through and refactoring all of our usage of `np.bool` to just `bool` (same for the others). Maybe I'm missing something though."
vhquang,Is this how to do a for-loop in terraform? Interesting. How do we know the scope of the loop?
ForeverWintr,"I guess that's not very clear! The 'workers' variable is defined in `deploy/core/terraform/static_workers.auto.tfvars.json` above. `for_each` loops over that dictionary, and we reference the keys with `each.key` and teh values with `each.value`."
johnjhawk,are we testing anything here?
chaburkland,"No! I think the method `history_monthly` is still being developed, and so the unit test is only partially formed. I refrained from addressing it to keep the scope of this PR as small as possible."
brandtbucher,```suggestion             pass ```
gdevanla,Good catch. Thanks
chaburkland,I'm really happy this newline got added! I was too lazy to do a PR just to remove the trailing triple-backslash so I'm happy I don't have to anymore.
flexatone,haha!
gdevanla,Do you want to remove this entry?
gdevanla,This too.
vhquang,"Do we want to remove this? I am under the impression that even if we don't use numpy directly, but have other libraries (such as pandas) use it, then we should import `np_raise`."
vhquang,:fireworks: 
vhquang,The comments mention these are necessary. Just want to double check if we want to remove this.
ForeverWintr,"Great catch, thanks! I'll have to investigate. It's strange that the tests passed if this is needed..."
ForeverWintr,"Hmm. I think we only need to import it if we're using numpy. That's what I've been doing elsewhere, anyway. "
ForeverWintr,I've restored these. 
johnjhawk,this wasn't because of a circular dependencies?
nekobon,"We were already importing it at the module level, so I think it was some leftover from refactoring "
chaburkland,I didn't know this was caused a linting warning!
gdevanla,"They were part of another linting error. But, I went ahead and fixed it."
gettodaze,Why does this have to be done twice?
gettodaze,A self-destructing directory! This looks fun!
gdevanla,Yes. We have that mechanism to help us create temporary folders within the context of a test. The folders that are created as part of this call are automatically deleted after the test method is executed. (behaves like a context manager around the test function)
gettodaze,That's very helpful! I'll have to use it in my own tests.
flexatone,"I think this function is valid primary sec if not a DR, right?"
johnjhawk,"I believe that this name is correct. I read it as, these DRs are valid. ie Non US. "
flexatone,"agreed, thanks!"
johnjhawk,Could we put the number of attempts in the exception message?
johnjhawk,"Also, maybe we could gather the first line of each failure and return it in a list on the last exception? We would then know if it failed for the same reason on every attempt?"
gdevanla,"Thanks, John. Those are good suggestions.  Its good to add more discoverability into these functions.    For now, I will merge these changes but will add a backlog ticket for a pair programming session."
gdevanla,Created an issue https://github.com/ResearchAffiliates/invsys/issues/584
flexatone,"Maybe the `WT` function can have a better name, and provide a return type? I expect it is a `ColumnRecipeFieldattr` instance?"
flexatone,"If you plan to keep this assert, perhaps provide a message string?"
ForeverWintr,"Good point. `WT` grew out of a partial, which we don't usually typehint, but now that it's a function I agree. "
ForeverWintr,"Did you see this is part of a test, where we don't usually require assert messages?"
flexatone,"ah, sorry, I did not realize this was a pytest test! "
nekobon,I think we want to use `vsc_util.GitUtil.get_changeset_id`
johnjhawk,doesn't that return the changeset? I need the branch. 
johnjhawk,"it looks like there is a ""get_repo_branch"" in that same module.  I'll use that!"
johnjhawk,"good catch, seeing that we're not using this anymore.  Feel free to delete instead of just commenting out. "
vhquang,"Is `result` a string ""failed""? If so, an `is not`-check seems a bit stricter than necessary. Maybe a substring check would be more defensive?"
vhquang,"Is this ancient code? I agree with the change, but just want to double check it is intended."
ForeverWintr,"Thanks for checking! It is intended. I added this check a long time ago when we were changing where ansible was installed. I think it always fails now, so I removed it."
ForeverWintr,"I'm chagrined to say I got this from the internet, and I'm not sure how it works exactly. It comes from [this](https://www.ansible.com/blog/ansible-tips-and-tricks-dealing-with-unreliable-connections-and-services) Red Hat ansible blog post though, so I think it's the official way of doing things. "
flexatone,You can just not pass this argument rather than passing an empty `dict`.
vhquang,">One of the key, value pairs we always get returned from any Ansible task is a `failed` key. If the task completed successfully the task will return a failed: false. If the task failed, the task will return a failed: true. We are registering the result of the task so we can look at the failed key, value pair.   Such a weird syntax from ansible to check for key-pair value. Thanks for sharing this info!"
vhquang,"I choose `ID_BB_UNIQUE`, but I wasn't sure if mcap was calculated with it, or with primary security. If you have suggestion, I would like to update this properly."
gdevanla,Should this say 'contains a timestamp'?
gdevanla,same here.
gdevanla,Can you consider adding some string like 'NoCategoryType' or something. I wonder what the behavior would be when it isused with the __repr__ method defined below. This set up might return an empty.  Is that what you want?
gdevanla,Looks like this method is deprecated. https://docs.python.org/3/library/abc.html#abc.abstractclassmethod
gdevanla,"Is there a reason you maintain this list explicity? Alternatively, you could discover these classes by just calling `Category.__subclasses__()`"
gdevanla,"I am trying to understand what `is_included` means here. Are we checking if a product_id belongs to this category/sub-category combination.  If yes, can we call this method `belongs`, `member_of` or `contains` or similar names which denotes membership?  "
gdevanla,You could also consider making did to tp.Optional[str]=None. That way the code will fail if you try to use it elsewhere.
gdevanla,"I think for this instance, we should not have a default value or should be `None`. That way you can reject bad values."
gettodaze,How would it return empty? The repr below is intended to return the SubCategory surrounded by the SubCategoryType and would just raise an error if either is not defined.
gettodaze,Oh wow! Thanks for the catch!
gettodaze,"Good point! I think the the order matters in this case. If a particular `dist` could be included in both `IndicativeBuild` and `DerivedDataset`, we want it to be caught by `DerivedDataset` first. Having the tuple allows things to move around more easily. But maybe if `__subclasses__()` is ordered, we could move things around by their position in the file? I think it might be easier just to move strings around here."
gettodaze,"Oh I see how that could be confusing. We're trying to see if a `Distribution` with the given `product_id` could be considered a `FinancialsReview`, for example. The classes serve as a labels for different `Distributuion` categories. So in essence, would `Distribution` belong to the given `Category`. I will switch them all to `contains`!"
gettodaze,"Yeah, I like this. I originally had it this way but removed it for simplicity. But I think safety beats simplicity. I'll change it."
gdevanla,"Oh, I see. Sub-category type wraps the category. Got it. Thanks"
gdevanla,Is there a reason this is a function. Could this just be another attribute?
gdevanla,"Does use of `call_once` here means you will not get any updated data. Doesn't the `distribution_table` change?  same with other functions in here. Perhaps, I am overlooking something!"
gdevanla,can this just be an `if`?
gdevanla,Should the `set()` here be `None`?
gdevanla,How about  ``` return carve_ids or pid ```
gdevanla,Do you need `=None` here?
gdevanla,may be there are less intrusive ways of doing this. Can you check with Quand/Tom on this?
gdevanla,You might consider building the keyword arg here and passing. There is a danger of mixing up the sequence of args here.
gdevanla,Do you need a context manager here?
gdevanla,"Oh, I see you are using env.get_output_dir.  Perhaps, you don't need the context manager here."
gdevanla,Why  do you need this step. Can you consider getting a brand new path so that you don't have to do any delete's here?
gdevanla,Can this be `None` here? The type hint does not suggest that.
gettodaze,"You know, Charles brought up the same thing in the Code Review! I initially did this to keep this attribute out of `_fields` so that the `_fields` would map nicely to just frame column names. It turns out that `tp.NamedTuple`s do allow private class properties outside of `_fields` by not typehinting the property. But because that seems like unintended behavior, we decided to just leave the methods as-is."
gettodaze,"I suppose the `distribution_table` could change throughout the life of this script, but the script is not meant to stay constantly running. I think (correct me if I'm wrong) the script benefits more from increased speed from caching the result than the increased fidelity by doing more fetches of the `distribtution_table` or other cached properties."
gettodaze,"The type for this field is never optional, so I always just default to `set()`"
gettodaze,"The `tp.Optional` just comes from some `Distribution`s don't have families, they have `family` = `None`. But I never want this method to be called without an argument, so I think we don't need the default."
gettodaze,@gdevanla What do you mean by less intrusive?
gettodaze,"Do you mean this context manager? Why wouldn't I need it? ```         with open(temp_path, 'a+') as f:             if i == 0:                 f.write('\t'.join(named_tup._fields) + '\n')             print(f'{i}. {named_tup}')             f.write('\t'.join(str(x) for x in named_tup) + '\n') ```"
gettodaze,"So example if the user runs this program with `out.tsv` as the output argument, but that file already exists, should I throw an error?"
gdevanla,I see. That's reasonable.
gdevanla,"I see. Ok, this usage is fine within the context of this script. "
gdevanla,I meant you did not have to the `shutilrmtree` move. Can you verify where the files get created. I am assuming they get created inside the `rapc_input/static/*` folder which may not need cleanup.
gdevanla,"It is in the `output_folder` and usually we don't clean up that folder as well. If you really want to clean up, may be you can use the `get_invsys_tmp_dir` folder defined with the same `env` object."
gdevanla,"If you use a temp folder, rather than `output` folder than you should be fine, since evertime you will create a new folder."
gettodaze,Ah! I see. I will do that.
gettodaze,"@gdevanla I think I will use the `get_invsys_temp_dir` so that I can remove the file. In that case you recommend keeping the context manager? But either way, isn't it always best to use the `open` contxt manager so that the file gets closed even if there's an error? Or were you thinking I wouldn't need the `get_then_rm` context manager?"
gettodaze,"Or, could I use the `get_tlt_temp_dir`? What is the difference between the two?"
gettodaze,"@gdevanla Oh, I see! One of the things that Chris was looking for with the script is to have an option to delete the Distributions after they get downloaded, so that just serves to delete the downloaded folders. Is that okay? Or would you recommend verifying that it was indeed this script that downloaded them so that we're not unexpectedly deleting dists that were already downloaded?"
vhquang,"I saw that we use `sleeve_levels: rm_sleeve_levels_reits_20200228`, but for `202006` we drift returns from `2020-06` instead of `2020-03`. Is there a special handling for `LTE REITS`?"
nekobon,"Since new sleeve_levels is added to the `rmc_hyper` class above, can you please put the previous sleeve_levels on this month? sleeve_levels = ('back_test', 'rm_sleeve_levels_currency_neutral_20170602.txt') drifted_returns_start_yearmo = '201706'"
nekobon,"I found that this `psu_distribution` is set in `ra_multi_2019` which is inherited by `rmc_hyper`, so we don't need it in all date parameters. (please double check)"
nekobon,:+1: 
nekobon,"It should be `202003`, but it might not matter because it has short history. Can you please try building with the param set to `202003` and `202006` and see if you see any difference? If there is, we would need to rebuild 202006 build with `202003` parameter. Thank you for catching!"
vhquang,"Thanks for helping me catch this. But I am curious, since the month is 2020-03, why can't we use headline of 2020-02 and need to move back to 2017-06?"
vhquang,"Yes, it is indeed set in the parent class!"
gettodaze,"Let me preface by saying that you do not have to reply to/change everything, I'm just going to mark places that confuse me. selected where/how?"
gettodaze,"Does that mean that `dids` is assumed to be sorted newest to oldest? Edit - never mind, I see `@assert_single_did`"
gettodaze,If you're using `_asdict` shouldn't it be public?
gettodaze,Is there a reason one is `to_writer` and the other is `to_all_writer`?
gettodaze,Is the `/` operator doing something here? Or did you mean for it to be an `os.path.join`?
gettodaze,same here
gettodaze,"Never mind, I found Path truediv returns Path."
gettodaze,maybe portfolios can be renamed `portfolio_and_recipes` or something? just a thought
gettodaze,a little confusing because build_recipes doesnt seem to take in a portfolios arg
gettodaze,Interesting constructor! Does the return type not need to be `'LaunchArgs'`?
gettodaze,"This isn't the arg you only expect one of, right?"
gettodaze,"Ah, yes! I have noted that Ted likes Calibri! Is that what this change was for?"
gettodaze,Oh haha I must say I like the old name `dream_machine`
gettodaze,is ` Apply some common dtypes` still happening?
gettodaze,Is this a circular import or a hack to get around a circular import? I'm just wondering if maybe this still needs to be dealt with.
ForeverWintr,"Good question. These classes are used to construct the interface in Bolt (http://bolt01-prd-i:5003/). The doc makes sense in that context, if not here."
ForeverWintr,"This is a longstanding quirk of namedtuples. `_asdict` is intended to be public, but because namedtuple attributes could be any string and Raymond Hettinger didn't want to shadow user defined attributes with `namedtuple`'s built in methods, all of `namedtuple`'s methods start with an underscore. In Raymond's defence, I think 'namedtuple' pre-dates pep8. :)"
ForeverWintr,"Yes, `factset_id_to_all_writer` includes external benchmarks, while `product_id_to_writer` doesn't. That distinction isn't overly clear from the names."
ForeverWintr,"yup, pathlib magic. "
ForeverWintr,"This is a different entry point from `cliqc`. In this interface, the user can specify multiple most recent dids, with the stipulation that they all have to be from different families. "
ForeverWintr,"Good point. The portfolios come from 'spec', and I'll update the docstring to clarify that. "
ForeverWintr,It doesn't because I added `from __future__ import annotations` at the top!
ForeverWintr,It was. :)
ForeverWintr,haha. For a long time this report was called 'Ted's Dream Machine'. Hence TDM.
ForeverWintr,It is (although it's currently only one dtype). See line 198 below!
ForeverWintr,"It was a hack to get around a circular import. However, this whole module is now unneeded, and I'm going to remove it as part of my next round of changes."
chaburkland,"I believe this import can be removed. It's only used for `cache_file.CacheFileError`, but that same exception is defined in ISLib.cache, so I think it would be better to use that."
chaburkland,There is a lingering import to RALib.cache_file on line 999 that should probably be replaced.
chaburkland,Can remove this one to. Only used for `CacheFileError`
chaburkland,Can remove this one to. Only used for `CacheFileError`
chaburkland,Still a lingering import to `cache_file`.
chaburkland,"It seems to me like most of these tests should just be moved to an ISLib test, something like `test_cache.py`. Its seems weird to import from `cache.py` and test that functionality in a test file for `cache_file.py`, which is basically a wrapper around `cache.py`."
chaburkland,You can also remove the import to `cache_file` here. Only used for `CacheFileError`
chaburkland,I'm glad this is going away :+1: 
chaburkland,I think this import is unused!
chaburkland,I think this `__init__` defintion is unnecessary! Doesn't this automatically happen by just doing:  ```python class CacheFileError(Exception):     '''Base exception of all errors related to cache file'''  ... ```
chaburkland,"I'm sad about this, but I understand why it must be done :("
nekobon,Yes! I will remove it
gdevanla,"Just curious. If the objective is to speed up, can we just call  this function only when changeset_id is provided.   ``` def validate_changeset(changeset_id=None) -> str:                                                                                                                                                                        '''Check that the specified changeset exists, or get the current remote changeset if none is specified.                                                                                                              '''                                                                                                                                                                                                                  repo_fp = tlt.get_imdev_root_dir()                                                                                                                                                                                   if VcsUtil is HgUtil:                                                                                                                                                                                                    hg_pull(repo_fp)                                                                                                                                                                                                                                                                                                                                                                                                                      if changeset_id is None:                                                                                                                                                                                                 changeset_id = VcsUtil.get_remote_branch_head(                                                                                                                                                                               branch=constants.SANDBOX_BRANCH)                                                                                                                                                                             return changeset_id                                                                                                                                                                                                                                                                                                                                                                                                                   try:                                                                                                                                                                                                                     VcsUtil.get_changeset_from_ref(changeset_id)                                                                                                                                                                     except GitCommandException:                                                                                                                                                                                              raise InvalidRequest('{} is not a public changeset_id.'.format(changeset_id))                                                                                                                                                                                                                                                                                                                                                         pprint(f'validate_changeset = {changeset_id}',                                                                                                                                                                               fg_color=ANSIColor.fg.lightblue,                                                                                                                                                                                     file=sys.stderr)                                                                                                                                                                                             return changeset_id            ```  "
vhquang,"When `changeset_id` is not provided, it will be defaulted to HEAD of `default`. In both case, since we always do `git fetch` before we get to this, the cost of doing `get_changeset_from_ref` is just a subprocess call, and will finish quick.  On another hand, `is_changeset_public` is an expensive check. I couldn't find a reliable way to check if, except go through each public branch, and iterate from its HEAD to the merge point with `default` to check if I can find the changeset. If so, the changeset if public. Our workers can use `get_changeset_from_ref` as a shortcut, because they don't have local branch. All branches are public, so if the changeset is valid to them, then it is public."
gdevanla,Ok. Thanks for the explanation.
vhquang,"If what you mean is only check when we don't default the changeset to HEAD of `default`. Yes, I think it will save a bit of time, but the cost of a subprocess is relatively low IMHO, hence I didn't think much of that when we debug the issue. If you think it worths it, I can make subsequence change."
chaburkland,"This function is returning `None` when product is `None`. That contradicts the docstring, as well as its usage on line 479: `set(self.iter_carve_product_by_product())`"
ForeverWintr,"The behavior when product is `None` is controlled by the inner `iter_carve_product_by_product`, which will yield all carve ids. I think what you're seeing is the case where `self._carve_product` is `None`, in which case this is a generator that yeilds nothing (i.e., `list(product.iter_carve_product_by_product()) == []`)"
chaburkland,Gotcha. I forgot that the presence of `yield` anywhere in a function automatically makes it a generator function.  ```python 14:23:07  In [11] def generator():               ...:     if False:               ...:         yield from range(5)               ...:   14:23:12  In [12] list(generator()) 14:23:14 Out [12] []  14:23:14  In [13] def generator():               ...:     if False:               ...:         return range(5)               ...:  14:23:24  In [14] list(generator()) --------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) <ipython-input-14-de805f5fbcdd> in <module> ----> 1 list(generator())  TypeError: 'NoneType' object is not iterable ``` 
gettodaze,Is this just because `sf.Frame.from_tsv` doesn't support converters? I wonder if we could ask for that feature.
gettodaze,> Hide from the user. Do not add to public API.  does that mean this should be private? Or you just want to keep it out of the public package?
gettodaze,Here's a TODO
gettodaze,Maybe you could assert that the `table_id` is what you're assuming it is for that last return?
gettodaze,"maybe ""given code"" -> ""given field"""
gettodaze,"Oh, this must be one of the places you want to change to `tlt.get_input_static`"
gettodaze,TODO
gettodaze,Just curious how these class vars get used? I did a search but couldn't find any place they're explicitly being referenced.
gettodaze,"Ah, never mind - you just use `self.` instead of `cls.`"
chaburkland,"It's actually because `pd.read_csv` is implemented with highly-optimized C, and so it always outperforms static-frame. It's a very common move to use `sf.Frame.from_pandas(pd.read_csv(...))`."
chaburkland,"That's a good point. Originally I thought there was a way to hide it from the public package, but I see that's not possible. The reason for hiding it, is because the reason this exists is for testing, so I think I will just make it private."
chaburkland,Good catch.
chaburkland,This is a good suggestion. It made me catch that there were actually two other table_id's that were actually string data! 
chaburkland,Yeah it's a bit confusing.
nekobon,(very minor point!) How about  ```python assert set(FxConversionType) == set(frame[cls.FIELD_FX_TYPE].unique()) ```
nekobon,It might be safer to return a copy here
nekobon,FYI These are not longer used in default
nekobon,Why do you need `_RESOURCE_PROTOTYPE`? (maybe you can add a short comment there)
nekobon,I think it's a bit confusing to define a class constant outside the classes
nekobon,It seems like an implicit requirement for how each Resource inherits. It might be easier to miss when we need to refactor the Resource classes in the future. Can we do this without depending on the mro?
nekobon, `remaining_fields` seems to be renamed to `last_chance_sum`
nekobon,"When there is no nan in `choose_first` or `choose_second`, this block is not necessary, but I like the code look easy to understand. How often do both first and second have nan?"
nekobon,"It says ""#Temp"". Are you planning to rename before merging?"
nekobon,Nice! I didn't know you could do that! Do we need to support both property and method call here?
chaburkland,Good point.
chaburkland,"I'll add a comment. The jist is that the readers/writers don't have enough information on module load to know what their final `RESOURCE` is, since they don't know what their `Frequency` is yet. That is only known on construction/initialization. However, once we're on that step, we need a way to figure out what the real resource is, and so both the `_RESOURCE_PROTOTYPE` and the `freq` information are used to figure it out."
chaburkland,"Technically it's _redefined_, although I don't know if that makes it less confusing. From working on it, there aren't any pretty options, as it's already a bit confusing to have 9 different resources that are mapped between 3 different readers & writers. I will comment it better."
chaburkland,"I figured someone would say something about this haha. I can update the loop to be pairs of (resource, resource_prototype), instead of using the `mro()` to find the prototype. It's a bit fragile."
chaburkland,I am using `#Temp` because this table is literally temporary. My understanding from Alan was this is the standard way to name temporary SQL tables.
chaburkland,"It's more of a vanity thing. I wanted to have the feature of a cached property, since the temporary tables can only be built once per connection.  However, in the code, calling `self.build_valid_co_peds_table` without parentheses makes it look like an attribute instead of a method, which it is.  So I made a method that calls a property, so the user can call `self.build_valid_co_peds_table()` and have it both look like a method, and also know it's only being called once.  I'm wondering if I should just use `util.call_once`...."
chaburkland,"Yeah, the comment pseudocode doesn't align very well with the function args. I'll update it."
chaburkland,"I don't have stats off the top of my head, but I do remember when I first worked on this with Compustat there were some cases it happened."
chaburkland,Actually I can't do this! It's possible the frame doesn't have all the conversion types! I am asserting here it doesn't have any unknown conversion types.
johnjhawk,ipdb
johnjhawk,"The return type needs to be updated. I think:  Tuple[Any, date, Any]"
johnjhawk,"a little code golf? maybe just return [(file_path, data_date, holdings)]. up to you."
gdevanla,Thanks. Will fix it.
gdevanla,Good point. Will fix it.
flexatone,"Here an elsewhere, maybe better to use ""invsys"" rather than ""is"", as that way ""IS"" does not sound like the verb ""is""."
flexatone,Can this TODO go away?
flexatone,We will want to do some RAPC integration testing with this change as `scipy` updates can result in some numerical deviations.
brandtbucher,I already ran a full AgentQ run with these platform changes (including the new `scipy`) last week:  - [RAPC fast unit tests](http://uroborus01-prd-i:5000/runs/279590) - [RAPC slow unit tests](http://uroborus01-prd-i:5000/runs/279591) - [RAPC fast integration tests](http://uroborus01-prd-i:5000/runs/279592) - [RAPC slow integration tests](http://uroborus01-prd-i:5000/runs/279603) - [RAPC slow integration-0 tests](http://uroborus01-prd-i:5000/runs/279604) - [RAPC slow integration-1 tests](http://uroborus01-prd-i:5000/runs/279646) - [RAPC slow integration-2 tests](http://uroborus01-prd-i:5000/runs/279651) - [RAPC slow integration-3 tests](http://uroborus01-prd-i:5000/runs/279652)  All green!
brandtbucher,"Yeah. The potential problem still remains (for now), but it's not something to be fixed here."
brandtbucher,"Here's blender, green as well:  - [blender fast unit tests](http://uroborus01-prd-i:5000/runs/279707) (none) - [blender slow unit tests](http://uroborus01-prd-i:5000/runs/279708) - [blender fast integration tests](http://uroborus01-prd-i:5000/runs/279713) (none) - [blender slow integration tests](http://uroborus01-prd-i:5000/runs/279714) - [blender slow integration-0 tests](http://uroborus01-prd-i:5000/runs/279715) - [blender slow integration-1 tests](http://uroborus01-prd-i:5000/runs/279723) - [blender slow integration-2 tests](http://uroborus01-prd-i:5000/runs/279724) (none) - [blender slow integration-3 tests](http://uroborus01-prd-i:5000/runs/279725) (none)  (sorry for needing to link to the individual test runs. The (current) uroborus can't fully parse this (future) pytest output, so they just all show up yellow in the web console)."
flexatone,sounds good! lets move forward.
brandtbucher,"```suggestion     def get_test_distribution_fp(*, spec_fp_components: tp.Tuple[str, str], target_folder: str) -> str: ```  I think this better communicates that we expect a pair of strings, rather than an arbitrary-length sequence."
brandtbucher,"Context managers are cool, but I wonder if it makes more sense to just simplify this (since we get no reuse from the context manager version):  ```suggestion         temp_dir = os.path.join(env.get_tlt_temp_dir(), name)         os.makedirs(temp_dir, exist_ok=True)         try:             dist_tag = distribution.Distribution.from_any_with_tag(name=name, env=MockEnv())         finally:             os.rmdir(temp_dir) ```  Same with `test_get_matching_ls_a`, below."
brandtbucher,```suggestion             @staticmethod             def get_output_dir() -> str:                 return outdir ```
gettodaze,"Oh yeah, haha I guess that does make a lot more sense."
nekobon,I like the new names!
nekobon,"I see that `args` argument could be different from this `ARGS`, but it's not clear when. How about to rename one of them?"
nekobon,"Minor point, but I prefer to put minimum code in `try` block to know better about what could raise the exception. How about to move this line out of this block?"
chaburkland,Maybe add a `.head()` or something like that since that is a lot to put in a docstring I think.
chaburkland,"I would recommend passing in `build_diff_frame=False` as  kwarg here since that should speed up the comparison routine in the case of failure, along with reducing the memory footprint. Of course, if the frames are small, then it's a moot point."
brandtbucher,Does that still give a nice helpful `str(comparison)`?
chaburkland,Yeah. `diff_frame` is primarily meant for exporting to tsvs to view each column contrasted between the frames. It has no bearing on the construction of `str(comparison)`.
flexatone,Should `requested_measures` be a `frozenset`?
flexatone,Should this be in test_input rather than a committed file in our repo?
flexatone,maybe test that some values are greater than 0 too!
flexatone,Maybe this is no longer needed?
flexatone,"Do we need the whole file path, or just he relative static resource components. Maybe it is not worth the distinction."
chaburkland,"Yeah - that would be a better data structure here. I think I reached for list because my imagined use-case was such a limited number of elements, but a set is better here."
chaburkland,Yes
chaburkland,"These tests are testing vendor-independent properties of the different measures, so here I can't! The only thing guaranteed about `book_w_floor` is that there are no NaNs, and it's floored at 0. There is a more specific spot check on `TestMeasuresCAF.test_book_w_floor`."
chaburkland,Whoops!
chaburkland,"I lean towards thinking the distinction isn't that important, and I prefer to use the attribute since it's already there. "
gdevanla,I think this is an extraneous else.
chaburkland,Ah it is. I'll remove it.
flexatone,You probably did not want this on this branch!
flexatone,"Here and elsewhere, probably best to not provide a `FrameGO` to the function, instead, just do `co=co_data.to_frame()`. "
flexatone,Should we take these out?
flexatone,This can by be `str` instead of `None`
flexatone,`: tp.Set[str]`
flexatone,"dtype can be `str` here, and for the MIC fields, below."
flexatone,"Should we not pass this set when we are not using it, and instead create an `scr_active` or similar Boolean that we pass into functions that do not need `china_anb_eligible_tickers`?"
flexatone,extraneous `else`?
flexatone,"dtype can be str, here and for other IDs."
flexatone,This is so similar to lines 815 to 839; can we find to implement this move in one function shared by both routines?
flexatone,dtype can be `str`.
johnjhawk,"ha, you're right."
johnjhawk,agree
johnjhawk,I thought that I got all of those.  Done. 
johnjhawk,done
johnjhawk,done
johnjhawk,done
johnjhawk,I find them useful but probably only while I'm actively developing this.  I'll mark them with a TODO REMOVE to force me to remove them before merging to default.
johnjhawk,"I agree that passing the set is misleading. Instead of creating a new variable, could i just use the china_anb_eligiblea_acitve flag from the connector?"
johnjhawk,"I changed this to use the china_anb_eligiblea_acitve flag that is on the connector. It makes sense to me since we need a boolean and I was going to create one from china_anb_eligible_tickers, but china_anb_eligible_tickers was created from china_anb_eligiblea_acitve. So I'm using the original instead of creating a new variable. "
johnjhawk,"I looked at this before and the only code that is shared is the first if else statement. the rest is distinguished by mcap and float needs.   I could break out the first if else but I think that would add another level of complexity as it would have to branch on the more if we were using the tradeable or scr version.   I also though about making the entire records function generic enough to handle both cases but again the branches needed would add complexity that I'm not sure would be helpful in the long run. They not only yield different fields, they yield a different number of fields.  I may be missing something. Let's chat if you see an better path. "
flexatone,It seems like the vendor specific pro-forma string should be defined in a vendor-specific module.
flexatone,"if you are going to take a `set` of `all_data_dates` in the end, why not start with a `set` for `all_data_dates`, then use `set.update()` with each `data_dates` in the loop."
flexatone,`if not data`?
flexatone,"Do we have to support both strings and `date`? We do not validate that the string is in the same representation as the the result of `strftime`, below, so might unintentionally introduce diverse string representations."
flexatone,If you are returning a `list` you might as while type the return object as `tp.List[DataDatePatternMatcher]`
flexatone,Same here: your return type can be `tp.List`
flexatone,Is this leap-year safe? Is it better to use a `timedelta` of 365 days?
flexatone,"""Return a list of tuples..."""
flexatone,"As it is used many times, should 'portfolio_code' be a symbolic constant?"
flexatone,"""Return a list of tuples..."""
gdevanla,"Yes. I left a comment there stating this is a special case. Also, there will be a circular import problem if I abstract this further. This thing hardly changes and even if it changes we will fail fast."
gdevanla,Oh the `data` will be a frame and I cannot check for truthiness that way.
gdevanla,Yes. Good point. I think this ended up being this way organically!
gdevanla,"Actually, we need both. Since, we pass a '*' to construct a glob str. But, I have clean up the implementation to make this function support narrower types."
gdevanla,This is just to handle date changes just over the dec-jan timeline. I can add an assert to make sure this switch happens only between Jan/Feb.   ```    assert data_date.month == 12 and self.context_date.month == 1                                |                                                                                                              assert data_date.year == self.context_date.year                                              |                                                                                                                                                                            ```
gdevanla,"yeah, this will be cleaned up when I clean up portfolio_map table. I have a task to clean this up when I work on returns."
chaburkland,"Is `meta_data` guaranteed to be defined? In other words, is the case `connection_str in self.engine_instances and use_null_pool` possible?"
chaburkland,"I think you can use `via_str` here! (You don't need to, but I wanted to point it out anyway).  ```python holdings_ids = holdings['alternate_id'].via_str sel = holdings_ids.startswith('CASH_') | holdings_ids.startswith('DIVACC_') ```"
chaburkland,`colname == 'weights'` ?
chaburkland,I believe you can just do:  `new = new.astype[col](float)`
chaburkland,Same `astype` point here too.
chaburkland,Are these print statements intended?
chaburkland,What is the reason for `:2`?
chaburkland,"Maybe:  ```python ({(name.value, dataset.value) for (name, value) in factset_upload.HOLDINGS_BY_WEIGHTS} |  {(name.value, dataset.value) for (name, value) in factset_upload.HOLDINGS_BY_SHARES}) ``` ``` "
chaburkland,`@staticmethod` ?
chaburkland,"Same unpacking comment here `(name.value, dataset.value) for (name, dataset) in ...`"
chaburkland,What exactly is being tested here?
gdevanla,"The 'use_null_pool' attr is associated with the ConnectionSpec.  Therefore, if the connection_spec had `use_null_pool` set to True, then the engine instances will never be cached and therefore, `meta_data` will always be set. "
gdevanla,"Thanks. But, isn't that twice the operation?   I do like since I do not have do perform the instance check. I will change it."
chaburkland,"Okay. In that case, I'll approve this PR then, since the rest of my comments are style/format related."
gdevanla,I left a note in the class header. These tests are more to exercise building up of the CompareFrame objects. These module will go away in one or two months and therefore did not add tests to assert what compare frame returns. 
gdevanla,They keys are tuple of 3 elements. The first 2 elements is expected to the same value across all records.
gdevanla,I will leave it as @classmethod here to keep it consistent with other places where we have similar DagAdapter class.
flexatone,Should we just import this at the module level?
flexatone,"`all` can take a generator expression, so maybe better is   ``` if not all(USMarketCalendar.is_working_day(d) for d in as_of_dates): ```"
flexatone,Here also: maybe module level import?
gdevanla,"I am avoiding importing this at module level, since when pytest loads these modules it produces a lot of airflow logs. You will notice that this module is free of references to airflow, except this tiny bit."
gdevanla,Same as my comment above.
flexatone,Do you really want to leave this TODO here?
flexatone,Do you really want to put this entire loop in a try/except block? Can the `try/except` block be applied more narrowly and can you handle more narrow `Exception` types? Maybe only `hw.HoldingsWriter.upload_holdings` needs to be in the try/except block?
gdevanla,yeah. I am still not able to make up my mind. I will create an issue for this.
gdevanla,"There are 3 DB calls happening in this block. That was the reason I used a more coarser try-catch region.  I probably could narrow the `Exception` to postgress- dns resolution specific exception. But, I thought since we were `retrying`, we might as retry once for any kind of exception (that could be intermittent).   I feel it benefits from cutting down  'operational' time in manually re-running these jobs for such intermittent issues. I Many a times, I have spent time just re-running these jobs and they just work the second time."
gdevanla,"> Should at least one test be added to cover this new functionality?  Yes.  I was on the fence on that. But, I think I will add something."
flexatone,can the try/except at least be inside of the loop? or maybe the loop should call a new function that is responsible for all the functionality that might raise.
gdevanla,I have another pull updating the retry_decorator. I will address this change as part of that PR.
vhquang,"Isn't it an anti-pattern, to modify the list that we are currently iterating on? More often, I see people use `deque` for this purpose: ``` d = deque(the_list) while len(d) > 0:     item = d.popleft()     ...     d.extend(other_list) ```  Or I could be out of the loop, and maybe modifying current iterating list is safe now."
vhquang,I like how we can simplify managing the versions now. :+1: 
brandtbucher,"Modifying a list during iteration is allowed (it's hash tables like sets and dictionaries that are problematic). You just need to be aware that removing items can affect future iterations:  ```py >>> l = list(range(10))  ... for e in l:  ...     print(e)  ...     l.pop(0)  ...                                                                                                                                                                                                                                            0 2 4 6 8 ```   In this case, we're just appending to the end, which is fine.  I might use a `deque` here as a queue if I were working with large data (since I don't care about past iterations anymore). But here there's a negligible memory impact, probably not enough to justify involving a `deque`. "
vhquang,"The distinct of hash-like iterable makes sense. Thank you for that info! Given that, I agree it is not worth it to use `deque` here."
nekobon,"If this Frame has only one column, could it be a `Series`?"
nekobon,"(a bit unrelated) Do you usually remove the old data? ('rmc_20201208_181349.1607480576') I often update my test data used in my test, and I've been leaving the old one there. I'm afraid I left some large amount of data there that will never be used."
ForeverWintr,"Good point. I think it could be a series, but I'm going to write it to tsv/xlsx eventually, so I think I'll need it as `Frame` at that point. "
ForeverWintr,"I don't remove the old data (and I think we should leave it for a while, in case we want to see how the test worked on an old revision). I like the idea of removing test data that hasn't been referenced by anything for some amount of time, maybe 2 years. But I know @flexatone is a big proponent of the static server being grow only, and the current size of our test_data directory on  irv-pc101 is only 2.2GB, so I think trimming it down is low priority."
nekobon,"That is great to know. Some files I've uploaded were relatively large, and I'd felt strangely guilty. But the total of 2.2GB is nothing! Thank you for checking the size. "
vhquang,"nitpick, but I don't think the import is in correct alphabet order."
vhquang,:+1: 
vhquang,"Also a nitpick, I think the return statements can be simplified to single return `return header in x_fields`."
vhquang,"I just want to double check, it seems that we only want to format percent fields, and ignore numeric fields, is that correct?"
vhquang,"This instantiate looks a bit cryptic for me. I think if we use kwargs: `cls(ratio=1, ratio_abs=1, diff=0, diff_abs=0)` or `cls.from_change(ratio=1, diff=0)` it would be more readable."
vhquang,"Reading the code below, I feel unclear if `x` and `y` should be numeric or string. If we expect to handle both, I think making it explicit that we will handle both types will be better. "
vhquang,I think it is almost always that our spec is `tp.Type[CascadeSpec]` than direct `CascadeSpec`. Setting that will avoid linting complain in the future.
vhquang,I think it would be better to typehint if the record is expected to be `sf.Series` or `pd.Series` here.
vhquang,I am curious if there is a reason we replace the reference with string here.
vhquang,"Is `valid_period` a series of `datetime.datetime`? If so, can we just do `p.year` instead?"
vhquang,"Is it intentional to be set here, instead of being import at module level?"
flexatone,"I do no think we, or even pylint, enforces sort order of imports; I think the only thing that is important is that they are grouped into std lib, 3rd party, and local."
flexatone,good change!
flexatone,Right!
flexatone,"correct, thanks!"
flexatone,good point; they should be `tp.Any`
flexatone,good point!
flexatone,"The new GEIU does not have `sec_id_field` as an attribute, so this was quick fix. But I should be able to get it from a connector."
flexatone,good point!
flexatone,"right, that should be module level."
gdevanla,"I wonder what a better name for this would be. But, I do think this function does more than setIndex,   1. since the duplicateHandlers are powerful and also raise exceptions. 2. They also perform consolidation.  Is there a way to reflect that as well in the function name?"
gdevanla,"I understand this is not part of this change. But, perhaps this argument should be called 'col_id_field' in the future?"
flexatone,Please review style for naming a class. This could be `_BBPerSecParser` or similar. We will make it private as there will be two public derived classes.  ```python class BBPerSecDataParser(_BBPerSecParser):     pass  class BBPerSecHistoryParser(_BBPerSecParser):     pass ```    
flexatone,"Rather than passing this as a string, you can branch this behavior based on the type of the derived class. So You can remove this parameter and make a change below after defining the two derived classes shown above.  "
flexatone,"with the derived classes, this becomes `if cls is BBPerSecDataParser:`"
flexatone,"with the derived classes, this becomes `if cls is BBPerSecHistoryParser:`"
flexatone,Extra space before `:`
flexatone,Is this comment still valid?
flexatone,"For best performance, provide a `dtypes` argument to `from_records`."
flexatone,"Nice tests! But why are you converting values with `float` here: `float(min(price_history['PX_LAST'].values))`? You should not need to, unless your PX values are coming as strings, which we do not want."
AlanMLin,implemented this change
AlanMLin,implemented this change
AlanMLin,implemented this change
AlanMLin,implemented this change
AlanMLin,fixed
AlanMLin,I still need this but would like to fix it. I will show you when I get a chance to have an OOOCR.
AlanMLin,I have some questions about this. I'd like to discuss with you when I get a chance to have an OOOCR.
AlanMLin,I'd like to discuss with you when I get a chance to have an OOOCR.
nekobon,I have a slight preference to call this FIELDS_STR to be symmetric
nekobon,"`.update` overwrites the previous value silently, if the same key is in multiple sets accidentally. How about to make a global helper function `_combine_dict(*dicts)` which raises when there is any duplicated keys?  Also, you can create a new dict from multiple dicts without multiple `update` calls by unpacking: `new_dict = {**dict_1, **dict_2}`"
nekobon,"It is slightly more conventional to use enumerate when you need to count while iterating values ```python for i, v in enumerate(field_values):     v = v.strip() ```"
nekobon,"This is a very minor point, but since this function is long, making some pieces into local functions could help readability. I would make a function `_convert_nan(field_def: str) -> tp.Any` from these lines  We can also define a `defaultdict(str)` outside the loop with keys = field_defs and values = one of {np.nan, False}"
nekobon,"How about to put the inside if first to reduce one level of indentation ```suggestion                         if field_defs[i] == 'DATADATE':                             v = datetime.datetime.strptime(v, '%m/%d/%Y')                         elif field_defs[i] in cls.FIELDS_DATE:                                                             v = datetime.datetime.strptime(v, '%Y%m%d') ```"
nekobon,"It's better to put child class specific ones in child class(es).  For example, put ```FIELD_DEFS = ['IDENTIFIER','RCODE','NFIELDS']``` as a class attribute in `BBPerSecDataParser` and use  ```cls.FIELD_DEFS``` from here"
nekobon,"```                      field_values = line.split(delimiter)[:len(field_defs)] ``` or better to tie them by ``` field_values = line.split(delimiter)[:len(field_defs)] def_to_value = [(d, v) for d, v in zip(field_defs, field_values)] ```"
nekobon,"```python for d, v in def_to_value:     v = v.strip() ``` "
nekobon,"```python new_dict = {     **{k: int for k in FIELDS_INT},     **{k: float for k in FIELDS_FLOAT} } ```"
nekobon,"```python _convert_date(definition: str, value: str) -> datetime.date: ``` is another good option"
AlanMLin,implemented
AlanMLin,implemented
AlanMLin,implemented
AlanMLin,implemented
AlanMLin,implemented
AlanMLin,implemented
AlanMLin,implemented
AlanMLin,implemented
nekobon,It's the best to avoid using the base `Exception`. Maybe it's good to use `RuntimeError` or `ValueError`. What do you think @flexatone?
nekobon,You don't need this `else`
nekobon,It's better to put these functions outside the loop to avoid creating function in every iteration
nekobon,This `pass` can go now
flexatone,"Yes, we generally always want to raise a more specific exception than `Exception` , and want to provide meaningful message in the exception, so better would be `raise RuntimeError(f""Error: duplicated key '{k}'"")`"
AlanMLin,implemented
AlanMLin,implemented
AlanMLin,implemented
AlanMLin,implemented
nekobon,(minor point) These lines would like one more indentation (8 spaces from where `def` starts)
nekobon,"(minor point) it might be better to explain a little more here, like 'no line between START-OF-FIELDS and END-OF-FIELDS'"
nekobon,Why do you need this check? It's not common to do `<something immutable> in <container>`
AlanMLin,implemented
AlanMLin,implemented
AlanMLin,implemented. find and remove duplicates using static frame duplicated()
ForeverWintr,"Hmm, fair point. I'm currently lobbying StaticFrame's author to include `duplicate_handlers` in `Frame.set_index` (because handling duplicates is a common requirement when changing index, in my experience), so I named the function the same. "
ForeverWintr,"It's actually a co_id, not the name of a co_id column!"
gdevanla,"I see I saw this statement  ``` co_id=record.ID_BB_COMPANY, ``   over her and was confused. Now, I realize it is not a symbolic constant by an record attribute."
vhquang,"I choose to do this, instead of adding more screen, to avoid processing on unmapped `csg`."
vhquang,"The screen for score_input is change into `csg`, as `csg` is now a stricter set than valid price."
gettodaze,"Haha, maybe a better name than `thing` could be `cov_arg`?"
gettodaze,Does this get rid of the option to just use the `-c` arg?
brandtbucher,"Yes, it does. Uroborus is consistent in that all of the boolean switches have both long and short forms, while the ones that can take arguments only have the long form. There's no real reason for it other than I find it a bit hard to understand what's happening with something like:  ``` uroborus -fm -c ISLib.test_data -p --forked --dist load ```  As opposed to:  ``` uroborus -fm --cover ISLib.test_data --pytest --forked --dist load ```  But if people want me to add the short form back, it's super duper easy. 🙂 "
gettodaze,"Oh I see! I can't speak for everyone, but I think it makes sense to have as long-form only."
nekobon,I think you forgot to remove this :slightly_smiling_face: 
gettodaze,Why doesn't `cover` stay in parsed?
brandtbucher,"This test only works for boolean switches, where the expected values are just `True` or `False`. Now we have either `None` or a (possibly empty) list of strings, so that doesn't work anymore.  I added a new test for this option below (`test_cover_arg`)."
brandtbucher,"Ignore this file, it's a GitHub display error."
brandtbucher,"Ignore this file, it's a GitHub display error."
brandtbucher,"Ignore this file, it's a GitHub display error."
brandtbucher,"Ignore this file, it's a GitHub display error."
vhquang,I think this can be improved as `tp.Optional[tp.Tuple[int]]` to be more explicit.
vhquang,Would this work if `source_portfolio_id` is `'all'`?
vhquang,Would this work with `portfolio_ids` is `'all'`?
vhquang,"I am curious, and I haven't used this Postgres adapter `DateRange` before. Will the `None` return a lazy list of dates, or a pair of `(run_date, DATE_MAX)`?"
vhquang,+1 for the `PortfolioMap` type alias!
vhquang,"The `portfolio_map['id']` in your new implementation is a series of `int`. However, the typehint in your `Holdings.build_holdings_attr` is still set as single `int`."
vhquang,"This function is a bit too abstract for me to get a good understand of what it is trying to do. For example, what is the usage for `is_restatement`, and why it can't be part of other configs?  Besides, the number of configs that are passed into this function, and the information they hold, makes me feel bit hard to understand. Maybe I am not familiar with the context of this code base, but if this function is at appropriate level of abstraction, then some docstring on the purpose and usage of the params would help. "
vhquang,"Should the condition of `not portfolio_ids` the skipped earlier? If there is no ids, can this function, or at least this loop can be skipped?"
gdevanla,"Yeah, this change was temporary for this module. I am currently handling it in another branch."
gdevanla,None just means that the upper limit is not set.
gdevanla,"I update the type hint. Actually, the porfolio_map here is itself a series."
gdevanla,Sure. I will add some doc strings. This is a inner function(helper function). 
flexatone,"Can `v` be greater than 1.0? If not, perhaps we should raise here."
flexatone,"Here and elsewhere: can't we just partial `size_definition` here, rather than partialing `assign_rafi_weight`? We may not need `assign_rafi_weight` at all."
nekobon,That makes sense. I will take a look and update
nekobon,Thank you @flexatone! Your made the code look much better
flexatone,"Actually, if `v` is NaN I think None is the right result: recall that Ted said he wanted cos that have no RAFI score to have no size, not `micro`."
ForeverWintr,"Can you wrap this line? as per our [style guide](http://centcon01-prd-i:5009/Investment+ManagementInvestment+Systems+Manual/style_python.html#lines-indents), we try to limit line length to 80 characters. "
ForeverWintr,"It might be nice to be a bit more explicit here, by asserting that a specific product is/isn't in the results. If this check fails in future, it could be hard to figure out what the result used to be. "
gettodaze,"Ah, good idea!"
gettodaze,"@ForeverWintr I wrapped the line and then it took ~150 lines, so could I maybe just leave it as a one liner? This is mostly just a data dump, the internals of which I'm not thinking people care about. Did you have any specific other reason to wrap it?"
gettodaze,Why do you set the type to `datetime64[D]` and then to `object`?
chaburkland,"I need Python date objects (impl in the base class excepts this). Panda's can deliver the results of the `read_excel` with a dtype = `datetime64[ns]`, which is what's causing the bug.  Afaik, there isn't a way to go straight from `datetime64[ns]` -> `date` objects, thus I need these two steps."
flexatone,"If go straight to `object` you will probably get a `datetime` object, so we go to dt64[D] first, then `object`, to insure we get a `date` object. "
gettodaze,"Ah, I see! That's what I was thinking might be the case. Nice trick!"
johnjhawk,should we put not stream.check first as I would think it's a faster check?
johnjhawk,a simple assert message would be good here
chaburkland,"@brandtbucher If I understand this correctly, we want to run pytest in the same process (using pytest.main) _if_ the reason it's being called is to collect test names.  Otherwise, you will run it in a subprocess to avoid messing up code coverage?"
brandtbucher,"The `isinstance` needs to be first, since only `MarkChecker` has a `check` attribute."
brandtbucher,"Almost. The *only* time we subprocess is if we're collecting coverage measurements. All other times, we run in-process (sometimes we need to collect test names or durations, but the rest of the time it doesn't matter either way)."
brandtbucher,"```suggestion         log = [f'db_fp: {db_fp}', f'last id {last_id}'] ```"
brandtbucher,```suggestion ```
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,```suggestion     return db_api.get_buildstats_bundle(**kwargs) ```
brandtbucher,"```suggestion     def _is_universe(*, product_id: str, did: str, **kwargs: object) -> bool:         if did and did.startswith('psuc'):             return True ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,This is a bit long... maybe wrap it?
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,"```suggestion             resolved_strategy_name: tp.Optional[str]=None, ```"
brandtbucher,```suggestion ```
brandtbucher,Why?
brandtbucher,```suggestion ```
brandtbucher,"```suggestion     def get_buildstats_frame_from_buildstats(cls, buildstats: tp.Iterable[BuildStat], *, explode: bool) -> sf.Frame: ```"
brandtbucher,"```suggestion             remove_dist: bool=False, ```"
brandtbucher,"```suggestion             remove_dist: bool=False, ```"
brandtbucher,"```suggestion         with open(temp_path, 'a+') as f:             f.write('\t'.join(named_tup._fields) + '\n')             for i, named_tup in enumerate(named_tups):                 print(f'{i}. {named_tup}')                 f.write('\t'.join(str(x) for x in named_tup) + '\n') ```"
brandtbucher,```suggestion     categories: tp.Optional[tp.Iterable[str]] = None     tlts: tp.Optional[tp.Iterable[str]] = None     graph_type: str = ''     delivered: tp.Optional[bool] = None ```
brandtbucher,```suggestion     def bin_by_year(graphsettings: GraphSettings) -> GraphSettings:         return graphsettings._replace(columns=Table_Bins.BUILD_YEAR) ```
brandtbucher,"```suggestion             categories=[""Production Build Candidate"", ""Production Build Deliverable""], ```"
brandtbucher,"```suggestion             categories=[""Production Build Candidate"", ""Production Build Deliverable""], ```"
brandtbucher,```suggestion ```
brandtbucher,"```suggestion     def color_factory(cls, cmap_str: tp.Optional[str] = 'tab20', n_colors: tp.Optional[int] = None, ```"
brandtbucher,What is this doing?
brandtbucher,"```suggestion             exploded: tp.Optional[bool] = None,             categories: tp.Optional[tp.Iterable[str]] = None,             tlts: tp.Optional[tp.Iterable[str]] = None,             prefix: str = '', ```"
brandtbucher,```suggestion         prefix = f'{prefix}_' if prefix else '' ```
brandtbucher,This part is *really* hard to follow... I think it deserves to be more than two lines.
brandtbucher,"```suggestion             savepath: tp.Optional[str] = None,             show: bool = False,             ax: tp.Optional[plt.Axes] = None, ```"
brandtbucher,```suggestion         labels = frame.index ```
brandtbucher,"```suggestion                 bottom=bottoms.iloc[i, :].values, ```"
brandtbucher,Maybe a docstring here to explain what this is doing? I'm having a lot of trouble following.
brandtbucher,"```suggestion             categories: tp.Optional[tp.Iterable[str]] = None,             tlts: tp.Optional[tp.Iterable[str]] = None,             delivered: tp.Optional[bool] = None,             **kwargs, ```"
brandtbucher,There's a lot going on here. Maybe break it up?
brandtbucher,"```suggestion         assert buildstats_frame is not None, f""Passed {settings.exploded=} but frame is None."" ```"
brandtbucher,"```suggestion             save: bool = True, ```"
brandtbucher,"```suggestion     assert bool(options.read_exploded) == bool(options.read_unexploded), 'Please supply both readpaths or neither' ```"
brandtbucher,"```suggestion         conn=None, ```"
brandtbucher,"```suggestion         conn=None, ```"
brandtbucher,"```suggestion         group_labels: tp.Optional[tp.Iterable[str]] = None, ```"
brandtbucher,```suggestion     group_labels = group_labels or sorted(set().union(*(x.series_dict for x in sample_buildstats))) ```
brandtbucher,"```suggestion         'series': [{'name': k, 'data': v} for k, v in groups.items()], ```"
brandtbucher,```suggestion ```
brandtbucher,"```suggestion             delay_seconds: int = SLOW_DELAY_HOURS * 60 * 60,             start_date: tp.Optional[datetime.date]=None,             end_date: tp.Optional[datetime.date] = None,             fetch_dist: bool = True,             remove_dist: bool = False,             settings: tp.Optional[tp.List[build_stats.GraphSettings]] = None, ```"
brandtbucher,```suggestion             if last_insert_time and ( ```
brandtbucher,```suggestion ```
brandtbucher,```suggestion ```
brandtbucher,```suggestion ```
brandtbucher,```suggestion ```
gettodaze,I'd never realized that was legal until now! Thanks for the tip!
gettodaze,"I didn't realize I forgot typehints for this one! @brandtbucher is there a reason you put `**kwargs` as type `object` instead of type `tp.Dict[str, tp.Any]`?"
gettodaze,Thanks! I didn't realize best practice was to leave a trailing comma. I added them everywhere I could find.
gettodaze,"The idea is to run buildstats for a date range, so we have to know the dates of each did. I store all the dates in the frame here so we don't have to re-parse them later on."
gettodaze,"So each element in the `named_tups` generator can take a while to calculate, so my idea here is to only open the file while when we're ready to write. Does that sound okay? I added a comment for that."
gettodaze,"Ah, I had gotten rid of spaces between `=` and my default args in my functions, and accidentally got rid of them here too. Thanks!"
gettodaze,"Oh, see this is where Chris had said that I am not supposed to have a space. Maybe that's just Chris's recommendation and not PEP 8?"
flexatone,"Nope: between type hints and default values, we want those spaces; its when we are passing kwargs that we do not have a spaces around the equals sign."
gettodaze,"I added some comments: ```         if not cmap_str: # I prefer using 'tab20', but with cmap_str=None, the typical colors used for teamalloc graphs will be used here as well.             colors_ordered = list(MemberBundlePlot._get_colors_ordered(plt, n_colors))             colors = []             i = 0             while colors_ordered:                 colors.append(colors_ordered.pop(i % len(colors_ordered))) # seperates similar colors of the spectrum so we get distinct seperation between categories on the stacked bar graph                 i += 5#int(len(colors_ordered) / 4) # optionally, dynamically assign the number of colors to skip between colors_ordered ```"
gettodaze,Ah! I see! Thanks for seeing this! I will go ahead and change those then.
gettodaze,"Ah, I like that."
gettodaze,"Oh whoops! Yes, I can see why that's hard to follow."
gettodaze,"Funny side note: I had purposely squeezed it into one line for the sake of readability, although in retrospect I don't know why I had thought this was easier to read."
gettodaze,"Added! That's a really good point! I bet if even I wanted to edit this a few years later, I would forget what is happening."
gettodaze,@brandtbucher Should I also have the comma after `kwargs`?
gettodaze,Oh wow! I had thought that was a 3.9 feature!
gettodaze,"Oh, nice!"
gettodaze,Oh wow! Somehow I had thought I couldn't unpack generators.
brandtbucher,"You only need to type the values, since it's obviously a `dict` with `str` keys. (Similarly, you don't type `*args` as `*args: typing.Tuple[<whatever>, ...]`, just `*args: <whatever>`.  `object` and `typing.Any` are a bit tricky. `typing.Any` should be used for things you don't know how to type, or can't be understood by the type checker... it tells the checker to just ignore anything you do with it, so it's the *most permissive* type.  `object` is the *least* permissive type, so it means that you're confident that truly *any* object _will_ work there. This is the type to use if you are either ignoring the object, or are doing very primitive operations on it supported by ""all"" objects (like `str(o)`, `id(o)`, `o is ...`, `o == ...`, etc.). It keeps you from doing things that only *some* objects support (while `typing.Any` won't complain)."
brandtbucher,"Well, I mean, why change from `cls` to `BuildStats`?"
brandtbucher,"Gotcha. For what it's worth, the recommended style is:  `parameter=default`  for untyped parameters and  `parameter: type = default`  for typed parameters."
brandtbucher,"Hm, what about something like this? I find it much easier to follow the flow of how this thing is built. I'm also more confident about how the spacing will turn out. 🙂   ```suggestion         parts = []         if prefix:             parts.append(prefix)         if exploded is not None:             parts.append('exploded' if exploded else 'unexploded')         parts.extend(('count', 'over', columns, 'per', *rows))         if categories or tlts:             parts.append('only')             if categories:                 parts.extend(categories)             if tlts:                 parts.extend(tlts)         return ' '.join(parts) ```"
brandtbucher,"Does this make a pattern, or is it sort of random? Just curious how you arrived at this way of shuffling them!"
brandtbucher,"So when you type `**kwargs: tp.Dict[str, tp.Any]`, what you're *really* saying is that `kwargs` will be a `tp.Dict[str, tp.Dict[str, tp.Any]]`. Which I think is incorrect. 🙂 "
gettodaze,Oh wow! That's very clear to follow!! I have been ugly writing `fstring` titles like what I wrote for years and I can't believe I've never tried doing it like this! It's very intuitive.
gettodaze,"Ah, I see! So if I was expecting some `kwargs` with string values, I would say `**kwargs: str` and the type checker already knows that I am expecting my `kwargs` to be a dictionary with `str` keys and `str` values. So `**kwargs: object` means `kwargs` will be a dictionary with `object` values, which is always true."
gettodaze,Oh! I see! That was accidental; I will change that back.
brandtbucher,Yep!
gettodaze,"Oh, haha. It's copied from inside `teamalloc.core.member.MemberBundlePlot.get_mo_aggregate_plot`: ```         colors_ordered = list(cls._get_colors_ordered(plt, len(topic_axis) - len(colors_fixed)))         colors = []         i = 0         while colors_ordered:             colors.append(colors_ordered.pop(i % len(colors_ordered)))             i += 2 #int(len(colors_ordered) / 4) ``` It takes a spectrum of gradual color changes and shuffles them nonrandomly so that similar colors aren't next to each other (taking every other while there are still colors left). But mine has a lot more colors so I took every 5th while there were colors left."
brandtbucher,"```suggestion             return True, None, [f'db_fp: {db_fp}'] ```"
flexatone,earnings per share?
flexatone,"Are you sure you want to inherit from last year, as opposed to inheriting from a more general methodology-level spec?"
flexatone,"This should not be study parameter, right?"
johnjhawk,"epsilon, I'll change it since it's not clear"
johnjhawk,"No, I'm not , but I do like this method when it comes to specs. - It's easy to see what changed this year - There would be a lot of code to copy (in the same module) if we were to inherit from a more general source.   I slightly prefer this, but if you feel strongly, I'll change it if you don't , I'll get Yu's thoughts. "
johnjhawk,I agree. I'll move to the date spec. I put them in the study as things were more fluid.  
flexatone,"It looks like this line is duplicated below, on line 137, so maybe you can just do the following. Also: you probably should return `date` objects, not `datetime` objects.  ```python if definition == 'DATA_DATE' and '/' in value:     return datetime.datetime.strptime(value, '%m/%d/%Y').date() return datetime.datetime.strptime(value, '%Y%m%d').date() ```"
flexatone,This line is fine now; but maybe the `cls.FIELD_DEFS_BASE` can be defined originally as a tuple (which is better as it is immutable).
nekobon,What is the name field?
brandtbucher,"Very first line of the platform. I added this check because we may remember to update the filename (from `99999999` to `YYYYMMDD`), but we could forget to change the actual *name* of the platform."
brandtbucher,"This is the ""name"" field."
nekobon,Thanks!
flexatone,You may not need to keep this.
nekobon,"typo? ""factse_"""
nekobon,"Related to the point Brandt recently mentioned on slack, should this be `str(e)`?"
nekobon,:+1: 
nekobon,"If None and 0 means the same, would it be better for `get_portfolio_maps` to use only one of them (None or 0, not both)?"
nekobon,"If these lines (63-70) don't raise StopIteration, how about to move them to `else`?"
nekobon,(minor point) how about to use `tp.List[rw.ParserConfig]?`
nekobon,"How about to map to different column names first, so that you can make a new `data` only with the final data_date and returns instead of assigning over?"
gdevanla,"But, why are just logging here and now holding on to any reference. I this think it is equivalent to calling str."
gdevanla,"Agreed, the .size=0 check is redundant!"
gdevanla,That's a nice trick! Never used it like that. Thanks!
vhquang,This string `/home/{{ user_name }}/onedrive_src/onedrive-{{ onedrive_version }}` is referenced multiple times. I think we can improve this script by register it as variable for this task.
vhquang,"Is this step necessary? If we do this when uninstalling `onedrive` it may remove the dependencies that could affect our system (ex: `libcurl4-openssl`, `curl`).  I would prefer leave them there. The downsize is that they take disk space. But I think they are minimal."
ForeverWintr,"True, it's probably not necessary. I used this script to 'reset' my system in order to test the install, but now I can remove that step."
ForeverWintr,"Hmm, I suppose You're right. This module is the first time I experimented with setting variables; I guess I can make this a variable too."
gettodaze,"I don't exactly know what's happening here, but it looks strange that the `prior_yr` starts at `-23 months` and ends at `+11 months`. Is this intended? Or maybe one of the `+` should be a `-`?"
vhquang,"In other builds (grafi, psub), I see people let PARC parameters take priority, ie: ``` if ns.parc_id:     return 'foo', f'foo_{ns.parc_id}' return 'foo', f'foo_{ns.date}' ``` Is there a reason we reverse that priority for this change?"
nekobon,"Thanks! Yes, this was one of the issues! "
nekobon,"If I remember correctly, they are mutually exclusive. So when there is date there is no parc id, and vice versa. "
chaburkland,Good change
ForeverWintr,"You can move some of this into the argument parser itself. For example, `add_argument` takes a `type` argument, which could be `du.str_to_year_mo`. It also takes `default`, which could be `two_years_ago` or `cur_yearmo`.  "
ForeverWintr,"I don't think you need these `__main__` mocks, do you?"
ForeverWintr,"I'm pretty sure this `setUp` is unneeded (unless `RATestCase.setUp` does something you're trying to disable, but IIRC it doesn't)"
gettodaze,"Oh yeah, I just like having it if I need it, but it's cleaner to remove things I don't use."
gettodaze,Wow! Thanks for the info! That's really cool.
gettodaze,"Oh, it appears I do not!"
gettodaze,"I'm guessing this is fine, but I would've expected the details to be `""No portfolios associated with holidays""` or the variable to be something like `no_closure_portfolios_due_to_holiday`."
gdevanla,Makes sense. Thanks. I changed it to say 'holiday'
flexatone,"Given the issue that Alan had the other day, I am starting to think that mutables as class attrs should be avoided. I know we do it sometimes to use the list in a `loc` selection or similar, but maybe it is better to just convert to a list on the fly, when we need it."
flexatone,This is commented out? Maybe ready to be removed?
flexatone,You can use the new `via_dt.strpdate` for this!
flexatone,A comment that can be removed?
flexatone," A `dict` is returned, not a `ComparisonSummary`."
flexatone,Valuable comment!
flexatone,Can we get a bit more test coverage here?
gdevanla,"Good point. It just seems a bit tedious to use list() everywhere I use this list, but immutability at this level is good."
gdevanla,Yes.  I will be adding them. I wanted to get this version out to get some data to work on. This report will be little more iterations and will add a test soon.
gdevanla,"Its. It is a type alias for what the dict holds  ``` ComparisonSummary = tp.Dict[str, tp.Union[sf.Frame, compare_frames.Comparison]]                                                                                                                                      ```"
gdevanla,Yeah. I will be fine tuning in as I turn on the returns per vendor. For now I am leaving it there as a placeholder.
brandtbucher,"```suggestion     return type(f'{measures.__name__}NegativeToMissing', (measures, MeasuresAdapter), attrs) ```"
brandtbucher,A bit confused by this. Why are they the same?  Maybe this instead?  ```suggestion         constrained_pn.__name__ = fpn._repr(measure)         constrained_pn.__qualname__ = f'NegativeToMissing.{measures.__name__}.{constrained_pn.__name__}' ```
brandtbucher,"I think you're using this incorrectly (it's meant to be used with instances, like a cross between a dictionary and a named tuple):  ```py >>> ns = SimpleNamespace()                                                                                                                                                                                                                     >>> ns                                                                                                                                                                                                                                         namespace() >>> ns.x = 'y'                                                                                                                                                                                                                                 >>> ns                                                                                                                                                                                                                                         namespace(x='y') ```  I've never seen it used like this before. For a namespace, doesn't a class definition just work here?  ```suggestion class no_log: ```"
brandtbucher,Maybe move this to module level? I had to check to make sure we weren't capturing some local variable or something.
brandtbucher,I'm not sure how omitting `t` in this branch is helpful?
brandtbucher,You can probably leave this docstring here. Maybe just fix the grammar.  
chaburkland,"I see. I think the intent was to single the only purpose of this class was to act as a namespace, although I understand that's not necessary."
brandtbucher,No longer needed:  ```suggestion ```
chaburkland,"The reason is because the vast majority of RAPC pns run under 1 sec, and it's unhelpful information to log something like this: `timestamp | get_measure 0:00:00:00031`  This branch will omit the runtime of the PN when it's under a second, and show it when it's longer."
vhquang,"I think one of the main feature of this function, is to cache the result, presumably for performance improvement. Can the function name reflect this improvement?"
vhquang,"I see no harm, but just curious, why is the need for renaming the frame? What would happen if we return the frame with no name, or original name?"
vhquang,What is the benefit of saving and loading from zip pickle?
vhquang,"Since we are using `Protocol` here. I think it would be good to add a unittest to handle type checking as well. But I am not sure if its usefulness for `augur`. Feel free to skip this suggestion, if you don't see appealing benefits."
chaburkland,"It serves no real purpose other than having the result frame name match the attribute. So when the user does something like `my_measures_instance.net_income` the frame they get back will also have `net income` as it's name.  I think it's also important, since all the frames returned by `lookup` (for the same instance) will have identical columns/indices, and so it can be difficult to keep track of which frame is which."
chaburkland,"Faster init speeds! Normally, this whole method was disk memoized, and it took ~10 seconds to load in the result, which used to be a dictionary of str keys and frame values (around ~80 of them).  This was becoming a bit of a bottleneck for Yu, and so we wanted to speed it up. By using a bus, it allows for init to be nearly instant, and only loads in frames to memory when the user wants them."
chaburkland,I'm not sure how to test that! I'm wondering if we could zoom about it sometime tomorrow and you can show me what you're referring to.
nekobon,:+1: 
johnjhawk,"can we omit the ""old_and_new"" part of this module? compare_returns.py relays the same information?"
johnjhawk,"we should setup an outlook folders for emails like this. so you can simply email the folder and forward to your local email if needed.  so instead of: prod_mode=('devanla@rallc.com',) it would be: prod_mode=('name_of_outlook_folder@rallc.com',)"
johnjhawk,These codes feel a bit like magic variables. It may be worth  defining them outside of the string and using an fstring to populate. The name of the variable and a comment at initialization would help explain why we're using them.
gdevanla,"Sure. I will leave a comment.  These script will be used just once for migration.  But, I will definitely add a note explaining why there are there."
gdevanla,Yes. That file is part of a different PR. I will make that change.
gdevanla,"Umm.. I don't know. That ship has sailed. We could revisit that approach again, maybe."
flexatone,"Not that important, but I would raise `NotImplementedError` here"
flexatone,type hints for this function?
flexatone,Maybe just: ```suggestion             if new_fr.data_date.month != prev_fr.data_date.month:                 # first record of this month                 return return_daily             return (return_daily + 1) * (prev_mtd + 1) - 1 ```
flexatone,`NotImplementedError`?
flexatone,This is a `@staticmethod`
flexatone,This is a `@staticmethod`
flexatone,Also a `@staticmethod`
flexatone,This is a `@staticmethod`?
flexatone,This is a `@staticmethod`?
gdevanla,"I agree that `_yield_to_return_daily` and `yield_to_return_monthly` can be `static_method`s, but I think once a method calls into other staticmethod/classmethods of the same class, then that method can be a `classmethod`.    In this case, this method calls into the other static methods in this class (and possibly could) call into other methods in this class.  So, my marker has been, if a method only has inbound calls, the `staticmethod` decorator can be used to namespace that method inside a certain class. But, once this method starts having `outbound` calls to other methods in the class, that I think it should just be a `classmethod`.  Due to all these complications, I just resort to using `classmethod` and use `staticmethod` less frequently."
gdevanla,Do you still need this comment here?
gdevanla,You probably are going to fix this later.
gdevanla,Is this supposed to be used somewhere?
gdevanla,"For consistency, should we just use `include_index` here?"
gdevanla,Type hint
gdevanla,Is this TODO still valid?
gdevanla,Is this function missing an implementation?
gdevanla,Is this still valid?
gdevanla,Can we move this import out?
gdevanla,Stray commit?
gdevanla,"Type hints, maybe."
gdevanla,Stray commit?
nekobon,"This is actually a stray merge commit that was introduced on default (it's still there on default) which I've mentioned on slack in October (you can search for ""db_test_creation""). I think I accidentally removed it on my branch. "
nekobon,"I think it's fine to use any one of `sum_source`, `order_source`, and `include_index`, because they all have the same index. `sum_source` is generally the most meaningful input, so I used it."
nekobon,"Sorry, it was still wip. I was testing back and forth to find out what was causing the warnings."
nekobon,"Yes, pu overrides are not yet supported in the actual GEIU/PSU/PSUC. We just made the architecture around to get the end-user interface backwards compatible in the future."
nekobon,Actually it was already imported as global :joy: 
nekobon,I remembered adding it but I couldn't find it on default :joy: 
nekobon,"I didn't want to add back lines indicating merge conflict manually, so I ""resolved"" this by changing it to  ``` cd kozuchi/db_setup/etl. This folder has the required alembic.ini and `etl` folder. `alembic -x connection_spec=ISDBLocal upgrade head --sql` ``` Please update if this doesn't look good!"
flexatone,"Rather than define this here, can you instead use `PSUBenchmark.SIZE_FIELD`?"
flexatone,"Elsewhere we have been using ""202101""|, even thought these will not be effective until 202103. Maybe just `psu_benchmark_2021` is fine."
flexatone,"You probably do not need these, and sometimes better not to set them, but fine to set them if they were needed."
johnjhawk,"I've gotten in the habit of adding them when there is no parc ticket associated with a build, because portcullis uses these fields. To that point portcullis probably won't be using this build, but if it does, I won't have to rebuild."
johnjhawk,"perfect, will do!"
nekobon,"Is there actually repeated keyword, or is it just pylint's misunderstanding?"
ForeverWintr,"It was Pylint's misunderstanding. I provide `dids` explicitly in this function call, but Pylint doesn't notice the fact that I pop `dids` from `input_params` on line 165 before star expanding it. However, looking at this again today I see I can just define `dids` outside of `input_params`, which is a small enough change that I think it's worth it to appease Pylint."
vhquang,Agreed that it is a nice feature to have. Thanks for the explanation.
vhquang,"Since we are not (yet) running static type check as part of our quality check, I was thinking about a test like this in our unittest to catch it: ``` def test_protocol():     assert isinstance(MeasuresBase, HasBusProtocol) ``` But then I realize `isinstance` check would require `@typing.runtime_checkable`, which may not worth it. Let skip my comment :)"
gettodaze,"Can I just ask what this is doing? Is this a mirror of historical `sample_slow` from the centcon db as a JSON file in the static server stored at `../disque/source_count/BACKFILL.json`? Seems pretty cool, although I wonder if maybe having `..` in the `fp_components` is a sign that maybe its reaching somewhere that wasn't intended to be supported by `SSFStaticMirror.get_or_fetch_fp`."
gettodaze,"```suggestion     # Fetch any backfilled data:     # from RALib.core.static import SSFDisqueMirror      backfill = SSFDisqueMirror.get_or_fetch_fp(          fp_components=('source_count', 'BACKFILL.json')      ) ``` Does this work?"
gettodaze,"Oh, I see. The logic to add from `BACKFILL.json` was in the previous version too. So is it that `BACKFILL.json` contains data that just precedes the centcon db?"
brandtbucher,"Yep, just everything before we added daily source count jobs.  And thanks! Didn't know about `SSFDisqueMirror`, so now we don't need the ugly parent-directory hack."
vhquang,"@brandtbucher This is an alias hack, to let SSH know which private key it needs to use. The `fsqf. github.com` domain does not exist, and will be translated to `github.com` when we establish SSH connection. The caveat is that docbot would need to use `git@fsqf.github.com:ResearchAffiliates/fsqf.git` instead of `git@github.com:ResearchAffiliates/fsqf.git` when `git clone`. Would that be an issue for docbot?"
brandtbucher,"Nope, not an issue!"
vhquang,Would you mind review this PR as well? As docbot is the primary use case for this change.
vhquang,"Except for this carve, all other carves are copied from rmc 2020."
nekobon,I think this move change the original `carve` class's spec. I think it is a lot safer to avoid mutating carves and specs.
nekobon,"Can we put an explicit definition of carves, instead of changing them dynamically?"
nekobon,Let's not mutate self after creation. This might change original references unexpectedly.
chaburkland,What is this for? I've seen this a few places and I'm not sure why it's here 
vhquang,"It is for type hinting. There are several contexts for the term `spec` in RAPC: CascadeSpec, include_spec, gen_spec... So I try to hint which kind of spec it is, when I use `spec`. And if the import is only used for typehint, I keep them optionally with `TYPE_CHECKING` so it is only imported when run with type checker."
vhquang,"@nekobon For RMC, I don't know if it is better to extend the previous spec, or fully specify all the specs even if their min_weight do not change. Having `rmm` 2021 imports and references `rmm` 2020 feels weird, and makes me wonder if that is a right thing to do. Let me know if you have any suggestion."
nekobon,How about to put the latest version in `include_rms` and keep older versions where they are (2016-2020)?
vhquang,"I just want to double-check if we indeed want to use `iRafiFactors`. When I worked with John H. on PSUB, he use `factors.Rafi2021Factors` and told me Rafi2021Factors includes IRafi and more. "
nekobon,"No, we don't use IRafiFactors. As we saw in the grafi 2021 spec, what we need is  ```     rafi_factor = factors.Rafi2021Factors ```"
nekobon,Maybe you forgot to remove this
nekobon,I don't think they are used
nekobon,"When you have some time later, can you please refactor this and put them in include_rms, too? This update would require you to find the old values and put them in old `rms_gen.py`.  No rush at all, and please aim to do it before February **2022**!"
vhquang,"I left it there because I don't know if we would use 2020-03 as validation test for 2021 spec. But I forgot to check with you about that assumption. If we don't use spec to build historical builds, I will remove this code. Do you think it is better if I raise `NotImplementedError` if we use this spec to build anything `< '202101'`?"
vhquang,"Good catch, thank you!"
vhquang,"I will update RMS on the another PR, since I would need your review on that as well. And I think it would be easier to just focus on that instead of mixing changes with RMC/RME/RMM."
johnjhawk,"I've been calling these * _202103 since they don't go active until March. I think that's the way we always used to do it, but Chris asked me why I was using *03 and now I see that you're not using it. I guess I should change and conform to the year only label. "
johnjhawk,It doesn't look like diversity regression needed any special handling for country group size either as it's not using this definition. 
nekobon,It's used lower in the methodology (outside this diff)
nekobon,"Interesting! I've always used only year here, following the name of the folder"
chaburkland,What is the difference between  `from RALib.core.top_level_tool import RAPC as env` and `from RALib.core.top_level_tool import RALib as env`  ?
chaburkland,"I know I mentioned this in a comment above, but it's worth asking again since both imports are done here.  It seems like the old code was getting the same `env` object in both places, but in your replacement one imports `RAPC` and one imports `RALib`."
chaburkland,Do you know why `RAPC.core` doesn't have a `top_level_tool` module?
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,Did you mean to add this?
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,"I checked, and this import isn't used in this file."
chaburkland,```suggestion ```
chaburkland,"I checked, and this import isn't used in this file"
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,This whole module should be removed since it isn't doing anything.
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
chaburkland,```suggestion ```
flexatone,"Which TLT you get determines a few things, such as the subdirectory that will be created / used in `invsys_temp`, or in some case what input data SVN repo is used. But in general, they are very similar."
flexatone,"Ah, but I see what you are saying; in a number of places I replace RAPC with RALib TLTs... I will review those and fix."
flexatone,"Yes, you a right; mistaken refactoring, I will fix."
flexatone,We only have on TLT module for all TLTs!
flexatone,Good catch.
flexatone,fixed.
flexatone,"yes, it is needed in the methodology. I think this replaced a function-level import."
flexatone,"removed, thanks!"
flexatone,"fixed, thanks."
flexatone,"fixed, thanks."
flexatone,agreed!
chaburkland,I'm curious why you didn't remove all of these commented-out imports?
flexatone,It was just an intermediate step in my refactoring; they are all gone now!
gettodaze,"I see `for_returns=True` in `     pm = PortfolioMapWriter.get_portfolio_maps(connection_spec=conn_spec, for_returns=True) ` in `kozuchi/apps/holdings/returns_migration.py`, but this line here is still intended to be commented out, correct?"
gettodaze,There's still a TODO here.
gettodaze,I believe you can declare the type separately from defining it (although maybe you prefer to declare and define at the same time): ``` portfolio_maps: tp.Iterable[pmm.PortfolioMap]  if A:     portfolio_maps = ... else     portfolio_maps = ... ```
gettodaze,"Earlier in `compare_old_and_new.py` you had `for_pro_forma=(True if is_pro_forma else None),`. Just making sure that you wanted those two to be different."
gettodaze,Same here.
gdevanla,"Yes, it was intended to be commented out until another branch is merged. I have remove that statement on this branch for now. "
gdevanla,Yes. We plan to keep this for sometime.
gdevanla,"Yeah. I am just trying to keep it independent of each other. But, I will consider you suggestion. Thanks!"
gdevanla,@gettodaze Can you elaborate more on this. What did you mean by same here?
gettodaze,"Earlier in `compare_old_and_new.py` you had `for_pro_forma=(True if is_pro_forma else None),`. Just making sure that you wanted those two to be different."
gdevanla,"Oh, I see. Thanks. Yeah `is_pro_forma` is a boolean. But, it makes sense to make it consistent."
flexatone,"Interesting: if we were to run thus on our local system for a local setup, it would still work. So this only produces a different result when `user_name` is not the same as the current user, right?"
brandtbucher,"Not quite. Currently, it searches for the `python_setup.yml` task inside of the worker's `rapc` repo (because the path is relative, not absolute). When this playbook is run, `invsys_root_dir` is set to the `sandbox` repo, so now it looks there instead.  Note that we don't ever run `repo_update` ourselves (disque is the only app that uses it)... but this would still work correctly if we did."
flexatone,"Ah, I see: what are leveraging is that `invsys_root_dir` is different, not `user_name`: makes sense!"
johnjhawk,can file_paths legitimately be None?  if so: tp.Optional if not: maybe raise if bothe shares and weights are None?
johnjhawk,are these kwargs?
johnjhawk,could this return the dict or kwargs? then tests or observers can check the values.  I feel that returning True gives me a false sense of security that everything is good.
johnjhawk,"since imports are singletons, is the lru_cache just saving us from creating a dict object?  Is that worth the lru_cache? "
johnjhawk,should this be a setUp() so it's only called once. I don't think that you're mutating it.
gdevanla,This is more for reporting. Leaving it as empty list is fine. Thanks for pointing that out though.
gdevanla,"No. But, I have `--dry-run` flag that I need to test. Hence, I pack here to catch any errors I might come across."
gdevanla,Good call. I will use `call_once`.
gdevanla,"Since, it is not needed by all test_methods here I just am using it as helper function."
ForeverWintr,This is strange... I see we were repeating the environment import in each function. Shall we just move the new import to the top of the module?
ForeverWintr,This seems unrelated to env; Do you intend it to be part of this PR?
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included. "
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
ForeverWintr,"Another non-env change. I'll flag these with comments, just to make sure they're deliberately included."
gdevanla,nitpick: Can this be CAPITAL case and also a tuple so that it is immutable.
gdevanla,nitpick: Can this be CAPITAL case and also a tuple so that it is immutable.
gdevanla,"Can we use `itertools.product` for this?  ```  carve_regions = tuple(         CarveSpec(region='DevEm',                   carve_product_id=rm_sleeve.SleeveSixRegions.get_sleeve_carve_product_id('rms', sleeve, cg, size),                   carve_rule=(lambda row, carve, cg=cg: row[rm_base.CG_FIELD] == cg),                   factor_name=sleeve + '_' + size)         for cg, sleeve, size in itertools.product(cg_list, _large_factor_fields, (rm_base.LARGE_FIELD, rm_base.SMALL_FIELD))) ```"
gdevanla,nitpick: unused variable
gdevanla,Same here. Tuples would be preferable.
gdevanla,Should we also have this country list as spec_param. Maybe it does not make sense. At least as a class attribute might help is discoverability.  I also notice this list used across different rms specs.
gdevanla,Is this still a question?
vhquang,"The list items here go into the carve region rule, which is case sensitive. I think changing this convention will cause impact. But change it to a tuple is a good idea."
vhquang,"I don't follow this suggestion, can you clarify? The `large_factor_fields` is used in the inherit `2021/rmm_gen`, which then is used to build sleeve."
vhquang,+1 this is a great suggestion. Thank you!
vhquang,"In this case, it is intentional. The list could change every year, and have it reference to a variable can make it harder to see what is changed.  But more relevant, the change in this file is to ""deprecate"" the spec from 2018. The goal is to reduce to connections it has to our current 2021 spec, so that the 2018 can be left untouched in the future.   Your suggestion would apply to the `include_rms`. I would need to check if this country list is designed to share, or to internal to the spec."
vhquang,"It is a reminder for me, to check with Yu about the mean of this attribute, since I don't know how it is different from carve_regions. Thanks for catching this. I will move this note to somewhere else."
flexatone,"I see why you did this, but perhaps better would be to improve the error in `find_carve_product_fn`, or which was the innermost function that was not reporting the missing file, only the directory that contained that file."
flexatone,"I will leave this now as all my testing is complete, but it should be moved to module level, agreed."
flexatone,```suggestion     is_production: bool = True ```
flexatone,Should this raise?
flexatone,"Do we need to support `VcsUtil.get_changeset_id()` here? Why not just have the caller provide a changeset, as is done in on line 28?"
flexatone,```suggestion         ) -> None: ``` Good to make a clear that the only action this function takes is raising.
flexatone,It does not appear that the presence or absence of the `conn_spec.is_production` flag is being tested here.
gdevanla,"No. We only raise for production databases. For all other databases, we get authenticated for all repo states."
gdevanla,It is just a convenience since most of the  time we are working on current changeset.
gdevanla,Good point. I should check for the initial assumption in this case.
chaburkland,"I'm wondering if these strings should be symbolic constants, seeing as they're popping up in a few different places."
chaburkland,This parameter is unused.
chaburkland,"It's not immediately obvious to me what a better way would be, but passing around attrs that are eventually used by `getattr` doesn't feel right.  It's likely you thought about this already and decided it was the best/most appropriate way to solve this requirement given the complexity, but from my perspective this pattern is something I usually try to avoid."
chaburkland,```suggestion ```
ForeverWintr,"Yeah, I agree this is awkward, and I may revisit it if I can think of a better approach. This was inspired in part by a similar pattern in [requests](https://github.com/psf/requests/blob/master/requests/api.py#L76), where multiple public facing methods call a single lower lever method with a hardcoded string."
ForeverWintr,"Good feedback, thanks. I've added symbolic constants for these. "
vhquang,Nice idea of type hint! :+1: 
vhquang,"This feels weird to me. A look on cvxpy doc (https://cvxopt.org/install/) shows that their conda package is already linked to OpenBLAS for Linux, and MKL on Windows. And we are not re-compiling cvxopt, so we are not changing its linked libraries. But if we change the `numpy` that those libraries use, we can get expected result on both platforms?"
gettodaze,"```suggestion 5. Once the return_dump.txt is generated, run psql -h localhost -U imsrv_test -d kozuchi_db_test -f ~/stash/returns_dump.txt. Change host/database/user accordingly. This step will move all data into a returns_legacy table in Postgres. ```"
gettodaze,"```suggestion 3. From ipython, run `migrate_return_characteristics(conn_spec=..). This will transfer all dim_returncharacteistics table to Postgres depending on the connection_spec. ```"
gettodaze,"Not sure of the return type, but maybe: ```suggestion def get_return_characteristics() -> sf.Frame: ```"
gettodaze,A type hint here would be nice
gettodaze,Maybe add return type
gettodaze,I appreciate the comments!
gettodaze,"Just generally I'm noticing you don't use very many symbolic constants for things like `vendor_name`, `legacy_id`, `created_date`, etc, even though a few of them get used a lot. I don't exactly understand what the script exactly does, so maybe that was an intentional choice that works better in this case. I just thought I would mention it."
gettodaze,Does `expanduser` do anything here?
gettodaze,"I think printing the error might be fine because everything is just intended to run in `IPython`, but I wonder if maybe it might be useful to also log these errors?"
gettodaze,It might be more clear to name the return value of conn.get_connection as `connection` or something distinct from the original `conn`.
gettodaze,"Is this just faster than `f.write('\n'.join('\t'.join(str(c) for c in r) for r in rows)`, or maybe easier for debugging?"
gdevanla,"yeah, the choice is interntional here. This script is a one-off script which will only be used once and will not work after that!  But, your comments in this PR are valuable. Therefore, thanks for that!"
brandtbucher," Well, even if the CVXOPT and CVXPY BLAS libraries are out of our control, we should still get NumPy back on MKL (just as it was two platforms ago)."
vhquang,"Yea, and I agree those 2 are out of our control. I am just surprise that pinning numpy was able to give us what we want."
flexatone,"Should we use a `PathLib` or `os.path.join` for this sort of file path creation? Also, do we expect the trailing delimiter, i.e., ""BondIndices/""?"
flexatone,`frozenset`?
gdevanla,"I do use os.path.join() eventually while build the final path. I think it is on to use string literal here given that we are not platform independent at this level.    I have not adopted using Pathlib everywhere, since it many of our functions break with it.  I have been slowly adopting it in isolated cases."
gdevanla,"Good catch. I think based on the conversation on slack, this should just be a tuple."
johnjhawk,should we remove this TODO?
johnjhawk,"Is ""As Of"" always expected? If so, we should raise if missing."
gdevanla,Good catch. I am not sure if it is always expected. I just created the header with what I see and return a Series. Let me think more about this.
brandtbucher,```suggestion             unused_args: tp.List[str]) -> argparse.Namespace: ```  (and add `import typing as tp`)
brandtbucher,```suggestion DO_NOT_MERGE = None ```
ForeverWintr,It looks like the type hint and docstring are out of date. It actually returns a list of tuples of string and matcher?
gdevanla,Thanks. I will fix that.
vhquang,"So, is this PR ready to merge yet?"
vhquang,"Instead of `reversed_geu_dates`, another name like `asc_geu_dates` or `desc_geu_dates` would help a reader like me, who doesn't know the original order of the result."
vhquang,"While I think this is fine, I wonder if this approach is reliable enough, and if we can write it in different way.  1) Is `latest_geu` guarantee to be in the list of geu_dates? Ex: geu_dates: [1/1/2021, 2/1/2021] latest_geu: 1/15/2021. Is the result here match what we expect? 2) If [1] is guaranteed, then instead of iterating, we can just check if `latest_geu in geu_dates`."
brandtbucher,```suggestion                 f'available={returns_row.index}') ```
brandtbucher,"```suggestion             yield 'BASE CURRENCY TRI'  # not this does not have currency, further checks needed when this value is used. Plus this should be the last entry checked ```"
brandtbucher,"```suggestion             yield 'BASE CURRENCY INDEX'  # not this does not have currency, further checks needed when this value is used. Plus this should be the last entry checked ```"
gdevanla,"Good catch, Thanks!"
nekobon,"I'm curious, why are some quoted and some not? Are they different dtypes?"
nekobon,I wonder if it's possible to have this type hint be more specific.. Is `LoaderConfig` a name of a class defined later?
nekobon,"How about to use symbolic constants for the index, to be used by all the clients of `HoldingsAttrs`?"
nekobon,I'm curious: What do the key integers mean? Are they always integers starting 1?
gdevanla,"Yeah, the unquoted ones are either bools or integer values."
gdevanla,"It is a abstract structures, which is specialized at the vendor level. This is used as a tag for type hinting abstract methods in the base class."
gdevanla,"Yeah, these are id's of data that get created as part of fixtures. I will leave a comment there to clarify that."
gdevanla,These are fixed column in the database table. I have so far not used symoblic constants for table specific columns since it becomes too many of them.
nekobon,"How about at least for the ones used in the same module? `vendor_name`, `dataset`, etc"
gettodaze,Maybe a return type for `admin_mail_args` could be helpful.
chaburkland,What is this change doing?
chaburkland,I'm really surprised removing this works.
chaburkland,"Since this is such a small file, I wonder if it's best to just put one pylint disable message at the top instead of on every line. I think that's also appropriate here, given that this file is a pretty atypical python source file."
chaburkland,I might be worth pinging the original author here to let them know the correct way to silence an individual pylint failure. Especially since I've seen this replace a few times now.
chaburkland,You're the only one I know of that imports from typing directly. Most people use `as tp`. I'm curious if there's a reason for it outside of style preference?
chaburkland,"I think it would be better to make this `' '.join(map(shlex.quote, args))`, since I don't think `quote` is a common enough method for a reader to quickly realize where it's coming from."
chaburkland,"Similar point here, but I would strongly prefer this become `os.path.join`. It's cause for even more of a double take given that two lines above you have `' '.join`. I think the explicit dotted name is preferable here."
brandtbucher,"The old config would run each task (`init`, `mypy`, and `lint`) serially on the same runner. Now they run in parallel on different runners and have individual failure reports and logs... see the quality checks on this PR for an example."
brandtbucher,"We turned off a lot of checks that used to be on by default. Likely, many of these ignores were guarding against those."
brandtbucher,No reason outside of style.
brandtbucher,Huh?
chaburkland,"I mean that I saw a bunch of times people commented `# type: ignore # pylint: disable=unused-import`. It seems like they might have thought that was the correct way to disabling linting for a specific failure, but it isn't. My suggestion was to let them know that's not the correct way."
brandtbucher,"I think both mypy and pylint were complaining previously. Our new mypy config ignores airflow, which silences this error. So it was correct then, and it's correct now."
chaburkland,Oh I see. Nevermind!
vhquang,"Code looks good to me. But I am curious, is `user` the person who submits the job, or app_user who takes and execute the job (ex: airflow, worker...)?"
brandtbucher,It's the submitting user.
gdevanla,nitpick: Should you have an `isisntance` check for `VigeoInput` here as well and fail if it is some other type?
gdevanla,Should this be in `inventory.py`?
gdevanla,Should `data` have a type here? Can we just use `None`?
gdevanla,linting nitpick: Just a truthy check should be enough here.
gdevanla,Is this still valid?
vhquang,"Thanks for this feedback. The usage here is data dumping, for the Research and QC team to double check the data, ex: what triggers the exclusion. ISS has the `ISIN` column, which also have it in `companies` file. Vigeo doesn't require any extra handling current."
vhquang,"This should. But I check with Alan and we will have the production database ready soon, but not yet. When we do, I will have to come back and replace this anyway. So now it only serves prototype purpose."
vhquang,"It is just a helper for me to check if Alan has loaded new data, but I agree! Let me update this. Maybe move this to sketch as well, since it is not used in code for production."
vhquang,Agreed on this as well.
vhquang,"It still is, since we not yet have production data. So let leave it here to remind myself."
johnjhawk,"yes, it's ready. I use the DO_NOT_MERGE variable to guard against accidental merges and I would consider it and accident it this branch was merged before the review was completed.  I make this the very last commit before merging to default."
johnjhawk,great suggestion. I changed it to descending.
johnjhawk,the latest_geu date is not guaranteed to be in the geu_dates. 
brandtbucher,```suggestion ```
brandtbucher,```suggestion                 is_pro_forma=False) ```
brandtbucher,```suggestion         self.assertTrue(result.failed) ```
brandtbucher,```suggestion         self.assertFalse(result.failed) ```
brandtbucher,"```suggestion     def infer_data_date(portfolio_map: hw.PortfolioMapRow, effective_date: datetime.date) -> datetime.date: ```"
nekobon,"At least for now, can we hide CountryISO3? We're trying to use only ISO2 for country to distinguish between country and currency "
nekobon,It's so awesome to have these comments!!!
nekobon,How about to share this with FX_ISO?
gettodaze,Just curious why these prints would be removed instead of `logging.info`? The printed info was probably just not useful at all?
gettodaze,What is the boolean argument? I'm just wondering why it changed.
gettodaze,I think the `info` statement makes the comment redundant (maybe).
gdevanla,We run these processes in airflow. With logging we get to capture this message in both a file and in memory that is managed by the MonitoredSequence class that wraps these processes. 
gdevanla,"The 'True' sets some extra context on the engine which involves querying the database. For this block, that context is not required."
nekobon,Please make this default in 2021 (put all params in `ems` class above)
nekobon,"Once they are default, you can remove this"
nekobon,"We need to build for 202102, just as RMS."
nekobon,Please double check that this is not used for column selection from (Data)Frames (tuple won't work for that). Running any ems test would be enough to see.
vhquang,"In `2021/rms_gen` I use ""202103"" as well. The reason is RMS looks for previous quarter blend. Having the `date` different than quarter months (3, 6, 9. 12) results in no matching blend found, and would need a code change that is only necessary for test build.  Is there a convenient trick to get it run on non-quarter month?"
vhquang,"Now it makes sense on why this is in List. Thank you for the explanation! `cg_list` is only used in this module, for iterating purpose. And although all previous ems/emc tests pass, I still prefer using List in this case, just because I don't like the `,` for single element tuple."
nekobon,"202103 is a production build. If we use 202103 with 202102 dates, we won't be able to re-produce the test builds after we create production builds.  I see the issue you pointed. How about to use a study parameter to override 202102-specific specs, so that both the test build and the future production builds will be reproduceable. "
vhquang,"Re-produce test build for validation is a good point, that I miss. Thank you for pointing that out! I will use study parameter as you suggested!"
vhquang,"Just curious and mainly for my understand, do we actually care about the result, or if the code run without exception it is fine as well?"
gdevanla,"Umm. What exceptions do you have in mind here?  If the `_load_file` throws an exception, the current code will crash and burn and I think that is OK."
vhquang,"My interpretation is that the Loader would crash without the pattern exception handling, hence my previous comment. I just want to know if the code runs without crash, that is good enough, or stricter is better in this case."
gdevanla,"Yeah, running without a crash is good enough. "
nekobon,I think `rows` is still an Iterable? I'm curious why it was changed to Iterator.
nekobon,"Since `Series.values` cannot be None, this shouldn't happen?"
nekobon,Do you ignore all rows after one empty row? (maybe a small comment might help)
nekobon,:open_mouth: I've never seen using mock in non-test code! It seems very suitable for your purpose.
nekobon,Do you need `iter()` here?
gdevanla,Um..I think it is an iterator since we need to be able to call `next` on it.
gdevanla,"Yes, will add a comment. Thanks"
gdevanla,"Yes, the `IterNodeDelegate` returned by this call is not an `iterator`."
gettodaze,Just noting that there is still a `TODO` here.
gettodaze,I think the comment in line 35 might still refer to line 38.
gettodaze,"Just curious, is this more efficient than `some_dict.get(key) or ''`?"
flexatone,"Thanks, I will update the comment!"
gettodaze,"I think a comment saying something like `rule for is_effective changed on FIRST_SECOND_FRIDAY` might be helpful (for some reason it took me a while to figure out what the function was actually doing, but its actually pretty simple)."
gettodaze,Type hints might be helpful here
gettodaze,maybe add type hints here
gettodaze,"Just curious, is there a convention we try and stick to with returning a tuple; i.e. is `return a, b` preferred over `return (a, b)`, or is it up to personal preference?"
gettodaze,"But `is_effective_same_month(date(2020, 2, 15))` and `is_effective_same_month(date(2020, 2, 26))` should both return `False` because they are both `date >= friday_second`, so both cases will have their month shifted back one."
gettodaze,"I think this comment might need to be updated as well, because `last business day` is no longer used after `FIRST_SECOND_FRIDAY`"
gettodaze,This comment might need to be updated too?
gettodaze,"This is probably intended, but I notice that the `.txt` is dropped from the original `d['geu']`."
gettodaze,(Referring to the comment in line 55)
gettodaze,(referring to line 44/51)
flexatone,"Yes, those are out of date. I will remove!"
flexatone,"maybe... getting  a default out of `get` is built in, so might as well use that pathway rather than get the default `None` and then fall back on the empty string."
flexatone,"yes, good point!"
flexatone,yes!
flexatone,Agreed.
flexatone,"Ultimately, it is the same, so I would leave out parens unless it needed to span multiple lines."
flexatone,"yeah, it was an old format we used for that parameter that is no longer needed."
flexatone,right!
flexatone,"But the explicit transition to start using second friday is `datetime.date(2021, 2, 12)`, so for those particular dates, we are fine. Starting on 2021-02-12, this function will return False for the remainder of the month. We can chat about this if this is not clear or you think I am missing something. It is tricky!"
flexatone,I have added some tests that I think show that this is working as expected.
ForeverWintr,"Looking at this with fresh eyes, I see we were using the same name for both worksheet and workbook. I think we shouldn't call the workbook 'speccompare', because excel prevents SI from opening two workbooks with the same name, so we try to generate unique workbook names. How about we retain `f'{target_did}_vs_{compare_did}'` as the workbook name, while using `specompare` as the worksheet name?"
gettodaze,"Ah, I see! I had done that in my speccompare with blends PR, but not here. I pushed that change."
nekobon,"Oh, I missed that line!"
nekobon,Wow!
vhquang,"Code looks good. But can you add typehint for the return type of `table_getter`? Is `table` a frame or series?  And, is `table_getter` expensive to call? If so, may be we can add cache for it, since we are calling `get_tables` twice in this function. If not, it is fine to not over engineer this."
vhquang,"This is different than my mental model. I thought `table.rename(date)` will implicit convert `date` into string. I didn't know Series/Frame allows its name to be non-string object. I just want to check if this is intended. For me, it is always easier, especially when debugging, to use string, rather than datetime object. "
nekobon,"Yes, it is intentional to keep as `date`. String is not useful, for example, if we need to add months/days."
nekobon,That is a good point. I will add more type hints to `table_getter`. This returns a generator of Frames.  `table_getter` shouldn't be called twice. Do you see the second call?
vhquang,"I see `get_tables` get called twice, in L47 and in L51: ``` if not max_persist:     return sf.Bus(sf.Series.from_items(get_tables())) ... sf.Batch(get_tables()).to_zip_parquet(fp, config=cls.STORE_CONFIG) ```"
vhquang,"Oh nevermind, only 1 of the 2 get executed, not both."
flexatone,Maybe this should raise?
flexatone,Seems like `finpan._panel[yr]` should already be named with `yr`; maybe we can make that change upstream.
flexatone,"Here and elsewhere, we do not need the hyphen before the arg name in the ""Args"" block.  ```suggestion     Args:         years: which years to search for currency changes ```"
flexatone,"I think this is the right thing to do, but you might leave a comment as to why."
flexatone,"I am not sure this year selection is what we want. It might be easier to specify this just the most recent three years in the financials panel, regardless of `last_fy`. But lets share a sample of the report with Robert and get his input."
nekobon,What does dropping (-1) do here?
nekobon,Maybe this is slightly more readable ```python cos = np.array([c for c in iso_frame.columns if len(iso_frame[c].unique()) > 1])  ```
nekobon,"How about to make symbolic constants for `FX_ISO`, `ID_BB_COMPANY`, and `YEAR`?"
chaburkland,"I don't think so, since it's not a failure. If you're on this branch, local is irrelevant, since all finpans are local. That flag is kept around for legacy processes to distinguish which type of finpan you want to build.  I wanted to put this here since it can be a bit confusing to call a factory with local=False, and receive back finpan that sources local fundamentals."
chaburkland,That's a good point. I'll make this change upstream.
chaburkland,Oh darn - I'm a pretty big offender of this then. I'll stop doing this.
chaburkland,That is vastly more readable. Thanks Yu!
chaburkland,I will update the message though to be more clear.
chaburkland,"It drops the innermost level! The concat move here will create an index hierachy, where the innermost level is simply 'FX_ISO' repeated over and over. I'm removing it since it's just noise. I'll add a comment."
chaburkland,"Which part are you referring to specifically? The creation of this custom spec type, or one (or more) of the values that I override?"
brandtbucher,"```suggestion                         f""{result!r} column can only be used with these index codes={allowed_index_codes}. ""                         f""The `allowed index_codes` needs to be updated if {given_index_code} needs to be supported!"") ```"
gdevanla,"Great, Thanks!"
ForeverWintr,Can this reference the symbolic constant for `'Daily'`?
gdevanla,Yes. I am replacing a bunch of these uses in another change I will be working on. Thanks for pointing that out.
vhquang,"The change from 7701f -> 7701d is the query of ISS data to retrieve data on specific AsOfDate, instead of received data prior to AsOfDate."
gettodaze,"Just curious, what does this mean? Does a nearly empty `date_parameters` just mean that this configuration exists right now solely for study purposes? Why do you need to keep a `'YYYYMM'` key in `date_parameters`?"
gettodaze,"I know you didn't edit this, but the `err_str` could remove `+` after each line."
gettodaze,you can probably get rid of this comment
gettodaze,What's the purpose of this method? Is it abstract?
gettodaze,If `test_run` is getting used in `core` maybe it should get moved out of a `sketch`?
gettodaze,This just tests if `ISSData.get_frame` runs?
vhquang,"`date_parameters` is conventionally used as a target delivery for our build. For example, if I build a portfolio for March, the `--date` will be 202103. Since there are lot of custom configuration goes into each build each month, those configurations go into the `date_parameters`. And thus the build process assumes that it is a required info. I place an empty entry here just as a place holder that will allow me to make build and make test. The integration test case is anchored by `date` as well. (FYI, whenever some mentions portfolio's date, they likely mean year & month)."
vhquang,"Agree, but I personally would rewrite the error message. Currently, it logs the  _index_ of the frame, ie: ``` index   ISIN   BB_CO 0        aaa   bbb 1        ccc   ddd ``` which isn't particularly meaningful as an error message. I don't the original intention from the author, so I left it there.  I will make change on separate request with Charles, who is the original author."
vhquang,It is for debugging. I was trying to extract the info and send it out for other people to take a look. I will complete this function.
vhquang,"The code in `test_run` is not the code I plan to run on production. It is just an example of using the code, plus some typical routines to source the data while we haven't automated it yet. To says in another way, it is useful, but not important. Hence I move that into `sketch`."
vhquang,"Yes. The issue happens in this change is with the cosec map. An exception mapping happened with the mapping data since 2020-11-31, so this test try to make sure it is handled."
gettodaze,"Ah, I see! If you had no date parameters, you wouldn't be able to test. Thanks for the info."
vhquang,"Yes John M. To make the build, I would run: ``` python RAPC/apps/main.py --spec ra_multi_2020/rmc_gen --date 20209 ``` The validation test would run the build process with the same parameter, and compare the test output with the given portfolio: ``` (       '--date', '202009',       '--auto_test_did', 'rmc-2020_SEPTEMBER-20201123135649-NFD',  ), ```  Both process would need the `date_parameter` (specified by the `--date`)."
flexatone,"I would make this a module-level constant, i.e., `FX_ISO_MISSING_CASH_RATE`, or similar, to make it a little more explicit."
flexatone,We might also check the shape of the data overall. 
gettodaze,Maybe it would be good to put an as-of date next to `new` so the `new` comment doesn't become outdated.
gettodaze,This is cool!
gettodaze,"Maybe this was intended, but not all the args are listed here. Also, maybe it would be helpful at least to have `extra_salt` be listed before `kwarg_to_hasher` (to align with how they are listed in the method signature)."
gettodaze,"Oh, also the LRU cache is listed as ` @functools.lru_cache(maxsize=128, typed=False)`, so it might be helpful to have `maxsize` be the first argument here as well (or maybe just have those be kwarg-only so that users don't accidentally flip the arguments)."
nekobon,"This file will be renamed later, and re-created by a script without any comments, so this won't be outdated (which I didn't know until today :grin:)"
gdevanla,This is a good change!
johnjhawk,"since we're comparing sets, does order matter here. Or should be just be checking that the values are the same."
gdevanla,"Yeah. Order does not matter. We just want to make sure there was alteast one entry with each of the `data_groups`  But, I did not understand your question. Can you please clarify?"
johnjhawk,"if set(data_groups) and set(frame['dataset'].values) contain multiple values, the sets have to have the same values and be in the same order, right?"
brandtbucher,```suggestion import io  ```
brandtbucher,"```suggestion             context.run(command, out_stream=stream) ```"
brandtbucher,"I checked, mypy can infer this from line 106!  ```suggestion             seen = set() ```"
chaburkland,The whole point is to redirect stdout into a stream. How would removing it work?
brandtbucher,Notice I added `out_stream=stream`. The runner has this redirecting functionality built in.
brandtbucher,One more little thing (this keeps you from printing an empty string at the very end): ```suggestion             for line in stream.getvalue().splitlines(): ```
johnjhawk,An assert remark would be useful here in case in case this ever fails 
johnjhawk,does this only calculate cape for US companies? I ask because I think that we should be using different inflation targets for non US.
johnjhawk,I know this is a long shot but it's safest to calc mean and stdev for testing. As the mean can be the same with different data but I don't believe the stdev and mean can be the same unless the data is exactly the same. 
johnjhawk,we may want some more tests here to test some edge cases. maybe were there is no or not enough data to calc a cape or nans or a foreign company. 
johnjhawk,"isn't this a syntax error?  if it's supposed to be there, we should remove your home directory."
chaburkland,"It's for all companies I believe, but we're only using USD financials, hence the reason we grab out the us cpi values"
chaburkland,Thanks! I'll test those values instead.
chaburkland,I'll add more tests :+1: 
johnjhawk,"I believe that the currency is irrelevant when is comes to inflation. In our other cape calculation, we get the inflation factor from the country of the security.  I would just mention it to Ted when you talk. I'm sure that he has already thought it through."
chaburkland,"This was a premature PR. I realize now that what I mainly wanted was feedback on the implementation (which you did), and that would have been pursued by leaving this a draft and asking for review. I'm actually going to mark this back as a draft PR since I have more work to do"
flexatone,"Can we / should we remove this writer? We should not be sourcing USD financials now for any process, I believe."
flexatone,Maybe this should just be an Exception?
flexatone,Nice!
flexatone,Maybe just a few more tests that we actually have non-NaN values; could even test the sum of net income or similar.
flexatone,"I think this should be last business day of the year, not always `1231`."
flexatone,"instead of `apply`, we can do a `map_fill` here, i.e.: ```suggestion         cpi_levels = peds.iter_element().map_fill(us_cpi, fill_value=np.nan) ```"
flexatone,Why do we divide by 1e6 here?
chaburkland,Yeah good point. I'll remove this.
chaburkland,"I prefer to leave it as an assert, since the only way this can fail is due to a coding error. Technically it's an ignored arg, but I need to leave it in order to maintain interface integrity. My goal with the assert was to communicate to the reader that I didn't forget about this arg.  I'll add a better comment though. "
chaburkland,"I was feeling dubious about this method, so I'm thankful for this comment"
chaburkland,"Ted's example was in millions, so I baked it in. I guess that's not good here, since this is a static resource, and it's the clients job to manipulate the numbers in the way they want. I'll remove this."
nekobon,:+1: 
gettodaze,"Just curious, what was `issue.update` doing originally and why is it no longer necessary? I couldn't find it in https://pygithub.readthedocs.io/en/latest/github_objects/Issue.html; is that the reference you used?"
chaburkland,"```suggestion LINK_ATTRS_FF3 = [fama_french_factors.FFAttrs(2, 'F-F_Research_Data_Factors_CSV.zip', test_data.get('F-F_Research_Data_Factors.1611981536.CSV'), 'F_F_Research_Data_3_Factors') ] LINK_ATTRS_FF5 = [fama_french_factors.FFAttrs(3, 'F-F_Research_Data_5_Factors_2x3_CSV.zip', test_data.get('F-F_Research_Data_5_Factors_2x3.1611812279.CSV'), 'F_F_Research_Data_5_Factors') ] LINK_ATTRS_MOM = [fama_french_factors.FFAttrs(4, 'F-F_Momentum_Factor_CSV.zip', test_data.get('F-F_Momentum_Factor.1611990123.CSV'), 'F_F_Momentum_Factor') ] LINK_ATTRS_P12 = [fama_french_factors.FFAttrs(9, '6_Portfolios_ME_Prior_12_2_CSV.zip', test_data.get('6_Portfolios_ME_Prior_12_2.1611992617.CSV'), 'Portfolios_6_ME_Prior_12_2_AVWR') ] LINK_ATTRS_BRK = [fama_french_factors.FFAttrs(15, 'BE-ME_Breakpoints_CSV.zip', test_data.get('BE-ME_Breakpoints.1612001797.CSV'), 'BE_ME_Breakpoints') ] ```"
chaburkland,This named tuple is copied! You should just use the one you made in `fama_french_factors.py`
chaburkland,"```suggestion             self.assertEqual(out_ds['Mkt_RF'].astype(float).min(), -0.2913)             self.assertEqual(out_ds['Mkt_RF'].astype(float).max(), 0.3885)             self.assertAlmostEqual(out_ds['Mkt_RF'].astype(float).mean(), 0.006814638447971781) ```"
chaburkland,"I'll make the suggestion here once, but I see it in most of these tests so this applies throughout. It's preferable to call astype with `float` directly instead of as a string, and also, most series operations can be done on the series without needing to call `.values`."
chaburkland,These are great unit tests!
chaburkland,"I actually just learned today a better way to do this! It involves patching the module exclusively for the line you need. The pattern looks like this.  ```python from unittest.mock import patch  # Use the following snippet when you actually need to read from excel.  # xlrd=1.1.0 needs time.clock attribute which is not available in Python 3.8 onwards with patch.object(time, 'clock', create=True) as mock_time:     mock_time.clock = time.process_time     df = pd.read_excel(...)  ```"
chaburkland,"This is a bit unruly, and I wonder if there's a better way to make this easier to parse.  My main intution, is to remove both the `file_name_src` and `file_name_dest` named tuple attributes, and whenever you need those, call a method that does it instead.  For example. whenever you have an `FFAttr` and you want to find it's `file_name_src`, you would do this: ```python def get_src_from_zip(zipfile):     basename = os.path.splitext(zipfile)[0]     basename = basename[:-4] # Strip off ""_CSV"" from the basename     return basename + '.csv'      get_src_from_zip(my_fin_attr.file_name_src) ``` I see that `file_name_dest` is a bit more complicated, since some of them append ""AVWR"" and are not simply the src file without an extension, but *most* are, so it's worth attempting a similar pattern."
chaburkland,"I think it might be clearer to call the fp arg `folder`, or something like that. Typically `fp` denotes a file path, and in this context it's more accurately a folder path. Additionally, I saw that all of your unit tests passed in the empty string, so you might want to make it an optional kwarg with a default value of `''`."
chaburkland,"This long if/elif/elif... branch indicates to me that a more appropriate data structure would be something like a Enum, where you can branch in ways that are more concise. For example, I see that many of the branches follow this pattern:  ```python pd.read_csv(fp_src, skiprows=, sep=, names=col_names ``` whereas others follow this pattern ```python cls.read_csv_by_row(fp_src, col_names, skip_rows) ``` I think that you might benefit from doing something like this: ```python from enum import Enum  class ReadType(Enum):     PandasRead = 1     RowRead = 2  class CategoryAttrs(tp.NamedTuple):     col_names: tp.List[str]     skiprows: int     read_type: ReadType  category_1 = CategoryAttrs(col_names=['Date', 'Mkt_RF', 'SMB', 'HML', 'WML', 'RF'], skiprows=7, read_type=ReadType.PandasRead) category_2 = CategoryAttrs(col_names=['Date', 'Mkt_RF', 'SMB', 'HML', 'RF'], skiprows=4, read_type=ReadType.PandasRead) # etc... category_8 = CategoryAttrs(col_names=['Date', 'SMALL_LoBM', 'ME1_BM2', 'SMALL_HiBM', 'BIG_LoBM', 'ME2_BM2', 'BIG_HiBM'], skiprows=16, read_type=ReadType.RowRead) # etc.. ```  Then, instead of using integers to represent your categories (when you define `LINK_ATTRS`), you instead use these categories.  Now, your branch will be **much** simpler:  ```python category = link_attr.file_category  if category.read_type == ReadType.PandasRead:     df = pd.read_csv(fp_src, skiprows=category.skiprows, sep=',', names=category.col_names) elif category.read_type == ReadType.RowRead:     df = cls.read_csv_by_row(fp_src, col_names=category.col_names, skip_rows=category.skiprows) else:     raise RuntimeError(f'file_category read_type {category.read_type=} is invalid') ``` "
chaburkland,"Wrapping a string with parentheses does nothing! If you want this to be a tuple, you have to add a comma like so: `('nradulovich@rallc.com',)`"
chaburkland,"Similar comment as before, it's preferable to just use `.astype(int)` instead of `.astype('int')`."
chaburkland,"I would move this final section to another method. `process` is starting to grow pretty big at this point, and it's worth considering making a final method that takes `dfs` as an argument."
chaburkland,```suggestion     FamaFrench.process()  ```
chaburkland,This needs a newline :)
Nradulovich,Thanks Charles. These are all great tips and comments. I am not sure what you mean here though. Shoudl I copy these two lines to the beginning of the read_csv method?
chaburkland,"You should replace the `time.clock = time.time` line with `from unittest.mock import patch`.  Then, which lines you are receiving an pandas error (due to the xls bug), wrap that line with:  ```python with patch.object(time, 'clock', create=True) as mock_time:     mock_time.clock = time.process_time     the_problematic_line() ```"
Nradulovich,Neat. I like that. But then again some file_name_src files come with a .csv extension and some with a .CSV extension. It is a bit unruly as you say. But I would like to try it though later in an improved version.
Nradulovich,"Totally agree, I can't quite recall i went with fp though. I will change it...:) So you would use it like this?: def download_unzip_file(cls, link_attr: FFAttrs, folder=' ',*args,**kwargs) -> str:"
Nradulovich,Done
Nradulovich,"Do you mean the very last part after ""#Upload the last 3 Excel workbooks"" That makes total sense to me. Anything before is too intertwined to split up it seems."
Nradulovich,Done
chaburkland,"I'm referring to the section between where you define `ff_6` and the `#Upload the last 3 Excel workbooks section`. It seems like the isn't that much dependency, other than 3 variables.  You could easily define a method like so:  ```python def add_additional_dfs(self, fp, year_mo, dfs):      '''dfs is a dictionary that will be updated in-place'''      logical_block_here... ```  This is more of a suggestion because `process` feels like it's growing a bit too long, although it's only my subjective opinion."
Nradulovich,Brilliant! I should have thought of this. I will definitely make the changes.
Nradulovich,I see. That would add a lot of extra lines of code though. Right?
chaburkland,"How many lines are you getting that error on? My understanding was that it only was for `.xls` files, and it seems like you're exclusively working with `.xlsx` files.  If it's happening more than once, then I would move the actual call to `pd.read_excel` to your own function, wrap it inside there with the patch, and that way you only have to have the patching code in one place.  I don't think the primary concern here is about the number of code lines. However, if you're finding yourself repeating things, it's usually a good sign there's an abstraction opportunity being missed.  "
Nradulovich,Done. Thanks.
Nradulovich,"Thanks Charles. I really like your solution, but I feel that we are re-arranging the code, but not reducing it. And most of all I kind of prefer keeping things as much as possible in one place. It was kind of hard figuring out which files are which...:)"
flexatone,"It is not about re-arranging or reducing the code, it is about making it readable and maintainable. Having the `file_category` as an integer is undesirable, as those integers are meaningless. But in this case, there are so many (17!), coming up with meaningful names is daunting, which is why I was not able to offer a better alternative in earlier reviews. So perhaps it is fine for now; a better solution might require more elaborate changes. "
Nradulovich,"Okay. Thanks. Your point is well taken. But I think that everything is very tightly interrelated, except perhaps for the last 3 excels. I will take a look. Thanks."
brandtbucher,"Yeah, that method is inherited from some base object, so I don't think their auto-generated documentation covers it. It basically ""refreshed"" all of the object's data, which was used here to make race conditions between actions less bad.  It's super wasteful and redundant though, since we're calling it *immediately* after creating the object."
gdevanla,"Nope, order is not important. "
flexatone,"We are moving our branching of such configuration to be active in March, rather than Februrary, so we can have this one start in 202103, and extend the older window to 202102."
gdevanla,Oops. I thought it was an simple and obvious change. I did use this condition and kick of a new tardis build. Should I abandon that I re-reun Tardis with the change you recommend?
flexatone,"It is not likely to make a material difference, but probably better to do for consistency. Besides, we have a few days before we need these."
vhquang,"Unless we have GEU on a non-business day, this should be equivalent of `VAR_DATA_DATE := GEU`, right? I always thought GEU is business day. Seeing this makes me doubt my understanding."
vhquang,"Just to confirm my understanding, is this because we add 2nd Friday for GEU, or something else?"
vhquang,"I am curious, what makes this test case fail? I don't see anything wrong with it. 2017-8-31 is the last BD of the month."
vhquang,"I am trying to connect this comment with what I know. So, the rule for GEU is: 2nd Friday and last BD of each month. However, Imcron date sensor reads off our imcron calendar to determine which date to it should be triggered. Is this understanding correct?"
gdevanla,Yes. You are right. I have simplified the rule. 
gdevanla,"We don't have data for second Friday on 201708. Since, we only sourced data as of last BD during that time period."
gdevanla,Yes. That is correct. Hence the dependency.
vhquang,"Does `is_data_available` check for any data available from 8/1 -> 8/30, or 8/1 -> 8/31? My thought was the latter, but your explanation seems to imply the former. I just want to double check.  Secondly, we move all old tests into new date, to avoid resourcing old data just to pass test. Is that right? "
flexatone,Should this use `os.path.join` or `PathLib` objects?
flexatone,Maybe a comment to show what groups we might see here that are not being handled?
flexatone,Do we have symbolic handles for these strings?
flexatone,"I think we want to use `get_tlt_temp_dir` here, no?"
flexatone,"Why `filepaths[0]`; the index `0` is suspicious here, so maybe just comment to explain what we are getting?"
flexatone,"```suggestion                 help='Just calls main and tries parsing args, and return True/False. Used to testing', ```"
flexatone,"```suggestion     def func(run_date: datetime.date, debug_mode: bool = True): ```"
flexatone,"You can do this without a loop!  ```suggestion         returns = returns.astype[['return_daily', 'return_mtd']](np.float) ```"
flexatone,```suggestion         new_codes = returns.iter_series(axis=1).apply(get_new_code).values ```
flexatone,"As above, we can do this without a loop. I think this will work:  ```python cols = ['return_daily', 'return_mtd'] returns = returns.assign[cols](returns[cols].iter_element().apply(lambda x: f'{x*100:.4f}')) ```"
gdevanla,"I have not adopted PathLib widely.  I will for next set of routines.  But, I will replace this with `os.path.join` "
gdevanla,Sure. I improved the return data type to get rid of this magic!
gdevanla,"Yes, that is correct."
gdevanla,may be this should be `holdings_constituent_id`? 
gdevanla,"Since, Postgres object names are case-insensitive, can we just named the view,   `vw_holdings`?"
gdevanla,What you need here is `ha.effective_dates` I think.
gdevanla,`ha.vendor_name = pm.vendor_name` is repeated.
gdevanla,We are not using `sa`. Let's remove it.  I know some old files have it and we need to remove them from there as well.
kocharR,"I guess I will get both pm effective date and ha effective date? pm.effective_dates as portfolio_effective_date, ha.effective_dates as attr_effective_date.  This view i for informational purpose only so more information is good :)                          "
kocharR,Guru I don't see a column holding_constituenttid in any tables. holdings_constituent_id is the alias here.
gdevanla,Ok sounds good!
gdevanla,"Oh sorry, I just meant, lets fix the typo in the field name you have."
kocharR,Oh sorry I totally missed it. It is fixed. 
ForeverWintr,I think this docstring is out of date. 
ForeverWintr,"Yes, I think a family blend produces multiple carves, whereas a 'regular' blend runs on a single carve. "
ForeverWintr,"`frame_from_dataframe` returns a frameGO (which can grow), so going `to_frame` makes the frames immutable. It might be better to do that in `frame_from_dataframe`. I don't remember why we don't..."
ForeverWintr,"This looks like it's checking if *at least* one is null (regardless of whether the other is), which is different from what the comment says. Is that deliberate?"
ForeverWintr,Did you get answers to these questions?
gettodaze,"Ah, you mean that there is no more `enforce_same_index`? Thanks! I moved that kwarg to a different function and forgot to change the docstring."
gettodaze,"Ah, Yes! Chris answered all these questions and I forgot to remove my ask. Thanks!"
gettodaze,"Ah, I see! I should change that comment. Maybe `# otherwise, if any null values, return False`"
ForeverWintr,"Oh, I see. I missed that we would only get to this check if one or the other is not null. I understand now. I think re-wording the comment as you suggest makes it a bit easier to understand."
ForeverWintr,This is vulnerable to a race condition if `measure_fp` is deleted between lines 76 and 77. How about just catching `FileNotFoundError` if it's raised by your `with open(...)`?
ForeverWintr,"Do you need the `set` here? I'm not sure what `getmembers` does exactly, but if it just pulls things out of the class `__dict__`, I would expect them to be unique already."
ForeverWintr,Can you catch a more specific exception here?
ForeverWintr,"This looks like it could be a call to `self.get_compound_measure_cache_fp`, if you add the ability to pass `tuple(compound_measures)` as additional `extra_salt`. "
ForeverWintr,"If `zip_store` exists, we assume it's correct, right? If my understanding is correct, a corrupt zip file will lead to a crash below, and we could end up with a corrupt zip file if:  - a previous process was killed while writing the zip, or - two processes enter this block at the same time.   To avoid this, can we write the zip file in a `tempdir`, then move (aka rename) it to the final location only if the write succeeds? Moves are atomic so long as they're on the same filesystem."
ForeverWintr,"Depending on how `to_zip_pickle` works, it might be good to write to a tempfile then rename here, too."
ForeverWintr,Why is `freq`  a parameter to this method then? Do we expect that to change in future?
ForeverWintr,looks like you could speed this up a bit by making `missing_measures` a set.
chaburkland,"Thanks! I was looking to make this method more reusable, but for whatever reason I kept struggling to find the right abstraction."
chaburkland,"Originally, I was using this in testing, where I was using set behavior, but it's no longer appropriate at this level. Thanks for catching this."
chaburkland,Good point. Yes - there's a strong assumption that `zip_store` is correct if it exists. I'll use a tempfile to ensure the process completes successfully.
chaburkland,"We expect to provide support in the future for future frequencies, namely, quarterly & semi-annual."
brandtbucher,I don't think your `try` block is actually doing anything here. Perhaps you meant to use `try`-`finally`?  ```suggestion         try:             yield temp_fp         finally:             if not temp_fp.exists():                 raise FileNotFoundError(f'Expected {temp_fp} to exist for atomic write to complete')              temp_fp.replace(fp) # rename raises on windows if fp already exists ```
chaburkland,"Actually, the try-else was very specific here.  If I make this try-finally, it means the rename will always happen, even when exceptions are raised in the process.  For example, if you are doing this: ```python with atomic_write('target.txt') as temp_fp:     write_to_disk(temp_fp) # Assume this raises in the middle ``` you would NOT want to rename `temp_fp` -> ""target.txt"" as the exception bubbles up, because your write wasn't successful. The whole goal, is the actual ""write"" to target, is just an atomic rename. The write has to finish without any errors in order to trigger the atomic rename."
brandtbucher,"Then why have an exception handler at all? You could just do this, right?  ```suggestion         yield temp_fp         if not temp_fp.exists():             raise FileNotFoundError(f'Expected {temp_fp} to exist for atomic write to complete')         temp_fp.replace(fp) # rename raises on windows if fp already exists ```"
chaburkland,Haha. Thanks. Yeah that's better.
ForeverWintr,I like this approach a lot! 
ForeverWintr,Should this use your atomic_write?
ForeverWintr,Do you explicitly specify `constructor=tuple` to avoid creating a namedtuple class?
flexatone,"This was a case where you were getting a `tuple`, not a NamedTuple, and probably did not realize it!"
gettodaze,I think the return type of this function might be `Iterator[sf.Series]`?
gettodaze,Maybe some type hints would be nice for this function.
chaburkland,"I'm going to hold off, since most methods in this module follow the pattern `get_writer(date, suffix)`, and nothing is typehinted.  Plus, I'm not exactly sure what `date`'s type is, hence the number of `du.PrettyDate.from_any(date)` that you'll see in this function."
chaburkland,"Two small things. Why are the column names being tested here? It's unclear to me what assumption is being validated.  Also, whitespace between logic blocks really helps me read/digest code. I'm wondering if you could add some newlines to help visually split up the initialization, creation, and assertion parts of this test."
gettodaze,"> Two small things. Why are the column names being tested here? It's unclear to me what assumption is being validated.  @chaburkland That's a good question. This test was mainly very helpful to me in diagnosing the issue but I also am not quite sure if it has value being added to default. The error came in where there were some column dtypes that shifted from object to bool, causing `cc_psur.FreeFloat.process` to fail with the given parameters. So I run the process function and make sure that only the expected columns (in the test I accidentally said rows) are of dtype object. Does that make sense? I'm not exactly sure if the benefit outweighs the cost for putting it in either.  And thanks for the reminder on whitespace!"
chaburkland,"Okay that makes sense. My thought process about cost/benefit analysis is, how difficult will this test be to maintain in the future, and how is that juxtaposed to the benefit you get from it? If you think it's unlikely this test will ever need to be modified, then leaving it as is seems perfectly reasonable. If you think it might need to be maintained, and the only benefit is that it helped you iterate on solving a bug, then it might be a sign you're testing the wrong thing."
gettodaze,"Thanks Charles! With that in mind, I got rid of the dtype assert and just left the function call. That should never need to be modified and would be a helpful jumping off point if a similar bug ever happened again."
nekobon,Can you make them separate functions? It's possible that in the future we would need to run `WSDatastreamMapWriter` mid-month to match the price data pull.
nekobon,"Very minor point, but you don't need to call `.unique()` (->`.values`) since you make it a set anyway."
nekobon,Can you please make `SDKFieldMissingValues` in `papyri/core/fields.py` public? You can then use `SDKFieldMissingValues.SIC_CODE` instead of `0`.
nekobon,Thank you! Please also mention that this is in compustat.Measures*
nekobon,"Please update output of the public methods to use public fields (in `fields.SDKFields`) without returning any vendor-defined fields.   If the QAI decided to change the column names in the future, or we decide to get the same mapping from other vendors, the transition will be easier if we don't have to change the reader much."
chaburkland,"I don't know why, but I remember that in the past I've found that `set(series.unique())` is faster than `set(series.values)`. It could have been that it was only due to some very specific conditions. I'll check it out for this line, and update appropriately."
chaburkland,"Okay, I'll clean this up."
nekobon,"That's interesting! Maybe when there are many duplicates, it is faster to let numpy to remove duplicates even though it needs to create new Series. Perhaps `set(np.unique(mapping[WS_CO].values)` can be the fastest"
chaburkland,"In this case, `set(series.values)` is much faster!"
chaburkland,"I would remove `**kwargs` here as they aren't used. ```suggestion     def download_unzip_file(cls, link_attr: FFAttrs, fp='') -> str: ```"
chaburkland,"Wrapping a string with parentheses does nothing. This change should be reverted. ```suggestion             os.makedirs(fp, exist_ok = True) ```"
chaburkland,These are all brilliant changes. ```suggestion ```  I would only ask to delete the comment `# breakpoint()` since it's unused and adds clutter to the method.
chaburkland,Are you aware this whole file is a sketch? I typically don't review sketches since they aren't meant for production.
chaburkland,"```suggestion         file_path = os.path.join(fp, file_name) ```"
Nradulovich,Thanks Charles. Why are are you getting rid of file_path? 
chaburkland,"I'm not removing `fp`, I'm removing the redundant parentheses surrounding it. Whenever you wrap a string in parentheses, it does nothing.  ```python assert ('nicholas') == 'nicholas ```"
Nradulovich,I added that file to the branch by mistake
Nradulovich,I will remove it 
chaburkland,That's not an issue! It's totally fine to add files to `sketch` folders. I was just curious if you wanted it reviewed or not.
ForeverWintr,Would this be better suited as a dictionary of section_type to color_map?
ForeverWintr,I see `'F2F2F2'` here and on line 124 above. Maybe a named constant for this color would be useful?
ForeverWintr,What does 'meta' mean in this context?
gdevanla,"Um..But, I don't have access to the `display_attrs' value until runtime.  I could only store the name of the `attr` in the dictionary correct?"
gdevanla,"Thanks, I have clarified the comment."
ForeverWintr,"That, or perhaps you could also build the dictionary at runtime? "
gdevanla,"Curious, what benefit do you see with building it runtime?  Plus, holding `attrs` to me is not really necessary here. I am also guessing this is probably faster (not that it matters much here)."
ForeverWintr,"I think a dictionary is faster (it's constant time, whereas this is linear), but I agree it doesn't matter here. The benefit I see of a dictionary is it can replace all your control flow. It replaces all your `if`s and raises a `KeyError` for you if the `section_type` doesn't have an associated value.   "
ForeverWintr,"Because I couldn't resist:  ``` In [1]: def ifs(s_type:str):     ...:     if s_type == 'category':     ...:         return 'cat'     ...:     if s_type == 'fund_type':     ...:         return 'fun'     ...:     if s_type == 'fund':     ...:         return 'fund'     ...:                                                                                                                                                                                                                                                                                                                                                                      In [2]: ifs('fund')                                                                                                                                                                                                                                                                                                                                                         Out[2]: 'fund'  In [3]: %timeit ifs('fund')                                                                                                                                                                                                                                                                                                                                                 112 ns ± 1.67 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)  In [4]: %timeit ifs('fund')                                                                                                                                                                                                                                                                                                                                                 106 ns ± 0.562 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)  In [5]: d={'category':'cat', 'fund_type': 'fun', 'fund': 'fund'}                                                                                                                                                                                                                                                                                                             In [6]: %timeit d['fund']                                                                                                                                                                                                                                                                                                                                                   33.3 ns ± 0.196 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)  In [7]: %timeit d['category']                                                                                                                                                                                                                                                                                                                                               35.3 ns ± 0.264 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each) ```"
gdevanla,"I see.   But, I feel storing 'attrs' in this case and then looking up on 'attrs' seems too much of an optimization.    This is how I see this implemented. Perhaps, you have other ideas on how this can be implemented.  ``` section_map = dict(category='category_color_map', fund_type='type_color_map', fund='fund_color_map') def  ifs(s_type: str, display_attr: DisplayAttrs):         attr =  section_map[s_type]         return getattr(display_attr, attr) ```  Is this what you have in mind? Or may be I am overseeing a simpler solution? "
gdevanla,"I also do agree that storing a dictionary (barring the one time cost of building) is faster.  I did not think of creating the dictionary outside this function, hence my earlier comment on the performance."
ForeverWintr,"I yield to your judgement as I'm not familiar with this code, but what if the dict was a `DisplayAttrs` attribute?  ```python  def  ifs(s_type: str, display_attr: DisplayAttrs):     return display_attr.section_map[s_type] ```"
gdevanla,"I see. Well, that kind of tie's the DisplayAttrs to this particular report/usage.  But, DisplayAttrs is used elsewhere in other ways!  Anyways, good discussion. Thanks for points."
vhquang,I like this change. `from_any` is stricter than `.make`. But does this writer accept `datetime.date`? Most usage for writers that I remember are just YYYYMMDD string.
vhquang,"I am curious, are we still using the legacy writers below, or are they going to be deprecated soon?"
vhquang,"Can you update the docstring and maybe the typehint, on what the return are? We are adding 1 more item to the return tuple. So a docstring that describes it would help clear things up.  And a nitpick, I don't think parentheses is needed."
vhquang,:+1: 
vhquang,:+1: 
vhquang,"I know you are just carrying the same idea from the old code, but do we need to handle this? It should be the responsibility of the caller to determine correct index.  In another hand, if we want to be nice to support larger-than-actual length, it maybe better to have `idx_upper = min(idx_upper, len(index) -1)`, rather than only supports `idx_upper == len(index)`."
vhquang,The code looks like it returns `PrettyDate` or `MISSING_VALUE`. Is this typehint outdated?
vhquang,"I don't quite understand this comment. If the target date is at index 0, how is it different than its expected logic (result is at or after target)?"
vhquang,"I see you are going for a log(n) performance here. But I wonder if that performance is needed, given that I see you have to handle different cases for `idx_upper` in your `_get_nearest_date` (last_index, first_index,...).  Alternatively, if we normalize the time index to list of distance from target date, ie: `[2020-01-01, 2020-01-02, 2020-01-03] -> [-1, 0, 1]` with target date as 2020-01-02, then handle `only_past` and `only_future` will be more straight forward and intuitive: `only_pass` is the max of negative, `only_future` is the min of positive. Performance is vectorized n-time, obviously not as good as log(n) but IMHO not very bad.  Given you already smooth out all the corner cases, I am very reluctant to suggestion change. But how often we use this function, and which routine that will be most affect by it? I am trying to find measurement of the benefit, to justify the complexity."
chaburkland,"To be honest, I'm not sure. I get confused by older modules that accept different formats for dates, and aren't typehinted. I think I have been using `.from_any`, because it seems like more work than it's worth to investigate what the actual type of `as_of_date` is."
chaburkland,"They will be removed - but in the future. The plan is to run the legacy & new writers in parallel. That way, we can do study builds, compare differences, and then switch over to using only the new implementation once we are ready.  This PR isn't handling the final switch to using the new pricedata readers/writers, only adding all the implementation for it."
chaburkland,"Is the docstring not clear to you? I re-read it and I think it's accurate          ```Runs every business day and sources bbg data currently used by helix```  I can add a comment that we'll be sourcing legacy + new until we're ready to switch.  And stylistically, I really like those parentheses, although you are right, they are not needed."
chaburkland,"These are great points. I think I've realized what's happening. I moved around this code a bit, so it's not in the same order as before.  The only person calling this method is `get_nearest_date`, and it's determining `idx_upper` from either `searchsorted` or `bisect_left`. Both of those methods will return `len(sequence)` if the value being looked for is not found.  It will be better to have that method sanitize `idx_upper` before passing it to this method though. I'll update it"
chaburkland,Yes - I'll update.
chaburkland,"I was just copying over old code + comments, but you're right  - this comment is incorrect. If the target date is at index 0, this will return 0, which is expected. I'll remove this comment."
chaburkland,"From what I know, `regression.py` is a core library used by most RAPC processes, and `SingleSeries` especially is used all over the place. Looking around, I see that `get_nearest_date` is called twice whenever `get_excess_returns` is called (once with `only_past` and once with `only_future`). I think it's safe to assume this routine will be called a lot.  As such, I'm extremely hesitant to change any of the logic or edge case handling. I also was very sensitive to wanting static-frame support to not introduce any performance losses. As I was comparing/profiling, I found the calculation of `idx_upper` to be the performance bottleneck. Pandas has `searchsorted`, which is extremely optimized. I thus needed something that provided similar benefit for sf, and `bisect_left` seemed like the best choice. I think this method is intended to be a very fast method that quickly determines the nearest date in a series, and so it seems like optimizing this for speed is warranted.  TL;DR; - I don't know for sure that this isn't an micro-optimization, but I am fairly confident this optimization is warranted."
flexatone,I see we used to pass `tolerance_days` to this call; do we not need to anymore?
flexatone,Maybe an f-string here?
flexatone,"These ""naked"" Booleans here make me think the signature should be kwarg-only."
flexatone,Wow: I had no idea you could compare dtypes to strings! Better maybe is to store `np.dtype('datetime64[D]')` as a class attr and compare directly to another instance.
flexatone,"```suggestion         elif not isinstance(date, np.datetime64): ``` ?"
flexatone,Yes: this is used frequently: the performance consideration is important. @chaburkland : please create an issue for SF to add a `searchsorted` method.
flexatone,"While the time series is not available to reproduce this test, we should consider if we have enough coverage on  `get_date_intersection_mask`."
flexatone,"As I say below, I understand the input data is gone, but should be at least testing one case of a multifactor regression. The new multi-factor inputs are now a static resource, so something similar to this test can be restored."
flexatone,"You might want to do this another PR, but we want to deprecate `DatabaseInterface` in favor of using papyri util functions `write_stored_proc` and related, so that ultimately this does not inherit from `DatabaseInterface`."
flexatone,Why are we collecting this? Mutating instance attributes over the life of an instance is undesirable.
flexatone,"```suggestion     def spot_rates(self) -> tp.Dict[FX_ISO, tp.Dict[date, float]] -> tp.Dict: ```"
flexatone,"```suggestion     def build_frame(self,             sec: str,             records: tp.Sequence[tp.Sequence[tp.Any]],             as_of_date: date,         ) -> sf.Frame: ```"
flexatone,"Not sure if it makes a difference, but you could do the following. It might be a tiny bit more efficient. ``` records.clear() records.append(values) ```"
flexatone,It is probably just me but I find `klass` a bit dissonant; maybe `cls_legacy`?
flexatone,"```suggestion     def _parse(self,             secs: tp.Sequence[str],             *,             min_days: int,             tr_adjust: bool = True,             ca_adjust: bool = True,             special_dvd_adjust: bool = False) -> None: ```"
flexatone,Do we need this check? 
flexatone,So much better!
flexatone,"```suggestion     def apply_fx_adj(cls,                 frame: sf.Frame,                 *,                 ca_adjust: bool,                 tr_adjust: bool,                 special_dvd_adjust: bool,         ) -> np.ndarray: ```"
flexatone,"```suggestion     def process_frame(cls,                 raw: sf.Frame,                 *,                 ca_adjust: bool = True,                 tr_adjust: bool = True,                 special_dvd_adjust: bool = False,         ) -> sf.Frame: ```"
flexatone,"```suggestion     def process_series(cls,                 raw: sf.Frame,                 *,                 ca_adjust: bool = True,                 tr_adjust: bool = True,                 special_dvd_adjust: bool = False,         ) -> sf.Series: ```"
flexatone,"```suggestion     def extract_sec(self,             sec: str,             *,             tr_adjust: bool = True,             ca_adjust: bool = True,             special_dvd_adjust: bool = False,         ) -> sf.Frame: ```"
flexatone,"```suggestion     def _load_and_process(self,             secs: tp.Iterable[str],             process_func: tp.Callable[[sf.Frame, bool, bool, bool], tp.Union[sf.Frame, sf.Series]],             *,             tr_adjust: bool = True,             ca_adjust: bool = True,             special_dvd_adjust: bool = False,         ) -> tp.Union[sf.Frame, sf.Series]: ```"
flexatone,"```suggestion     def get_sec_dfs(self,             secs: tp.Iterable[str],             *,             tr_adjust: bool = True,             ca_adjust: bool = True,             special_dvd_adjust: bool = False,         ) -> tp.Dict[str, pd.DataFrame]: ```"
flexatone,"```suggestion     def _apply_fx_adj(             df: pd.DataFrame,             *,             ca_adjust: bool,             tr_adjust: bool,             special_dvd_adjust: bool,         ) -> np.ndarray: ```"
flexatone,"```suggestion     def extract_sec(self,             sec,             *,             tr_adjust=True,             ca_adjust=True,             special_dvd_adjust=False,         ): ```"
vhquang,That is fair assessment.
vhquang,"The docstring is clear on what the function does. The missing that I am looking for is the description of the output. In the past, I had come across tuple unpacking such as: ``` _, b, c, *_ = foo() ``` And when the function changes the length of its return, it leaves confusion on which is which."
vhquang,"I didn't mean to change the logic of handling edge case, but I mean to replace the binary search with a linear search, and taking performance loss for simpler handling of `only_past` and `only_future`. However, if you already confirm finding `idx_upper` is the bottlenect, then that is the valid ground for this improvement. :+1: "
chaburkland,"Yeah that's a valid concern. In this context though, each of these methods can return either one or more writers. You can see the only client of them at top of the file defined in `WriterTaskFactory.get_all_writers`.  ```python             if inner._multiple_writers:                 yield from writer_wrapper.writer             else:                 yield writer_wrapper.writer ```  So this output should not ever be unpacked, rather, yielded from. Basically, I don't think the number of writers returned matters here."
chaburkland,@flexatone I see you made the issue already!
chaburkland,"Nope! That variable was only ever used in some cases _if_ `start_date` and/or `end_date` was provided as a parameter. However, no one was passing in `start_date` or `end_date` except some tests, so I removed all three from the interface, as well as the branch that handled that code."
chaburkland,What about adding it to `datatypes.py`? It seems more appropriate to put it there.
chaburkland,"Haha! This branch bit me too. I made it `elif` too, but it ended up breaking things.  Basically, the first branch is only checking strings of the format `YYYYMMDD`. That's handled specifically. Otherwise, the next if-statement handles all other types that are not already numpy dates.  So, for example, it will handle both:   `datetime.date(2020, 12, 31)` and `""2020-12-31""`.    Putting an elif-branch here will exclude the case of strings passed that are not in the format `YYYYMMDD` (e.g. `YYYY-MM-DD`).   Given that, do you think it's appropriate/necessary to make this code more explicit, or is just adding a comment sufficient?"
chaburkland,"I wasn't sure when I left it in, but investigating now I think it's fine to remove.  Nothing is failing this check currently, and if it was removed and silently ""failed"" in the future, the worst that happens is that the security data for the duplicate security gets processed twice. Everything ends up in a dictionary keyed by security, so it would just override itself with the same security series/frame."
chaburkland,"I've reverted this method back to returning a frame, so I will update the typehint appropriately."
flexatone,"I see, sounds good."
flexatone,"Sure, that is fine too."
flexatone,"Ah, I see. That you are handling `YYYY-MM-DD` is the surprising bit. I think just a comment saying that will do."
chaburkland,"From testing, it seems to actually be slightly slower, although the margin is slim. Also, `records = [values]` reads very clearly to me so I think I will leave as is."
chaburkland,Yeah - I was really happy to clean this up
chaburkland,I'll work on this in a separate ticket!
chaburkland,"This was initially for testing, but it's indicative of something I've never sure how to address when working with fx rates. I don't think it makes sense to fail if fx rates are missing, but I also want there to be infrastructure built to allow for analyzing those failures. It feels wrong to not keep track at all of which lookups fail due to my fear of silent failures. Although, as my code is now, nobody cares or knows that I am keeping track of failures.  What do you think is best here? I am torn."
chaburkland,"That's a good point, although I will need help with this, as I am really struggling to modernize this test. Most things have been deprecated or removed, and I'm not familiar enough with the domain to know what appropriate replacements are. I'll still go through with the merge, although I will create ticket for adding these tests back."
chaburkland,"That's a good point, although I will need help with this, as I am really struggling to modernize this test. Most things have been deprecated or removed, and I'm not familiar enough with the domain to know what appropriate replacements are. I'll still go through with the merge, although I will create ticket for adding these tests back."
flexatone,"`gh841a` is an unconventional suffix here, but this is not a normal build, so maybe this is fine!"
gettodaze,"Ah, @flexatone what would you typically use as a suffix for a build created for testing?"
flexatone,"Well, as this is not production candidate, you could just use no suffix. Does GH here refer to the GitHub ticket?"
gettodaze,"Ah, I see. John H wasn't sure what to put as the suffix, so he suggested this one, referring to the github issue. "
ForeverWintr,Should you guard against mode not matching either of the `FundConfigurationAction`s here? 
ForeverWintr,"Minor style point: I find large `try: except:` blocks like this hard to read. When there there is so much code between the try and except that you can't see start and end on the same screen, it becomes hard to remember what level of nesting you're at. Could this be two functions? In this case I think the rollback behavior would work well as a decorator."
ForeverWintr,Are these important?
gdevanla,I will remove them. I wasn't sure if I would need them and therefore had left it there.
gdevanla,"Sure. Good to add that check. Even, though we don't expect any other variants of that."
gdevanla,"Agreed.  I did not take the decorator approach since I need the `db_session` and that is only available during runtime. Plus, the abstraction here was not needed.  Please could you review the new changes and let me know if that is clearer."
gdevanla,"For now, this is hard-coded. Please ignore."
vhquang,"Thank you for clarifying. I am just curious, I don't see it is being used anywhere in this module. Is it used somewhere else?"
vhquang,"Nitpick, I don't see `ha` alias being used anymore. Maybe we can just have `holdings_attrs`."
vhquang,"Is this `main` function being used in other place, or just your test run code. I miss the context why we skip returning radar data."
vhquang,TODO: remove ipdb :smile: 
gdevanla,"Yeah, it is used in the base class. I have to address this usage globally and update them to use symbolic constants or pre-defined enums."
gdevanla,"yeah, this is a sketch module. But will still remove it! Thanks!"
gdevanla,This is just a helper script in sketch folder. Not used any where else except for me debugging stuff.
chaburkland,What is the purpose of `_=None`?
chaburkland,Maybe: `sel = holdings['SEDOL'].via_str.len() != 7`
chaburkland,"This is marginally faster, but maybe: `holdings = holdings.assign['weight'].apply(lambda s: s/100)`"
chaburkland,"This is another minor point, but I'm wondering if a symbolic constant like `DATE_FORMAT = '%m%d%Y'` would be helpful, since it's not the typical format we use, and I've seen it in a few places now. "
gdevanla,"Thanks, I forgot the new way which Chris showed. I was hoping someone will point me to that :)"
gdevanla,"The difficulty is vendor's dream up so many format, its so difficult to come up with names differentiating these. But,  your point is taken and I can atleast locally add a symbolic constant in this case."
gdevanla,I like these Type aliases!
gettodaze,"I don't see any reference to `Panel` in `DFLoggerClient.log`. Do these functions still handle `Panel`s? Also, are you able to add type hints to these functions or does the `pipe_node_factory` not allow it?"
gettodaze,"Also, maybe this is just for my own understanding, but `pni` stands for `PipeNodeInput`, right? Why isn't `DFLoggerClient` a subclass of `PipeNodeInput`?"
gettodaze,"Can I ask what the goal of this PR is? The title says `remove pd panel` but the `Panel` is still being used here. Is there a different object called a `Panal` that you're removing? Also, the test name is still `test_panal_financials_a`, not sure if that's intended."
gettodaze,"I like to make functions with 3+ arguments kwarg only, but that's personal preference (and I don't know if there needs to be a positional arg for the factory)."
gettodaze,This might be another good place to consider kwarg only for example.
gettodaze,"Ah, is this any `GEU/GEIU` object? I was wondering if there was a good type hint for them, but I see that maybe it is just tp.Any."
gettodaze,"Do we now refer to `tp.Dict[str, pd.DataFrame]` as a panel? Or should this be a dict of pd.DataFrames?"
gettodaze,What made you decide 10 workers instead of 4?
gettodaze,"Ah, I think I get it now: we are keeping the usage of the word `panel`, but it now refers to a `tp.Dict[str, pd.DataFrame]` instead of a `pd.Panel`? Is that correct?"
gettodaze,"Is this something you intended to change, or is this a github artifact?"
chaburkland,Good question. The PR is to remove `pd.Panel` from the _blender_ tlt. Not from the entire code base. I updated this file because I saw a typo ('panal' -> 'panel') that annoyed me.
chaburkland,"Yeah, pipe node factories are a bit weird. `PN_INPUT` and `PREDECESSOR_RETURN` are positionally bound to the first two arguments, (`bi` and `predecessor`, respectively), so _technically_ this function only contains two args: `price_db` and `tolerance_days`.  I think it's worth making those two arguments kwarg only, since pipelines are already confusing."
chaburkland,"I think this is only called in one place, but I'll go ahead and make it kwarg-only."
chaburkland,"Yeah, I wanted to provide a typehint here, but most of the code relating to building `GEU/GEIU` code was entirely un-typehinted, and there were a large selection of possible classes, some from different TLTs! I decided to go with `tp.Any`, as typehinting (and understanding) the GEU/GEIU code was outside the scope of this PR."
chaburkland,"Yeah, `panel`s in this context are dicts. I'm confused by this comment though. The typehint for this method is accurate, no?"
chaburkland,"10 workers was faster, haha."
chaburkland,Yeah
chaburkland,"I did change it, as a quick workaround for a bug in tasks.py. I will remove this as there is going to be a ticket made for that bug."
chaburkland,"Yeah they do, because of duckiness. It's because it's only using the `__getitem__` method of `pd.Panel`s, which is functionally no different than calling `__getitem__`on a `Dict[str, Frame]`.  And yes, I can typehint pipe_nodes, I just didn't for this one. I'll go ahead and typehint the arguments I know."
chaburkland,"And yeah, I typically use `pni` to refer to the `PipeNodeInput` instance bound in the pipeline.  In this context though, that instance only needs to be a ` DFLoggerClient`, so I'll update the argument name to be more appropriate."
gettodaze,"Ah, interesting. Good to know."
gettodaze,"Oh, yes, I was just referring to the docstring that says `tpan: the tranch panel`"
gettodaze,"Or I should rephrase, I think if you pass `None`, it automatically sets to max. Is there a reason you're choosing 10 instead of max?  >  ``` class ProcessPoolExecutor(_base.Executor):     def __init__(self, max_workers=None, mp_context=None,                  initializer=None, initargs=()):         """"""Initializes a new ProcessPoolExecutor instance.          Args:             max_workers: The maximum number of processes that can be used to                 execute the given calls. If None or not given then as many                 worker processes will be created as the machine has processors.             mp_context: A multiprocessing context to launch the workers. This                 object should provide SimpleQueue, Queue and Process.             initializer: A callable used to initialize worker processes.             initargs: A tuple of arguments to pass to the initializer.         """"""         _check_system_limits()          if max_workers is None:             self._max_workers = os.cpu_count() or 1 ```"
chaburkland,"Oh okay. Yeah, we refer to things as ""panels"" that aren't technically `pd.Panel`s. For example, the `FinancialsPanel` does not actually use a `pd.Panel`. I guess the way I think about it, is that panels are conceptually maps of labels to frames, where those frames are aligned by index/column. `pd.Panel` merely provides some vectorized operations and syntactical sugar, but conceptually the underlying data structure could be substituted with a dictionary."
chaburkland,"It's kinda arbitrary. I typically don't like to use all resources when multiprocessing, but I like to use a lot, and so I typically use 10. I can't fully justifying why that's my preference :man_shrugging: "
gdevanla,I will remove this in a week by when I hope to move this to PROD.
brandtbucher,"```suggestion         msg = f'{k1}\t{k2}\t{v}\n'         messages.append(msg)     with open(file_path, 'w') as f:         f.writelines(messages) ```"
vhquang,"Maybe we can create the `set` from `du.date_range`, to avoid re-create it inside the loop."
vhquang,"I am curious. What is the meaning of `calendar_code`?  Is a vendor's code for frequency (daily/monthly), or for per country?"
vhquang,"I think if we group this filter within a parentheses, it would improve the brevity of this query. Ex: ``` fr.return_characteristic_id INNER JOIN portfolio_map pm ON (         pm.source_portfolio_id = fr.source_portfolio_id          AND pm.vendor_name = drc.vendor_name          AND pm.dataset = drc.dataset         AND cast(timezone('America/Los_Angeles', fr.updated) as date) >= '{starting_data_date}'         AND cast(timezone('America/Los_Angeles', fr.updated) as date) <= '{ending_data_date}'         ) ```"
vhquang,"If we don't expect the data to be changed, then would it better to extract the query result as fixture and mock it, to avoid a database call?  /edit: I think I see why you are using live database call below. It would be easier to pick another problematic day to spot check the validation. I will leave this as a discussion rather than a suggestion, to understand more your decision."
gdevanla,Its a code invented and maintained by Bloomberg and it part of the holiday information we get from Bloomberg.
gdevanla,@vhquang Can you explain what you meant by 'It would be easier to pick another problematic day to spot check the validation`.  
vhquang,"At first I was thinking it would be better if we setup a static fixture for running test (also I didn't notice this is a integration test, not unit test). But then I saw a test below this, that you pick a holiday to run your `ValidateMissingReturns`. When I was working with GMac for daily signal, I pick a list of several days (before/after rolling day, last bd, first bd) to make sure my code runs on those days. Using real data in different days saves me from creating fixture for each scenario.   I was just curious if you are under the same motivation while setting up your tests for this validation. For me, the pros of using fixture is that it makes the tests more lightweight and isolate into a scope of an unittest. The pros for using live db call is that tests are more extensible. If in future we find more problematic case, all we need to do is adding that day to test, and no need to create new test fixture. I think the benefit of second case is more than the first. I would like to hear your thought as well."
gdevanla,"Yeah, I summarized this well. I believe the latter case to be beneficial and needs less boiler plate (plus we always test against production).  So, where possible I prefer that approach. By boiler plate, I mean, the entire process to set up fixtures and also deal with keeping those in sync with changing shape of data in PROD."
ForeverWintr,Is this because Invoke runs with an older version of python or something? Would `from __future__ import annotations` help?
ForeverWintr,"If I'm understanding correctly, this removes EVERYTHING that's gitignored. That includes things we don't want to remove, like `.vscode` and wing's project files, as well as `charles*`. I think the explicit whitelist is preferable. "
brandtbucher,"Unfortunately not. It's because `invoke` uses the old `inspect.getargspec` API, which can't handle annotations or keyword-only parameters. It can be fixed by using `inspect.signature`, but it appears that they still don't have a patch:   https://github.com/pyinvoke/invoke/issues/357"
brandtbucher,"Nice catch. I don't have any untracked files in this repo, so I missed that."
nekobon,What does this `-1` mean? (maybe a comment would be great here)
ForeverWintr,"It's the `history_index` to use, meaning, look up attributes according to this location in the history of the product. `-1` is the most recent.   Good point about clarifying what it is. I think I can just pass it as a kwarg, which at least identifies what it is."
gettodaze,I like your checks!
gettodaze,Is this a note for the future? It might be better to put `Note: could be optimized by using ...`
gdevanla,Good catch. That was the issue this PR addressed. I will remove that comment!
gdevanla,"if you are using `__name__`, then you can remove `str`"
gdevanla,"same, no need for `str` anymore."
gdevanla,This check would only work for MS SQL Server. It would not work for Postgres. The new holdings writiers John H is working on connects to Postgres.
gdevanla,Any reason why you might not want to create a Series here.  Would that make the output uniform?
gdevanla,The return type Type Hint needs some update.
chaburkland,Thanks! I'll add some exception handling
chaburkland,"This method is returning strings to display, and for simple lists, printing them out each on a newline is sufficient"
gdevanla,nitpick: typo
gdevanla,"Why not just create the list with one item, rather than create a list and append one item."
gdevanla,interesting choice. Just a question even though not part of this change.  Why is `RequestParamsPayLoad` a TypedDict? Could it have been a `NamedTuple`?
vhquang,"It's just a minor styling preference from me. A list of with one item requires one extra level of indentation. The append, I can tuck the parentheses of the inner tuple to the level as the `append()` parentheses."
vhquang,The payload is the JSON return/required by PARC web API. It is buried inside the controller of PARC: https://github.com/ResearchAffiliates/invsys/blob/37f236bee297831eafe856831e3f96cb030bbc27/PARC/control/request.py#L328-L333  I just want an abstract view of which keys and which type the payload needs: https://github.com/ResearchAffiliates/invsys/blob/37f236bee297831eafe856831e3f96cb030bbc27/PARC/control/request.py#L394-L403 with some hope that once day we can utilize type-checker (ie: mypy) to systematically check this. But I admit I didn't research far enough into using type-checker for this purpose.
gettodaze,Interesting comment tag!
gettodaze,"I don't like referring to `raeqc` as both `rae_qc` and `raeqc`, but I see the codebase uses them both too. I like that you stuck with `rae_qc rae-qc RaeQc` for the all your additions."
vhquang,"As you already know, the `raeqc` for cliqc come as part of `RAEQC`, which is a tool written a while ago. On the PARC side, I would like to have more specific name than just `rae-qc`, but Chris thought that may be unnecessary, as `RAQC' has been used  for all of our needs. Ie: we will unlikely to have another addition for RAE family line."
ForeverWintr,Just want to make sure you see this!
ForeverWintr,Thanks for removing this!
nekobon,"No, I didn't! Thank you for pointing it out! "
flexatone,Remove?
flexatone,"It used to return tuple, now a list: should it be a tuple?"
flexatone,Do we still need this routine? I thought this was only needed for the time when we were drifting RMS sleeves in Factset; we do not do that anymore.
flexatone,Somewhat awkward to have to use a private attribute here.
flexatone,Private attribute usage?
flexatone,Probably do not want to leave these `print` statements.
flexatone,"I see that we were using `random.choice` here, but it is not good for a test to have randomness like this! If we want to test, maybe we should just test all of them."
flexatone,Is this comment still needed?
flexatone,Nice use of `StoreFilter`!
flexatone,Can we get rid of `**kwargs` here?
flexatone,Can we get rid of `**kwargs` here?
flexatone,```suggestion             if not w.ACTIVE ```
johnjhawk,yes!
johnjhawk,yes!
johnjhawk,"It looks to me like we do. I think we can get rid of the reference to it in rms.py pretty easily, but rms_drift.py looks like it is still using it."
johnjhawk,"I agree, but before there was a public method that simply returned a private attribute and did no transformation or verification of any kind.  I figured it was safer to get rid of the public method and then at least the user would know they were getting a private attribute. I'm happy to change the _fp to a public attribute but I don't think that's the right move either. "
johnjhawk,"copied from previous comment: I agree, but before there was a public method that simply returned a private attribute and did no transformation or verification of any kind. I figured it was safer to get rid of the public method and then at least the user would know they were getting a private attribute. I'm happy to change the _fp to a public attribute but I don't think that's the right move either."
flexatone,Can you check with Yu? We might be able to get rid of it.
johnjhawk,"it was a sketch, but I agree that it's not needed anymore. It was just to help me create the original writer classes."
flexatone,"A public method is not just about ""transformation or verification"", but about providing a layer of abstraction: we can change or rename the usage of `_fp` without expecting external clients to be affected. So the general principle still applies: clients should not be accessing private attributes. At least providing a functional getter does not permit accidentally re-setting the value, but a property can also be used."
johnjhawk,great point. This was one of the tests that I brought over from the old asof classes and didn't notice the random choice usage.  I'll factor it out.
johnjhawk,I think so. Guru is currently working on this issue (1067)
johnjhawk,yep
johnjhawk,yep
johnjhawk,"fair enough, I'll add a public method."
johnjhawk,"fair enough, I'll add a public method."
johnjhawk,"I spoke to Yu and she said that we could remove the ""holdings_asof_rms.py"" usage out of rms.py fairly easily, but was not sure about rms_drift.py. I'll dig deeper into is."
flexatone,Can we use symbolic constants from `hw` for `dataset` too?
flexatone,"This is `datetime`, not a `date`; if you want a date, you can do: ```suggestion DATA_DATE_START = datetime.datetime(1992, 1, 31).date() ```"
flexatone,Do we need this? Why not always write to `/tmp`?
flexatone,"```suggestion         for date in du.eom_range((DATA_DATE_START.year, DATA_DATE_START.month), (current_date.year, current_date.month)): ```"
flexatone,Is this the right return type?
flexatone,We can remove this `print` now I suspect.
flexatone,"As I suggested above, if we are  going to  `upload`, we can still write to `tmp`!"
AlanMLin,I don't see Guru defined symbolic constants for dataset in hw. I will check with him.
AlanMLin,implemented
AlanMLin,"I still need to copy the monthly output file style_analytics_<yyyymm>.csv to a folder on G drive for Tom after I run the script, so I decided to write to a G folder directly and let Tom to get the file from there. If later we have a FTP with Style Analytics, I will then update the --upload function to write to FTP."
AlanMLin,implemented
AlanMLin,I changed it to -> tp.Iterable[int]:
AlanMLin,Removed
AlanMLin,"See my comment above. Please let me know if you think we still should write to tmp, not to G drive."
flexatone,Why do they need to go to G drive? Can we just email them to Tom?
AlanMLin,I found where Guru uses symbolic constants for dataset. I replaced string with constant in both main code and the test code. But I had to use MORNINGSTAR_D for dataset because MORNINGSTAR is already used for vendor name.
AlanMLin,"For monthly output file which is about 2.5 MB I think that's okay to send to Tom in email. But the historical file for some portfolios are pretty big, MSEGGMUG is 65 MB for example, too big to send in email. Is that ok?"
nekobon,What is the type of `attrs_nt.converter`? Is it a classmethod?
chaburkland,"Previously it was a lambda method that took an unused self argument! `lambda self, x: x * 100`. I removed the self argument since it was only used here, and converting it to a staticmethod ensured that it worked properly"
chaburkland,@nekobon here is where I removed the unused `self` argument
nekobon,"If we don't have `self` anymore, do you still need `staticmethod()`?"
chaburkland,"Yes! Because this is called by an instance (on L495 above) like so: `self.CURRENCY_CONVERTER(x)`. If it's not a staticmethod, it will fail due to it trying to pass self in as the first argument.  "
vhquang,`field_aggr_factors` is used earlier in the code. This refactor is simply to avoid double use of variable.
vhquang,You can ignore this module. It is just sketch for me to test run and explore `FrameRecipe`.
vhquang,"I tried to make this exclusion function compatible with Kleio, by trying to use `fieldattrs`. However, the tricky part is I need an `standardized` frame, since my `ISSData.get_x_exclusion` works on the original ISS columns.  I might be able to get it to work, by passing `frame_factory` down to here, in order to standardize the frame. However, it feels a bit weird from my mental model of:  frame <-- FrameFactory <-- FrameRecipe <-- ColumRecipe so I choose another simpler path, which is to use `ColumnRecipeNameFinder` to retrieve raw columns."
ForeverWintr,It seems to me that we should probably fail if this report is called with a product family it doesn't support. How come you return an empty frame instead?
ForeverWintr,"Yes, I see the dilemma. I think you can't convert `ISSData.get_x_exclusion` to use FieldAnchors, because it's part of the production methodology?  At this point it would be difficult to use kleio for this without having fieldattrs."
ForeverWintr,"You may want to pass `Frozen=True` here. That stops the factory from loading histories other than the ones you've provided.   ```suggestion         factory = FrameFactory.from_histories([rmc_hist, DistributionHistory.from_did(rms_did)], Frozen=True) ```"
ForeverWintr,Is ISS_Data a class that holds a different string literal? If so I think a link to ISS_Data is better. 
ForeverWintr,Nice addition!
vhquang,"`ISS_Data` hold the same string, for now. And since you are differentiate through time, I thought it would be better to have string literal so that it won't be affected if I update `ISS_Data`."
ForeverWintr,That makes sense!
vhquang,"I am not familiar with how forgiven Cliqc tool should be. John H told me he was forgiving with `pmbuild` and return DataFrame with basic info (SEDOL, BB_ID...) if the tool is run on expected family, and not raise error. And I am not sure if Cliqc has a way to communicate that error to the submitter.  But he was not using FrameRecipe. If I need to construct a separate recipe for an forgiving case, it seems over engineer.   When I think more about it now, I like your suggestion. Not many people will be using this report often, so I would rather be strict, than be forgiving, at this point."
vhquang,"in the long term vision, I think we would want to use a single identifier engine (like FieldAttr/FieldAnchor), so that it is interchangeable between methodology and report. But it is a larger discussion, and a bit too early for me to start using FieldAttr in the methodology.   Besides, the CTI methodology is currently base on Fields from the Reader. So I would need to set it like:  methodology <-- Reader <--- FieldAttr if we want to go this route. And I would need more thorough discussion about this before I go."
ForeverWintr,"FYI, if you do want to be forgiving, some recipes have `allow_missing` and `missing_data_fill_value` attributes. You can use these to fill missing values with a constant (in cases where a build doesn't have the column you're looking for, for example)."
vhquang,"I like the typehint for return type, but the `tp.Dict[tp.Tuple[int, datetime.date], str]]` is a bit cryptic for me. I think it would be good if we can describe it in the docstring, maybe as list of error messages?"
vhquang,"The `Text` column type has variable length. For our changeset length, the max possible length is currently 40. And I think it will be safe with that length for a while: https://stackoverflow.com/questions/18134627/how-much-of-a-git-sha-is-generally-considered-necessary-to-uniquely-identify-a  So, I think using `String` with maxlength 40, will be better here, as the database will know exactly the size needed."
vhquang,"I am just curious, why it is renamed to `update_returs_staged`? It is only for staging environment?"
gdevanla,"yeah, this refers to updates to the staged table."
gdevanla,"yeah, it really doesn't matter for Postgres.https://www.postgresql.org/docs/9.1/datatype-character.html.   Therefore, I really didn't consider setting it to 40. It is more for documentation! "
gdevanla,Good point! Fixed.
flexatone,Do we want a mutable as as a default class attr here?
flexatone,Doing this `or` on an element-wise processor seems a little expensive; perhaps doing this as class-level `cls.FIELDS_NUMERIC` is better.
flexatone,```suggestion         def exhaust(gen: tp.Iterator[tp.Any]) -> None: ```
flexatone,Should this be a `datetime` or a `date`?
flexatone,```suggestion             def parse_until(marker: str) -> tp.Iterator[str]: ```
gdevanla,Yes. Good point. Forgot to carry this change from previous version.
gdevanla,"Good point on performance.  One reason why this needs to be lazy is makes derive classes could override them  But, I will find a way to cache this."
vhquang,"Interesting, I didn't know that there is no performance difference for Postgres. Thank you for pointing out and referencing it!"
johnjhawk,there is no longer a holdings_asof_bundles module (as of yesterday) this will fail now. The new product_id_to_writer() is in the holdings_live module.  
gettodaze,"@johnjhawk This should be fixed now! I was originally just using `holdings_asof_bundles` to get the `{product_id:writer}` map, so now I am using `from papyri.core.writers.holdings_live import product_id_to_writer_all`."
nekobon,"I see the empty tuple is lighter but if we never expect the value to be any tuple, I think an empty dict might be better for readability"
nekobon,"Will the retired parameters be removed sometime? John told me his great idea before about stating the expiration date of the parameters ""to-be-removed""."
flexatone,But having a mutable dictionary as a default arg on the class level is just as bad as a mutable default arg in a function signature! So that is why I went for an empty iterable.
flexatone,"Once the strategies that use the retired parameter are out of a window, then they can be removed. "
nekobon,"Mutable default arg is bad because it keeps the mutated state on the next call unexpectedly. In this case, we don't mutate it in the client code (if so, we cannot use any dict in param values), and we change the values by simply overriding at inheritance. "
flexatone,"Sure, I see your point. If only we had an immutable dictionary..."
gdevanla,Code golf:    ```suggestion         name = name or  f'{cs1.__name__}_{cs2.__name__}' ```
gdevanla,"Can we add a note here saying, we shift back the date_end if it falls on the middle of month, rathar than shift forward.   Or maybe should we consider having an argument for that?"
gdevanla,Is this TODO still valid?
gdevanla,Can we add a type hint for the return type?
gdevanla,missing type hints here as well.
gdevanla,type hint?
gdevanla,type hints.
gdevanla,I like the definition of 2 different named tuples to distinguish what they hold!
gdevanla,type hints?
gdevanla,Use of `f` for variable name and `f-strings` is little confusing. Maybe a better name?
gdevanla,"Not sure. Should this be capitalized, if refering to `US` are a country/region? Or maybe it is clear this way!?"
gdevanla,type hints.
gdevanla,Is this `None` needed for some abstract function return type compatibility? I do not see any other return statement here.
gdevanla,may be the doc string here is out of date?
gdevanla,type hints
gdevanla,"doc strings again, may be out of date."
gdevanla,Is this #TODO still valid?
gdevanla,TODO alert :)
gdevanla,"Curious, I thought you don't have to provide an emptry string. just calling ```suggestion         raise NotImplementedError() ```  should do, correct?"
gdevanla,Are you able to provide type hints for the base class?
nekobon,"I think it's fine to keep it lowercase, because uppercase (cls.US) could look more like a class attribute."
nekobon,Yes! I'm not sure why I put the empty strings there
johnjhawk,Can 6105 be a variable so the name can suggest what it is?
chaburkland,Will do.
AlanMLin,test comment
gdevanla,nitpick: Would it make sense to do the entire construction inside one function? 
gdevanla,"I don't do this studiously myself. But, given the preference for `staticmethod` may be consider making this a `staticmethod`."
ForeverWintr,Probably! I can move the co_fields into the function as well. 
ForeverWintr,"I agree. I didn't actually write this, but I'll change them to static method."
ForeverWintr,"Are you leaving this here because we might need it in future?  What if we left a note of the changeset in which it was removed instead of leaving the commented out code here. That way if we do need to look at it in future, we can go back to the time when it was active. "
ForeverWintr,Should this still be here?
ForeverWintr,"In general I think it's helpful to add a deprecation reason, as I've come across these tags on active code before, and not been sure what I should use instead. In this case I assume the reason is, ""our code is on github now"".   Do we still need this class?"
ForeverWintr,"I think we can remove this, right?"
ForeverWintr,Nice TODO busting!
ForeverWintr,Can we remove this? I'm definitely ok with rewriting it if we ever need to go back to upsource. 
ForeverWintr,I don't think we need these?
ForeverWintr,can we remove this?
ForeverWintr,can we remove this?
ForeverWintr,can we remove this?
ForeverWintr,can we remove this?
ForeverWintr,can we remove this?
flexatone,Removed!
flexatone,"We probably do not, but it is being used still in a number of places. I will create a ticket to remove it entirely."
flexatone,Yup!
flexatone,hahaha... It was part of an ancient workflow too...
flexatone,Agreed.
flexatone,Agreed!
flexatone,Gone!
flexatone,Gone!
nekobon,:+1: 
brandtbucher,"Maybe make this a module-level constant?  Also, maybe make this a `frozenset`?  Also, could we just make this a set of actual types, instead of names? That seems a bit clearer and safer to me."
brandtbucher,```suggestion             elif w.__class__.__name__ in writers_with_no_defined_connection: ```
chaburkland,"I'll make it a frozenset, but I'm not quite sure I want to put it at the module level since it's exclusively used by this function."
brandtbucher,"Well, it would just be the classes (without the `__name__` part). The reason why I bring this up is because just comparing the name strings is fragile. If a writer is renamed, this would silently stop working (most refactoring tools don't replace names in strings)."
brandtbucher,"...and on the point of this only being used in one place, I still think that constants like this should be module-level. If I'm building a big set or dictionary inside of a function, I expect to either manipulate or return it. But I guess it comes down to personal preference."
chaburkland,Yeah. I will import classes directly since that is much more robust. I needed the push. It's also better because I can do an isinstance check instead of class name comparison.
brandtbucher,> It's also better because I can do an isinstance check instead of class name comparison.  Is that safe? Do we have cases where a writer with a connection inherits from one with a connection? Seems like it might happen...
brandtbucher,"Okay, cool."
chaburkland,"It should be...  If `class A` has no connection info, but `class B(A)` does, then the initial if-statements will discover the connection attrs on the `B` instance before we get to this branch."
ForeverWintr,"What if `spec_df.loc[cls.CHINA_A_ACTIVE_FIELD, 'value']` is `'true'`? Maybe we should do something more elaborate like:  ```suggestion         val = spec_df.loc[cls.CHINA_A_ACTIVE_FIELD, 'value']         if val is True:              return True         try:             return val.lower() == 'true'         except AttributeError:             return False ```         "
ForeverWintr,I wonder if there's a better name for this method than `skip`. It seems like what we're actually doing is passing if `skip` returns true (whereas I would expect `skip` to indicate neither pass nor failure). Maybe:  ```suggestion         if not self.can_fail(product_history):             return self.succeed(f'{self.CHINA_A_ACTIVE_FIELD} = True.') ```
gettodaze,"Why not just add `'true'` to my list of true values? For example, `        return spec_df.loc[cls.CHINA_A_ACTIVE_FIELD, 'value'] in [True, 'True', 'true']`. But I'm not sure how fast string comparisons are vs `str.lower`."
gettodaze,I think that is a very solid point. I like `can_fail`.
gettodaze,"How about `always_succeed`? Maybe I'm overthinking this, but I'm hoping to have a name that doesn't make me negate the boolean return value everywhere."
ForeverWintr,"I like `always_succeed`. I also thought having to negate the boolean was undesirable, but couldn't think up a better name. :) "
ForeverWintr,"Well, what if the value is `'tRue'`?  I guess the question is how strict should this check be. My intuition (which may be wrong), is that this should probably be case insensitive.  Upon reflection I think there's a cleaner solution than the one I proposed:  ```python return str(spec_df.loc[cls.CHINA_A_ACTIVE_FIELD, 'value']).lower() == 'true' ``` "
gettodaze,I like that!
nekobon,What is this DILMNSX?
chaburkland,`D`: date type `I`: integer type `L`: long type `M`: medium string `N`: numeric type `S`: short string  `X`: extra-long string
gdevanla,Should this be `int`?
gdevanla,"If `quote_type` is not set, there is a possibility that your `data_dates` may not be unique.  Same with `Frequency`. Therefore, you need both `quote_type` and `frequency` to be set to get a unique set of `data_dates`."
gdevanla,"Should this have a name that suggests `returns`? Also, the module name itself.  Unless, you plan to have other time-series data in this module/class.  "
gdevanla,"If you plan on have other time series data in this class, than maybe these attributes should not be at class level, since they are returns specific, correct?"
gettodaze,"Yes, thanks for catching that!"
gettodaze,"Yeah, Ro said the same thing. Chris wanted to avoid the name returns (because this can be used for both return and level data), but I think it makes sense to call it `returns` as well. Perhaps `returns_time_series_data`?"
gettodaze,"Exactly, but I think this is just for the returns table."
gdevanla,Or call it `Performance`?
gettodaze,"How about raising `notimplementederror` if duplicated dates are returned and removing the `None` default args? Otherwise, I am thinking of maybe two methods, one to return the time series and maybe one to return a groupby of `quote_type` and `frequency`?"
gettodaze,"Ah, `performance_time_series_data`?"
gdevanla,"yeah, perhaps run this name by @flexatone "
flexatone,"yes, ""performance"" is a nice alternative to  ""returns"" and ""levels""!"
flexatone,"SF will fail if there are duplicate dates, to that scenario may not require special handling."
gettodaze,"Okay, I got rid of the `notimplementederror` and just left a note in the documentation for the user."
gdevanla,"But, I think rejecting invalid inputs is a better option here. We know this failure is possible, therefore why not handle it upfront?"
gettodaze,"@flexatone @gdevanla Also, if `frequency` and `quote_type` are necessary to get a distinct timeseries, should they also be included in the `RAPID`?"
flexatone,At least `quote_type` will be included in `RAPID`.
ForeverWintr,I think `expanduser` does nothing here. Maybe it's a holdover from local development?
chaburkland,I'm pretty sure we can get rid of this method entirely now!
nekobon,"If we need to use the exact month's build, we need to have this check. It's often forgotten to mark delivered, and you might not receive the latest one."
nekobon,"python's `sorted` does not work with `nan` inside. If you need companies with `nan` weight, you can put `idbbu_to_weight` in a Series and sort it."
AlanMLin,I don't need companies with nan weight. Then will this be fine?
AlanMLin,"Is GRAFIGAC always rebalanced quarterly in March, June, Sept, Dec?"
nekobon,Yes!
nekobon,"To keep only positive non-nan values,  you would want to apply the same filter as before (w>0)"
AlanMLin,I added some check to make sure the year_mo from the latest delivered build is what we expected. The code looks ugly. Please let me know if you have some suggestions.
AlanMLin,I added filter (w>0)
johnjhawk,this will return the latest delivered in case there are multiple delivered in a single month?
ForeverWintr,"My understanding is that parc label will always be unique, so we don't need to worry about that problem. Here we're just looking for the same parc label in a different history. "
johnjhawk,"I see. If we're starting from a parc request then yes, I agree. But if we are asking for all the delivered builds for a product with the same year + plus label, we could get multiple. As there can be multiple requests per month. "
gdevanla,Do you plan on moving this sketch to another folder. 
gettodaze,"Ah, that's a good point. Do you recommend maybe `blender`?"
gettodaze,I moved it to `blender/sketch/find_blender_all_calls_as_spec_value.py`.
gdevanla,"I am guessing this is  more of a `test` and yes, blender `tests` seems to be a good place."
gettodaze,"Ah, it could be a test! But then it should be a portcullis test because it is testing `portcullis/core/analysis/company_compare/io_compare/series_comparer.py` `SpecValueSeriesComparer`"
gettodaze,Resolved over zoom to leave it as a sketch
gdevanla,"Actually, we need to find a way to get the `database_name` from the connection spec. We should not hard-code the database name here. Also, the read only user.    I do not know how that can be done. Can you explore a little or else I will look into that."
gdevanla,"You probably, can start by importing this two statements, and access the `connection_string` we provided in the command line.  ```  from kozuchi.db_setup.common_env import context                                                                                                                                                                  config = context.config                                                                                                                                                                                          ```                https://alembic.sqlalchemy.org/en/latest/api/config.html  If you get stuck, let me know.                "
kocharR,database_name can be fetch on fly i guess. I will look into that. But read only user ? How will we get the read user name? This is the first time we are creating it. 
gdevanla,Good point.   I added a readonly user definition in `inventory_users.py`. You can import that module in the alembic script and refer to the user and password from that definition.
kocharR,I can read the user information. user = users.Users['is_user_readonly'].user_name password = users.Users['is_user_readonly'].password
kocharR,Can you also help in getting the database name on fly? 
gdevanla,"You should use the `inventory.GDriveData.end_point` to refer to G  drive. Also, good idea to use `os.path.join`. I have not used it myself in many places in the code, which I am slowly replacing."
gdevanla,You can remove this if you don't need this anymore.
gdevanla,I think this is a typo: `Hisotrical`.
gdevanla,Will the file name have a timestamp? What happens when we get two sets of historical fiies. Will we over-write the previous file?
gdevanla,"Instead of dropping columns here, you could explicitly defined the list of columns you are interested in and only pick those columns."
gdevanla,Same here. Explicitly list of columns you want to extract. That way you clearly define what columns you need and not end up with extra columns that you do not expect.
gdevanla,"You can remove the print statements later. If you want logging, please use the logger functionality. You can refer to other kozuchi modules to see how we use the logger."
gdevanla,Looks like you are not using this variable anywhere.
gdevanla,Type hint missing for connection spec.
gdevanla,You don't need this. We are not using this anywhere now.
gdevanla,"```suggestion     @classmethod     def process(cls, conn_spec, portfolio_code):        .....              @classmethod      def main(args):          # here you can do all the arg-parsing.           if __name__ == '__main__':     SolativeHistory.main()        ```  With this approach, you can have a test for `process` function which just tests the core functionality. You can have another test for `main` to test to make sure you are transforming the arg-parser params to the correct values. "
gdevanla,curious; Why did you drop the `_` for portfolio_code?
gdevanla,Consider doing this in a loop?
gdevanla,"Should we make sure if have only one record after this operation? If that is True, then maybe just return a `Series`?"
gdevanla,You could probably do all this operations inside _get_holdings_attrs()? Any reason it has to be outside?
gdevanla,Shouldn't this be `CLS`?
gdevanla,To need a `frame_go` at this point?
gdevanla,Please switch to logging.
gdevanla,You can remove commented imports before merging.
gdevanla,You have not tested anything about the `constituent_holdings` in this test yet. Maybe you are still working on this test?
gdevanla,"Again, you have not asserted on anything about `attr` here. "
kocharR,"No file will have no timestamps. We have never gotten two sets of historical files for same portfolio. One we get from research which will go to folder \Simulated and other for short history we get from Solactive, which will go to a different folder. This is as per my discussion with Tiffany in product team."
kocharR,Used for debugging. I removed :)
kocharR,Actually I purposely have it here. This script can be run by anyone on adhoc. So idea is to have the value of  update_by so we know who updated the database. That's why I have this as a mandatory argument.
kocharR,"Yes as discussed with product team, we are fine overwriting or we can just copy the file to another folder and process the new one. But rarely happens if we have to process the portfolio for same data-date twice."
kocharR,There is a test called test_get_holdings_constituents.
kocharR,I guess you have the outdated file. I will checkin again.
kocharR,Not sure how to achieve here in this case. I am having a bigger frame and then take a sub of that frame to create a holding attrs series and constituents frame. 
kocharR,Good catch Guru. i dropped this initially when I was trying to join static frames and the column names had to be uique but  I don't need it now. 
kocharR,I had it all operation inside the operation in the beginning but Chris suggested to remove it. I suppose the reason was easy and separable test cases.  
gdevanla,"Ok. I thought it was a good idea to add a atleast a 'date' on that filename and save it. That way if you have another file for same portfolio code with different dates, you do not have to create a new folder.  "
gdevanla,"Yeah, just list out the columns names you need. That should do it."
gdevanla,"Currently, we don't use it. Plus, we can also identify using `get_process_user()` method automatically. This method is in the `monitored_sequence` module."
flexatone,"```suggestion         data = pd.read_csv(out_file).drop(cols_drop, axis='columns') ```"
flexatone,"Your type hint says `sf.Frame`, but you are returning a `sf.FrameGO`. In general, better to have functions return immutable data structures, but if you really need to return an `sf.FrameGO`, the type hint should align."
flexatone,"```suggestion     def _get_source_portfolio_id(cls, connection: inventory.PostgresConnectionSpec) -> sf.Frame: ```"
flexatone,You might check some values in here.
kocharR,"@gdevanla If I dont pass the value for update_by, module errors out. For now it is hard coded in the module but once you chnage your module, it will overwrite the value."
gdevanla,Are you using this anywhere?
gdevanla,"Can you just use the `_read_historical_file()` method in your Solactive Loader class? Looks like this function re-implements what the other function is doing. Plus, that way you get to test the actual function that is loading the file."
gdevanla,Same here. You could just use `_read_historical_file` method.
gdevanla,"Can you consider addin tests to check if weights add up to 1 etc?  Ideally, it would be nice, if you atleast test against values in one record and make sure all columns/values are as expected."
gdevanla,Same here. Checking for some values would be nice.
gdevanla,You should read from test folder here?
kocharR,LGTM : Looks Good To Me :D ?
kocharR,That's a great point! I have no idea why I wrote  this function in test module when I can call the _read_historical_file and return a frame . Thanks!  
kocharR,should I be calling the function in main module?   constituent_holdings = SolactiveHistorical._get_holdings_constituents(solactive)     
gdevanla,I just meant that you should not hard-code this path here. Can you upload this file to the test input folder and use it?
kocharR,Oh I understand now. I actually uploaded to static server and that's the file I am using. I removed the hard coding of path.     test_data.get('holdings_RAMFCTDT_20210301_test.1614680240.csv')  file_path = fp  
gdevanla,"If you are dropping 'Adj_Weight', then do you still need this in the map here?"
gdevanla,"Since, you are getting the entire `file_path` now, you don't need `holdings_`, correct?"
gdevanla,"I am wondering, you will have only one `holdings_attr` correct? Do you need a loop here?"
gdevanla,"This should be,  ``` import RALib.core.monitored_sequence as ms ```  then  ``` holdings_attrs['update_by'] = ms.get_process_user() ``` "
gdevanla,"linting error, add a space after `,`"
kocharR,Good catch.
kocharR,"No I will have multiple rows in the series and for each datadate in attr, I have multiple rows in the holdings. "
gdevanla,Got it thanks
nekobon,It looks so complicated! A comment here would help (me)
nekobon,same here
vhquang,"Is it intentional to be `date_min` instead of `date_max`? Beside, I think `DATE_MIN`/`DATE_MAX` can also be default arg."
vhquang,"I am just curious, what is our benefit for filling unknown delisted day with specific infinite day?"
vhquang,"Since this is classmethod, other code can use it like public API, I think it would be good to have typehint for the parameters. Especially for `fp`, I think I see 2 types of `fp`: tuple of string, and string of absolute path. I think it would be good to specify it to reduce ambiguity."
nekobon,"Oh, thank you. I've fixed it but accidentally on another branch derived from this branch."
nekobon,That is the max date used by this data vendor (Compustat). I wanted to have the same here because we use the same max day in other readers provided by the same vendor.
nekobon,Thank you. I missed this typehints
brandtbucher,"I wanted to, but you can't put comments in JSON files!"
nekobon,"Wait, I thought it was python! ... how about yaml?"
brandtbucher,```suggestion     def test_disk_memoize_returned_none(self): ```
brandtbucher,Maybe just remove this `else` and return the result of the `DiskCache.load` call on line 309 instead of binding it to `data` and returning here? That's much easier for me to follow.  ```suggestion ``` 
brandtbucher,"As far as I know, GitHub can only read this configuration from a JSON file (the API is very poorly documented). 😦"
vhquang,That makes sense. Thank you for the explanation!
nekobon,:cry: 
chaburkland,"Is this a mistake? I understand how the following elif-else is refactored from the else on default, but the addition of `not` here seems incorrect."
chaburkland,I don't like importing wunder attributes from other modules. Can you rename these to `ArgoBase` and `CalpysoBase` or something like that?
chaburkland,"I wasn't able to find a definition, even an abstract one, for `get_changeset` on this class. It seems like one that raises `NotImplementedError` would be appropriate here."
chaburkland,I like these VCS abstractions a lot more.
chaburkland,"I would suggest reverting this loop to be an explicit one. The current pattern of looping through each class in a tuple of explicitly defined runner classes is preferable to me.  I think the `__subclasses__` loop would make a really good unit test. That way you benefit from guarding against a mistake where someone creates a subclass, but forgets to add it to `ARGO/CALPYSO_RUNNERS`. But you also get the benefit of an explicit runner list in production code."
chaburkland,"Seeing as this code was repeated in `AAF/apps/calypso/main.py` and `AAF/apps/argo/main.py`, I think it's worth making this a function that those mains can import and pass in all the runners directly.  ```python from AAF.core.calypso import CALYPSO_RUNNERS from AAF.core.calypso import get_parser from AAF.core.calypso import execute_runners  if __name__ == '__main__':     parsed = get_parser('asset_allocation').parse_args()     execute_runners(CALYPSO_RUNNERS) ```"
brandtbucher,"The old code was exactly backwards, and wasn't formatting the messages correctly. I noticed the bug and fixed it here!"
brandtbucher,Nice catch!
ForeverWintr,"I think you can do assignment to multiple columns at once, so this could be ```suggestion             ra_dataset_info = ra_dataset_info.assign[['price_index_code_file', 'net_return_index_code_file', 'total_return_index_code_file']](None) ``` "
ForeverWintr,I think there's an extra word here: ```suggestion         raise ValueError(f'Expected {marker} not found in file') ```
ForeverWintr,"Do you need `astype` here instead of passing `dtype` to the frame constructor, because the data comes in as strings?"
ForeverWintr,I'm surprised this works! I thought you couldn't inherit from `Enum`s.
ForeverWintr,"This fails unless `pm['dataset'] == 'Citi'`, right? I wonder if it would be clearer to set `cls.DATASET = hd.DataSet.Citi`, then explicitly check that `cls.DATASET(pm['dataset']) is hd.DataSet.Citi`. Maybe that way you don't have to sublclass the  `hd.DataSet` enum.  It's entirely possible I'm not understanding something, too. :)"
gdevanla,"Yes. We get data as strings. Plus, I had to unpack all columns to provide dtypes. Instead, I chose this path."
gdevanla,"Mostly, I have only been using the base class for typing. "
gdevanla,"You are right on the check.This statement will fail if the value is not 'Citi' right now.   But, the dataset enum class could hold more values than just 'Citi' in the future. That is the reason we cannot have an explicit check. Hope that clarifies."
brandtbucher,This diff looks worse than it really is. See the comment in `AAF/core/launcher.py` for a better explanation.
brandtbucher,"Both teams have expressed an interest in having some jobs that *cannot* be launched in ""production mode"" (which changes some important things, such as email lists, upload locations, test runs, arguments, branch, etc.).  For the Asset Allocation team, this feature will be used for Git jobs while their Hg -> Git transition is underway. For the Equities team, no jobs will be in production mode for the foreseeable future."
brandtbucher,"Again, this diff looks worse than it really is.   This code was basically lifted straight from `AAF/apps/calypso/launcher.py`. The only major difference is that some bits of the Flask app construction have been moved into a new `get_app` function, which can be used to create both Calypso and Argo web apps."
brandtbucher,"Don't show a ""production"" checkbox for jobs that don't allow it."
brandtbucher,"Most of this function is unnecessary for jobs that don't allow ""production mode"". So, for those, we only keep this bit, which populates the default revision and args for the job."
ForeverWintr,"Do you know if we still use job priority? In the disque days we used it to decide which celery queue to send to, but I didn't think we did that anymore with airflow. "
ForeverWintr,"Do you want to include `log` here too? I think that's the output of the job, which would be useful when it fails. "
gdevanla,"Good idea. I somehow thought there was more stuff to be done to get the logs. But, I already have the info! Thanks !"
gdevanla,Yes. We do use the priority on jobs. The priority is applied to jobs within one particular queue.
ForeverWintr,Can we remove this?
ForeverWintr,"Was this because, now that we make morning trades based on the approved trade plan, we no longer want to consider morning trades that were made if the trade plan wasn't approved?"
ForeverWintr,"I think this is `str` now, because we stopped holding live exception objects."
ForeverWintr,"I think best practice is to use an OrderedDict if order is important to you, even though dicts are ordered now. The argument in favor of this, as I recall, is that not all tools respect dictionary order (e.g., pretty printers might sort keys or something). I don't remember why we used an ordered dict here, so I'm slightly in favor of keeping it. Do you think we should remove it?  "
ForeverWintr,"I think you don't need this label, right? if you `unstandardize` this frame, won't the label be pu_rafi_size_single_country?"
ForeverWintr,:+1: 
ForeverWintr,Can you help me understand what this reindex is doing? Are you dropping some columns that are not in `ALL_COLS`?
ForeverWintr,"Could you make your `pass_apply_f` a little simpler by filling `na` with zero here instead?  ```suggestion         passed = relevant[['client_weight','live_weight']].fillna(0).iter_tuple_items(                 axis=1).apply(pass_apply_f).rename('passed') ```"
ForeverWintr,Did you get an answer to your note here?
ForeverWintr,"How about using `datetime` here instead of strings? That way we'll fail if `MAX_DATE` isn't actually a date, e.g., `22611232`. It would also be nice to be resilient to changes in numpy's `str` representation. I think this would work:  ```suggestion         max_date = datetime.datetime.strptime(cwo_mod.MAX_DATE, '%Y%m%d').date()         def dtime64ns_to_str(dt64ns):             # Convert to date precision, then call item to get a python date.             ret = np.datetime(dt64ns, 'D').item()             if ret != max_date:                 return ret             return '' ```"
ForeverWintr,"The column selection isn't needed here, right? "
ForeverWintr,"This is the same set that @johnjhawk is creating, I think! Maybe the two of you can find a shared location for it? It could go in `portcullis.core.constants`, for example. "
ForeverWintr,I see the test below that prompted this change. Nice!
ForeverWintr,This sketch looks interesting. Is it still a work in progress?
gettodaze,"Oh, I think the reason I put that is because the mapping I've seen passed in seems to always just a regular dictionary, i.e.: ```         detailed_results = {                 'no_SIC_companies': no_sic_companies,                 'duplicate_SIC_companies': dup_sic_companies,                 'weight_by_SIC': weight_by_sic,                 'overheavy_industries': overheavy_industries             }         msg = 'Industries with greater than 25% weight in the portfolio: ' + ','.join(overheavy_industries[self.SIC_DESCRIPTION])         if overheavy:             return self.fail(msg, detailed_results)         return self.succeed(msg, detailed_results) ``` ``` return self.fail(message, {'details': results}) ``` The only mention of `OrderedDict` in `portcullis/core/bqcuts` is this line."
ForeverWintr,Interesting! In that case I agree that using a regular dict here is best. 
gettodaze,Oh good idea! I tried mentioning it in his code review but I think my mic wasn't working and nobody could hear me haha.
gettodaze,I'm hoping to have a handle to the column so that I can rearrange the order of the columns in the end. I realize now that I shouldn't be forcing the name to be `pu_rafi_size_single_country` when it could change in the future. Is there a way to get the name of the column from the recipe?
gettodaze,"No, and maybe this isn't the best approach, but I just want to have the final order of the columns to match the order of ALL_COLS. Is there a better way to do this?"
gettodaze,"Oh I did! I will change the note to just say `this does not verify the weight is between 0-1 inclusive, that check is out of the scope of this QCUT`. Thanks."
gettodaze,"Wow! Very cool! Thanks. I just had to return the string of ret. ``` max_date = datetime.datetime.strptime(cwo_mod.MAX_DATE, '%Y%m%d').date() def dtime64ns_to_str(dt64ns: 'datetime64[ns]') -> str:     date: datetime.date = np.datetime(dt64ns, 'D').item()     if date != max_date:         return str(date)     return '' ```"
gettodaze,Right! I'll change that.
gettodaze,"I put it on hold for now. I like the idea of parametrizing `aqoap` and it was very nice when I implemented it. However, ultimately I would prefer not to run `get_latest_dids(use_known_fails=False)` or `DistributionChecker.all_qcuts()` at module level. This code was my attempt to defer those those calculations be deferred until the test run (which I believe is possible), but was having issues getting that to work well with test collection.  Do you have any suggestions?"
vhquang,"Just curious, what `PM` stands for?"
vhquang,Do we need to care about number of rows? If not I think we can just test on the number of columns.
vhquang,"I think maybe we can have this as a separate test, as it is more specific than just testing pandas -> static_frame."
ForeverWintr,I think it stands for Portfolio Management. These are region definitions that Ari's team use. 
ForeverWintr,"I think we care equally about number of rows and columns here; Because we test against a single input revision, the file size shouldn't change. "
ForeverWintr,"I added this because the original function I wrote was specific to these columns. I agree It's more specific than necessary, but I feel ok with leaving it here; these are the columns that I actually use the `to_frame` method to get, and I don't think this would cause an unnecessary failure."
ForeverWintr,Do you want to assert that something was written here?
chaburkland,There's already a lot of tests evaluating the output. This was added just to make sure the entire write process happens without raising.  Do you just mean quickly checking that `tf` is not an empty file?
ForeverWintr,"That's what I was thinking, yes. "
brandtbucher,Should these still be decorated with  `@abc.abstractmethod`?
brandtbucher,"I think you forgot an `f` here!  ```suggestion         assert date_max <= as_of_date, f'expects date_max <= as_of_date; got {date_max} > {as_of_date}' ```"
brandtbucher,"This might be helpful:  ```suggestion         assert isinstance(date_min, datetime.date), f'date_min needs to be datetime.date (got {type(date_min)})'         assert isinstance(date_max, datetime.date), f'date_max needs to be datetime.date (got {type(date_max)})' ```"
nekobon,"Eventually, yes. But until PSU are all event-based, they cannot be enforced."
nekobon,Oh no! Thank you!
ForeverWintr,"I see the confusion, and will try to explain here. The whole `FieldAttrs` / `Fields` / `FieldAnchors` ecosystem is pretty complex, so let me know if you'd like to call to discuss it, too.  As a refresher on some terminology:   - The actual column label in the companies table ('pu_rafi_size_single_country') is the `Field`, - The name by which we refer to this field (in this case, also `pu_rafi_size_single_country`) is the `FieldAttr`, - The 'standardized' column label that this recipe results in is the `FieldAnchor`,  The `FieldAnchor` is stable (it doesn't change over time), and we know what it will be before the code runs. However, the difficulty in this case is that it includes the family name, and this qcut runs on multiple families. Once know the family name though, you can safely hardcode the FieldAnchor. For grafi, for example, the resulting column name will always be `'{pu_rafi_size_single_country:-1:grafi:RAPC}'`.  Ideally what you should do here is find the column name, use it to re-arrange the columns, then `unstandardize` at the end. The family name is stored on the `product_history`, so you can build the `FieldAnchor` using something like  ```python anchor = f'{{pu_rafi_size_single_country:-1:{product_history.delivery_history.family_id}:RAPC}}' ```  To your question:  >  Is there a way to get the name of the column from the recipe?  The answer is 'almost'! `ColumnRecipeFieldattr` has a private method, `_get_source_label`, that does exactly that, but its interface is intended for use by the `FrameFactory`. Your use case makes me think we could add a public method, called something like `get_standardized_name` that does this:  ```python     def get_standardized_name(self, family_id: str):         return str(FieldAnchor(             self.fieldattr,             self.history_index,             family_id,             str(self.tlt),         )) ```  You could then do:  ```python column_name = pu_rafi_size_single_country_column.get_standardized_name(family_id=product_history.delivery_history.family_id) ```  Does all that make sense?   "
ForeverWintr,"That makes sense, thanks!   I don't have a great way to re-order the columns of a frame, unfortunately. I think a potential problem with this approach is that it will drop columns that are not in your `ALL_COLS` list, which might happen if you refactor.   Maybe you could make this a little clearer by renaming `ALL_COLS` to something like `column_order`, and checking that all the columns in relevant are in `column_order`? "
chaburkland,"Can you clean up the formatting here? I'm thinking something like: ```python return f'''             SELECT                   dataset,                   source_portfolio_id,                   cusip,                   isin,                   holdings_code AS portfolio_code,                   portfolio_name,                   portfolio_name AS price_index_code,                   total_return_index_code,                   net_return_index_code,                   holdings_code AS holdings_code,                   country_code_2,                   price_index_file_code,                   total_return_index_file_code,                   net_return_index_file_code,                   updated_by             FROM dbo.RA_DATASET_INFO AS a             WHERE                   source_portfolio_id IN (4523, 4524, 4525, 4526, 4528, 4527, 1350, 1190, 1188, 1307, 1184)             AND a.VALID_TO_DT='99991231'             AND holdings_code is not null         ''' ```"
chaburkland,"This might not be necessary in this context, but would `os.path.join` be more appropriate here?"
chaburkland,"As far as I can tell, `Returns` and `CurrencyCode` are not used anywhere else, so I think this would be better as just as a single type alias with a comment to explain:  `LoadedReturnsType = tp.Iterator[tp.Tuple[datetime.date, str, float] # date, currency_code, returns`  Also, stylistically, I find it's very helpful to add either a `T` or `Type` or something along those lines to the name of a typing alias. If I saw didn't see these here but in the context of a function, I would assume `LoadedReturns` is a class or a datastructure. I think being explicit in the naming here is helpful."
chaburkland,@staticmethod ?
chaburkland,@staticmethod ?
ForeverWintr,"That makes sense. I agree that we'd need to defer the `get_latest_dids` and `all_qcuts` calls until runtime, and unfortunately that's the piece I wasn't sure how to do using pytest's parameterize."
vhquang,This doesn't look like it would fit what the parser in `main` would expect. Is this a sketch that got out of date?
vhquang,"How is this `REPO_SERVER` used in Calypso workflow? If we use it for `git clone`, it should have the value of `git@asset-alloc-alias.github.com:ResearchAffiliates/asset_allocation_test_1.git`. The `machine_name` (""asset-alloc-alias.github.com"") for `GithubAssetallocationRepo` is not a real address. It is intend to be used for SSH, and won't work with HTTP.  I think what we would want, if to be used for git clone, is: ``` REPO_SERVER = f'git@{GitHubAssetAllocationRepo.machine_name}:{GitHubAssetAllocationRepo.endpoint}.git' ```"
vhquang,"I don't know about Calypso setup, but is it OK to run this on the same server for production? If AA team can access other dev server, ex: `deploy01-dev-i`, I think it is better to use dev server."
brandtbucher,"Yep, thanks!  I was trying to test the new link locally and it kept failing because I hadn't run the `git_deploy_access` task for my local machine. 🤦🏽‍♂️"
brandtbucher,"Yep, good catch. It doesn't break anything since it's only used for the ""help"" display, though."
brandtbucher,It should be fine since they run on the same changeset and different ports.
gettodaze,This could just be a staticmethod since it doesn't reference cls.
gettodaze,"Oh, is `get_query` a `classmethod` so as to match all the other `Vendor` subclasses? If so, maybe `get_query` and `_apply_vendor_specific_transform` could be added as abstract methods on the vendor class. "
gettodaze,```suggestion     def get_query(cls) -> str: ```
gettodaze,"Is there a reason you are both mutating and returning the argument? I'm imagining the Frame is too big to deepcopy, but it still might be best to return nothing to signify that a mutation occured."
gettodaze,Also maybe omit the return here.
gettodaze,```suggestion     def get_parser_config(cls) -> tp.List[rw.ParserConfig]: ```
gettodaze,"Is this where Brandt was thinking to add `*_, **_`? Can you supply less parameters in a subclass than the super?"
gettodaze,```suggestion     def get_parser_config(cls) -> tp.List[rw.ParserConfig]: ```
gettodaze,```suggestion     def _normalize_data(data: sf.Frame) -> sf.Frame: ```
gettodaze,Maybe type hints could be nice here.
gettodaze,What's the purpose of checking the length before checking list equal?
gettodaze,"This is probably fine, but maybe these currency codes could be symbolic constants, `FX_ISO.AUD` for example. But that would make these tests dependent on those symbolic constants."
gdevanla,Do you still need the `f` prefix here?
gdevanla,I am not sure of this: Does the pyodbc complain if you provide a `changeset` value but don't consume it. May be you tested this already.  Just making sure.
brandtbucher,"Nope, good catch!"
brandtbucher,It's just a local SQLite DB. Extra parameters don't seem to be an issue!
nekobon,I agree that POST is good for this case
gdevanla,I see. Using sqlalchemy api usually results in an exception. Maybe pyodbc is more forgiving.
nekobon,It would be better to use `tp.List[(type of element)]` here
nekobon,The type hint says it cannot be None. Perhaps is it tp.Optional?
nekobon,"Once raised, it doesn't continue running the following code (unless there is `finally`), so you can remove this `return None`."
nekobon,Can this happen after the check above?
AlanMLin,The full pre-defined list has 21 portfolios. The command line option --source_portfolio_ids can have a subset of the 21 portfolios. This is to skip the portfolios in the pre-defined but not in the list of --source_portfolio_ids.
AlanMLin,changed to tp.List
AlanMLin,'return None' removed
AlanMLin,I need some clarification on this. Can we have a quick zoom chat tomorrow?
AlanMLin,changed to tp.List[str]
brandtbucher,"```suggestion _ROOT_FOLDER = Path(inventory.GDriveData.end_point, 'Information Systems', 'Data', 'Pimco') ```"
vhquang,"Did you find a scenario when casing matter for server name? If not, let keep them lower case to be consistent with what we currently have."
vhquang,"It is fine if you would like to comment them out during review. But before we merge, I think it is better to remove all the code that have been comment out. "
kocharR,I did not find cased where case for server name will matter but good to be consistent as you said. 
gettodaze,Does this variable need to be `Optional`?
flexatone,"A missing `sec_id` here more narrowly means that, for this co_id, we do not have a value for `primary_sec_field`. What is implemented here is still correct, however, so I would just update the comment."
flexatone,Good; I would just drop the parens. ```suggestion             if pre_headline_ptoc_source is LiveWeightForWCRSource.LIVE_HOLDINGS: ```
flexatone,Same: ```suggestion             elif pre_headline_ptoc_source is LiveWeightForWCRSource.PRE_HL: ```
flexatone,"Why do we have to different enum instances with the same string value? Do you mean: ```suggestion     PRE_HL = 'PRE_HL'  ``` Also, I would consider renaming this `LIVE_PRE_HL` or similar as we have both live and approximate headlines in the mix here.  Finally, now that you have introduced a new parameter, lets only use this enum with the `live_weight_for_wcr_source_timeline` parameter, and create a new enum for the new `pre_headline_ptoc_source` parameter. "
flexatone,"All timeline parameters have ""timeline"" in the name: should we do the same for this one? ```suggestion     def pre_headline_ptoc_source_timeline(yearmo: str): ```"
johnjhawk,"PRE_HL = 'LIVE_HOLDINGS', was a mistake! Thanks for catching.  I will add a new enum for the ptoc source, I was on the fence about whether I should create a new one or use the old one. Your comment pushed me off the fence though ;)"
gdevanla,In 99% cases we expect this to be True. There is just a one-off case where this is False.
brandtbucher,Maybe it's just simpler as:  ```suggestion from html import escape ```  and use it as `escape` below?
brandtbucher,[Two spaces](https://www.python.org/dev/peps/pep-0008/#inline-comments) before comments! 🙂   ```suggestion             msg = html_mod.escape(msg)  # escape <not_a_tag> etc ```
johnjhawk,"If these ids are no longer used, maybe we call these ""retired_ids"" instead of old because old does not necessarily mean no longer valid."
nekobon,Would we want to raise this case?
nekobon,What is this line for? Is `offset=0` not noop?
nekobon,You could also share this with the si in `get_evic` if you'd like to only send si into these two functions.
nekobon,Missing typehint (spec)
nekobon,Missing typehint (bb_co_ids)
nekobon,"I'm curious, when do you use the leading ""_"" in the local attribute names?"
nekobon,Maybe this line could be replaced by `frame[field_bb_co_id].dropna()`
nekobon,"Can we remove this line by adding ""="" in line 182?   `bb_co_evic = _bb_co_evic.assign[_bb_co_evic < 0](np.nan)` ->  `bb_co_evic = _bb_co_evic.assign[_bb_co_evic =< 0](np.nan)`"
nekobon,"Same here; can we add ""="" above to remove this line?"
nekobon,I'm curious; when do you need `low_memory=False`? 
nekobon,It is a bit confusing to have two similar names for a Frame: `f` and `frame`. Perhaps different attribute names can help.
nekobon,Is this overwriting the existing column?
nekobon,missing typehints
nekobon,:+1: 
vhquang,"I would prefer to. It was raising exception before, and thus broke tests for data sourcer writers. If I want to keep raising exception, I would need either: - go to each test and ignore exception if the writer is `get_iss`. - or go to each test and bump the sourcing data to after 2020-10-01.  Beside, sourcing data before 9/2020 will result in error anyway because 0 row will be return. The error is just later in the process."
vhquang,"It is offset from month end. So, basically it means return the last calendar day of the month."
vhquang,"For my defense, `spec` is so vague that I am hesitant to put in a meaningful type. But it is still a good point."
nekobon,"You can use `du.get_end_of_month(year, mo)` for getting the last calendar day"
vhquang,"This is true. However, I think `ScoreSeriesInput` goes hand in hand with `Factor`. Defining it in upstream function, just to share it between `get_evic` and `get_revenue` makes the interface un-intuitive: why would `get_revenue` needs score_input? (versus `get_revenue` needs the `bb_ids` it would return the result for).  Beside, my understanding is that constructing score_input is low cost, just the construction of `fin_pan` is expensive."
nekobon,"I'm guessing these broken tests are the ones aggregate all writers. For that, it seems like the as_of_date is not a very important parameter, as it is testing if it can correctly aggregate writers. If that's the case, I agree that you can bump the sourcing date."
vhquang,"It's just my personal preference when I have an intermediate variable that I would update shortly after. I would like to avoid double-use of a variable, so that if I need to debug I will have both of them to compare."
vhquang,"~That would return a non-nan co_id series. For me, I would need an entire Frame where co_id is not nan, so that I can do the mapping.~ Sorry I misread, you are right, `dropna` is a better way to write it."
vhquang,"This is a copy and paste left over. It was carried from the old code which works with Vigeo static data, The data used to be ~100-200MB. And this flag is needed to silent the warning and mark it explicit we expect to handle data of that size. The new data from ISS is just 9MB."
nekobon,That is a good point. Often the ScoreInput and Factor are not one-to-one but one-to-many to ensure applying the factor to the same constituents (as in multi). I think either way is good!
nekobon,"Oh, I see! Since `_isin` is the last ISIN and `sec_co_map` is the last map, it might help to be consistent which to put the underline."
vhquang,"Yes that updates the column with empty value from the above loop. The `Percent_Women_on_Board` is the only case that does this calculation, so I don't know if it worth it to have a separate logic to handle it, than just updating it."
vhquang,"I fixed most of the `.get_all_writers` tests by bumping up sourcing date. But for these tests: https://github.com/ResearchAffiliates/invsys/blob/b190c5cff6b6b9bd0fc39e90ff39d97142fdf0d8/RALib/test/unit_test/test_data_sourcer_writers.py#L55-L65  Now it starts to feel like I am hiding away the problem rather than fixing it. The problem is that our use of retrieving writer isn't lazy: https://github.com/ResearchAffiliates/invsys/blob/67a2cc7f21190fcd9d0183eba09105541fd3386c/RALib/core/data_sourcer_writers.py#L187-L193  So given a date, it will exercise all sourcers, then picking out the one it needs. It mean if for some reason we want to source non-ISS data in the past, it will raise error on ISS sourcer even if we don't use it. It is the pattern implemented by the sourcer. And it makes me think raising exception in the writer is not a good idea, unless we change the sourcer first."
nekobon,"I agree, it seems better to defer exception until `write` so that the instantiating writers are all very lightweight as the sourcer expects."
flexatone,Are we confident that `ff_overrides` is always a float? (`np.isnan` will raise if a non-float is given.)
johnjhawk,It could only be a float or int and int doesn't raise.  I think it would be good to raise if we got a string or something here.
gettodaze,"Maybe: ```suggestion         # This will not clone the repository already exists. That's okay. ``` I originally thought ""fail"" meant ""raise an exception"""
gettodaze,Same here: ```suggestion         # This will not clone if the repository already exists. That's okay. ```
brandtbucher,Changed!
gettodaze,"In these spots where errors are raised due to the return code, you could just use  `cls.command(...).check_returncode()`, and that might be simpler? But the current way makes it more obvious that errors might be raised."
gettodaze,"Also, what does pruning do here? My understanding is that fetch will download the latest remotes, and then prune will remove any unused local remotes, but wouldn't the previous origin remote still be referenced by branches? I think I'm just confused; I trust that you know the git API much better than I do, haha."
brandtbucher,"Nice, I didn't know about `check_returncode()`!  I'm far from an expert, but here's my understanding: adding the `--prune` option to `git fetch` will remove any local refs that aren't present on the remote. This is nice because it prevents us from accumulating a bunch of junk over time. I *think* there are also some cases (like if somebody force-pushes a history rewrite, or if a remote branch is deleted or renamed) where this could keep us from accidentally updating to the wrong changeset. Not sure, though.  So it's not *necessary*, but it does seem like a good idea in this case."
vhquang,Maybe use fstab is better
vhquang,AWS may already execute this as root.
flexatone,"Is the ""vu"" here for you? Should this have a more generic name?"
flexatone,"""quang here""?"
flexatone,Same key here...
vhquang,"It is specific to the key created and stored on AWS: https://github.com/ResearchAffiliates/invsys/blob/f8073c35504dc6e14f241d7b7b1dc15d99489ffa/deploy/core/terraform/aws_provider.tf#L12-L13  When Tom and I create an instance, we add a key to that instance (his or mine) as the first access. There may be a way to attach multi keys as first access, but I haven't found that out yet.  Bundle multiple keys as single credential (ie: `IS_team`) is also bad. If we add more key, Terraform will recognize that change, and will replace all instances using that credential. That was my understanding of how Terraform and AWS, I haven't actually tried it."
vhquang,"The `.tfstate` file is generated by Terraform, yet you impress me again with your pixel vision on my debug code."
ForeverWintr,"I was pretty sure that launch scripts like this were run as root, meaning the `sudo` isn't needed here. Did you check that?"
ForeverWintr,"Actually, I see this is run using cloud init, so maybe it acts differently than bare user data"
ForeverWintr,"FYI we do have an ansible step that installs everyone's keys on the autoscaling workers. I don't think it's included in the config for this worker, but it would likely be easy to add. "
vhquang,"You were right about the permission. I cleaned up other code, but missed this one. Cloud-init also runs script as root user as well. I think AWS who decides to do that and not cloud-init."
vhquang,"That is a separated task (ansible task), that will allow other people to connect to the machine. The key that Chris pointed out is the AWS credential store that will allow to SSH in as `root` user on the machine. I haven't figured out how to use multiple keys for that step yet. "
vhquang,```suggestion apt-get -y install nfs-common ```
gettodaze,"Ah, I see. That makes sense. Thanks!"
ForeverWintr,"Yes, I was just pointing out that we are able to add everyone's key bu using that task if we include it in userdata. "
vhquang,"I see what you mean now. I still don't know what is the best way to do it. Let chat more when you have time, on how to implement it."
vhquang,"I like the break up of this function into separate `_get_reader` and `get_dates_pre_calculated`. Beside making it simpler, is there other reasons for this change?"
vhquang,Would this be a good opportunity for caching? Or is it unlikely that we will call the same date twice?
vhquang,What is `permnos`? Maybe it is just me who is not familiar with this definition.
vhquang,"This should follow your change on L770 to be `self._as_of_date`. Though I prefer just `as_of_date`, to take advantage of syntax error. Using instance attribute won't give error until runtime."
vhquang,Why do we have this change? I think it is an equivalent to the old change. But the old change would have default parameter shown up when look up on the interface.
vhquang,"From the name of the test, it seems like you would want to test that all the `co_tables` should be read from the reader. If that is the case, I think having the mock for `._fresh_geiu_history` and assert that mock never get called is a better assurance along with what you currently have.  Secondly, is reading from `compustat_geiu.CompustatGEIUMonthly` slow? If we don't care about the correctless of `compustat_geiu.CompustatGEIUMonthly` and only want to test logic of `compustat.GEIU`, we can mock that class into a dummy that returns a dataframe with expected date, then your test can be fast."
vhquang,"Outside of your change, I vaguely remember we talk about using Descriptor for this. Is it still relevant? If so I can prototype a proof of concept for it."
nekobon,"Sounds good, but only if you have time! We also talked about possibly making an explicit hash function but it doesn't help too much here."
nekobon,"Thank you! I was testing to make sure it runs fast enough with low memory even with all the precalculated tables, because I had a trouble earlier by using up all memory due to the missing `date_min` and `date_max` parameters. It was meant to be sketch but forgot to decorate."
nekobon,"Sorry, I meant to add a warning there (added in later branch). I need to distinguish if the user explicitly specified DATE_MIN, or by default. If we put it as default, we cannot tell if the user really meant it or forgot to specify."
nekobon,That is a great point. I'll change them.
nekobon,"It is a security-level identifier used by Compustat, just like ""sedols""."
nekobon,"It is internally disk-cached in `_fresh_geiu_history`. `_get_reader` is simply reading from file, so the same as disk caching."
nekobon,"Yes, we couldn't do that before because we wanted to make the fresh geiu generator only when users want to calculate fresh geiu to avoid overhead. With this branch and previous some to support event-based GEIU, we refactor to create instance-based fresh GEIU with low-overhead instance creation (with many `cached_property`s). This change allowed to break up, and always prepare for fresh GEIU even if not used later."
vhquang,Oh I see. That makes sense! Thank you for the explanation.
vhquang,"I see. Memory test is interesting. Maybe we can keep this test, but let document it that we use it both for correctness and memory check?"
chaburkland,"What is going on here? On line 207 you defined `psuc` as a `PSUCOneDay` instance, but then it gets immediately overwritten as a `PSUCHistory` instance. "
chaburkland,"Would there be a downside to using `lru_cache` here? It removes some complexity in your `co_table` method, and removes the need for this class to keep track of a cache internally."
nekobon,"Some data is quite large, so I didn't want to put it in a global scope cache."
nekobon,"Oh, I think it was just how github collapsed. Lines 207 and 233 are in different test functions."
vhquang,What is the logic for position (ie: why `last_year` is -5 instead of -3)?
vhquang,"Can you elaborate on this and L242, why are we getting weights from PSUB instead of from current given build?"
vhquang,"I feel these 2 flags can be combined. If `missing_data_fill_value` is provided, it implies allowing missing. Otherwise we raise when found missing values. And we want to allow missing by default, we can use sentinel to force specifying value for `missing_data_fill_value`.  It's just a suggestion for improvement, I may not familiar with typical use case for `ColumnRecipeFieldattr`."
vhquang,"It looks like they should be `Optional[int]`, from your usage of: https://github.com/ResearchAffiliates/invsys/blob/6a09a051906701b0da5982181eca9660a8883f81/portcullis/core/analysis/rae_qc/data.py#L1185 https://github.com/ResearchAffiliates/invsys/blob/6a09a051906701b0da5982181eca9660a8883f81/portcullis/test/integration_fast/analysis/raeqc/test_raeqc_slow.py#L342 "
vhquang,This is a nice break up and re-use! :+1: 
vhquang,"If I understand this change correctly, it pushes the task of figuring out the needed indexes into `_get_report_indexes`. And I wasn't clear on how it does that. Maybe a quick demo would help me visualize it easier."
ForeverWintr,"The number here is an offset in the delivery history of the build, so `-1` is most recent (last element in the list). rae is delivered quarterly, so last year is 4 rebalances ago, therefore it's at position `-5`."
ForeverWintr,"Your understanding is correct! `_get_report_indexes` figures out the right indexes to use in each of the build, blend and psub. It's kind of complex. I'm happy to walk you through it."
ForeverWintr,"Good point, thanks!"
ForeverWintr,"Yes, this is rafi carve weight, which comes from psub. Basically what we're doing here is getting the weight of a benchmark portfolio consisting only of rafi weight, and we compare the portfolio weights to these weights. We need to use the `psub_current_index` here because psub has a different rebalance schedule than rae. The prior year index is -5 in rae, but -13(?) in psub, because psub delivers monthly. "
ForeverWintr,"Hmm, that's an interesting point. Your logic makes sense and I'm not sure now why I didn't do it that way in the first place. I'll make note to review this."
flexatone,Why was this change needed? Was it not working as expected before?
flexatone,"This is a global configuration change to Pandas: what does it do, and should it be context-managed?"
flexatone,Same question as above.
flexatone,"Is this whole module just for testing?  As Centcon is not mission-critical, we could just plan to deploy this version with this PR."
flexatone,"This is still an internal TLT, right? If so, the import needs to go after stdlib."
flexatone,Should this be subclass of `RuntimeError`?
flexatone,Why are `self.default_mail_args` and `self.log_task_header` public?
flexatone,```suggestion         self._handler = LogCollectionHandler(logging.DEBUG) ```
flexatone,"```suggestion         frame = sf.Frame.from_records(self.handler.collection, columns=['Level', 'Message'], dtypes=[str, str]) ```"
flexatone,I think these can go on the same line.
flexatone,Maybe: ```suggestion     components = [datetime.datetime.utcnow()]     components.extend(args) ```
flexatone,```suggestion     msg = f'Must be either a tuple of Exceptions or a single Exception. Not: {exceptions}' ```
flexatone,"Maybe?  ```suggestion     if isinstance(exceptions, tuple) and not len(exceptions) or not all(issubclass(e, BaseException) for e in exceptions) :         raise TypeError(msg) ```"
flexatone,"```suggestion     Returns:         A tuple of func return value, exception that requires a retry. If None, no retry is needed. ```"
flexatone,"Small point, but I do not think you need the hyphen to start each line; Sphinx will render this block correctly with just the  indent"
flexatone,"Maybe just put the `nonlocal` statement closer to its usage?  ```suggestion             funcname: str = _get_funcname(func)             nonlocal func             func = functools.partial(func, *args, **kwargs)              if not mail_args.subject:                 mail_args.subject = funcname              # Since this is a discrete task, it means the user doesn't need to know about MSInput             msi = Input(mail_args, log_task_header=False)  ```"
chaburkland,It was raising pandas deprecation warnings. I was tired of seeing it.
chaburkland,"This was also to silence warnings. For example, this line of code:  ```python event_df['short_description'] = event_df.apply(                lambda row: event_str % (row['event_description']), axis=1) ```  will raise a very unhelpful `SettingWithCopyWarning`.  Here is where I discovered this approach: https://stackoverflow.com/a/20627316"
chaburkland,"Yeah this module was for testing. I wanted to fully separate this PR from any actual deployment. I have a PR to deploy Centcon with the new monitor. Once I do that, I'll update these emails."
chaburkland,`default_mail_args` is meant to be publicly accessable by `mail_notifier`. `log_task_header` should be private though.
chaburkland,"I shied away from this because it ends up being 128 columns long! Plus, I don't think it's right.  `not all(issubclass(e, BaseException) for e in exceptions` will not work unless `exceptions` is a tuple. So it has to live inside the conditional."
chaburkland,I thought the standard style was to put `nonlocal` and `global` keyword statements at the very top of whatever scope they are in? Your suggestion looks off to me
flexatone,"I see. But the problem is that it changes the global Pandas state only if and when this module is loaded. If we want to use this configuration always, we should put it in a `__init__` or someplace else that is sure to always be run early in the life-cycle of the process. On the other hand, will this also silence legitimate `SettingWithCopyWarning`?"
chaburkland,"That's a fair point. I don't really think we look at warnings currently, so right now we don't have any way to distinguish legitimate vs superfluous `SettingWithCopyWarning`s. However, I'm not sure of a better place to put this, so I'll remove it."
flexatone,"It is almost right: it just needs one more set of parenthesis: ```python if isinstance(exceptions, tuple) and (         not len(exceptions) or not all(issubclass(e, BaseException) for e in exceptions)) :     raise TypeError(msg) ```  I agree it is long but three `if`s to get to the same `TypeError` seems slightly less desirable to me!"
flexatone,"It is also ""standard style"" to group definitions and their usage. But I do not have a strong preference."
chaburkland,"Actually that still isn't correct!  For example, the first check could fail for something like `(ValueError,)`. It is an instance of a tuple, and it's not empty, and all elements in the tuple inherit from `BaseException`.  This means it will examine the second branch, which will raise an Exception, since `issubclass(exceptions, BaseException)` will not work since `exceptions` is a tuple"
brandtbucher,```suggestion     @staticmethod     def from_as_of_date( ```
brandtbucher,```suggestion     @staticmethod     def from_as_of_date( ```
brandtbucher,TODO?
brandtbucher,```suggestion         if overrides is not None: ```
brandtbucher,"```suggestion                     f'Using default {date_min} as `date_min`. Providing later `date_min`, if possible, could significantly reduce memory and computation time.') ```"
brandtbucher,```suggestion                     f'date {psuc_date} is before the minimum supported date by vendor ({self._vendor_first_date})') ```
brandtbucher,```suggestion                     f'date {date} is before the minimum supported date by vendor ({self._vendor_first_date})') ```
nekobon,"Oops! Sorry, it's actually supposed to be classmethod :joy: "
nekobon,`PUOverrides` will be a Sequence-like (when implemented) so empty one will be still fine. 
gdevanla,nitpick: `maybe_more[0]` and `path` are used interchangeably. May be you could consider using just one of those.
gdevanla,"The mutation of the passed dicts is not something I see always.  Can we instead consider this option:  ``` _partition(entries) that returns a tuple of (package_info, other_info)  ``` Note, this function is more like a generic partition function which does not mutate anything.  and then just create the 2 dicts finally? It just make you add_entry code testing easy, I think. "
vhquang,"Since you are adding docstring, I would prefer document that will describe the returned tuple as well. For example: ``` Returns:     Tuple of product id / family id, and carve id if found. ```"
vhquang,"I think at this point we already know there is no matching carve, so we can narrow the message, ie: because of no product found."
vhquang,"There are 2 different conventions around `fp`, one is the absolute path string, the other is tuple of strings (ex: ('esg', 'iss_xxxx_yyyy.txt')). So let typehitn it to be explicit which kind of `fp` is expected."
vhquang,"Does this work if the `port_loc.buid_type` is not `Level.LIVE`? If not, then may be we can do that type check first for early elimination."
vhquang,"Do we want to support `None` when not found? I am not familiar with the use case, but if the client expect a series then they would need to do a None check as well. Then just raise error when not found would be better than return None."
vhquang,"A typehint would be good for this, especially since we are returning Generator."
vhquang,"It is a bit hard to understand this conversion without understanding the input, so I just throw questions here:  Why `USD_to_currency` is a series?  And does it align with `series` on index?  Do we fill `USD_to_currency` to handle mismatch index?"
vhquang,"Typehint would be good, though I think the function name is self-explanatory."
vhquang,This looks like a good test case for test run the code. Would you consider moving it to testing?
vhquang,"You can also reference Charles' PR (if he has already open it) to this PR, so he is aware of this."
vhquang,"I am curious, why `.item()` is needed?"
vhquang,"Since we only get live spec, it could be better to do this check before we try to parse the string. Otherwise we would log the failure for non-live spec. However, I may not be familiar with the benefit of doing so."
vhquang,This would remove and write into the static folder. I would prefer to do that to a `tempfile` directory instead.
vhquang,"I am curious, why is return typehint for the test is needed?"
vhquang,I think testing on the type of Error would be enough. Testing on the actual error message usually become too strict and soon become hard to maintain.
ForeverWintr,This is my test; and I wanted to make sure we were raising descriptive errors. I hope the overhead of maintaining it is worthwhile.
ForeverWintr,"To add to this, the string representation of a portfolio locator isn't unique, so if we do need to support both strings and locators here it's probably better to convert them to locators first, then call str on that locator. Doing it that way ensures that we get the full string version of the locator. "
flexatone,"Just to add: a tuple of strings is generally called `fp_components`, not `fp`."
flexatone,it converts an `np.datetime64` to `datetime.date`: https://numpy.org/doc/stable/reference/generated/numpy.ndarray.item.html
flexatone,Using the TLTs `make_tlt_temp_file()` is best for a test. 
flexatone,Depending on how strict you have mypy set up it can be required.
gettodaze,"I mostly just have been doing it by convention. But I see I forgot a number of other typehints, so the convention wasn't terribly helpful, haha."
vhquang,"How forgiving we want for this function?  If we have control of the downstream function, then I would prefer we do this parsing early on, so that `port_loc_str` is `str` and `port_loc` is `PortfolioLocator`. And any input that is not valid `PortfolioLocator` would fail early. That would make this function less forgiving in its input and more consistent on its expectation."
vhquang,"For descriptive testing, it looks like you would like to confirm the product_id is given in the exception. I think we can use `assertRaisesRegexp` in this case. It would help to avoid updating tests due to the cosmetic change of the message."
ForeverWintr,This is a good candidate for `fp=self.self_destructing_directory()`!
brandtbucher,"@flexatone, I refactored this function to always return an `int` (as its callers assume). It should raise here in any situation where it would have returned `None` before.  Let me know if you'd prefer something different. I'm going to wait for a clean AgentQ run before merging, regardless."
flexatone,"Sounds like a good change, thanks!"
vhquang,:facepalm: 
vhquang,"I am curious (and also because I don't know about `valid-type`), if we do ``` tp.Type[corporate_action.CorporateAction], tp.Type[corporate_action.CorporateAction] ``` or put ``` CorporateActionType = corporate_action.CorporateAction CorporateActionSubType = corporate_action.CorporateAction ``` at module level, would that better than resolve mypy error?"
vhquang,"Can we use `# type: ignore` to ignore this whole file? The original code did not implement typing correctly. However, this change will give less information than its previous code, and thus will make getting back on this project harder.   Also, I don't if we have the decision on whether we will continue on this project. So it would be best to ignore it for now. And if we come back to it, we will fix the typing properly."
vhquang,Same request for ignoring type check for this file as well.
vhquang,I am not sure this is the intention of the author. Maybe it is better with ``` SERIES_EXTRACTORS: tp.Dict ```
brandtbucher,"Yeah, they both work (I'll update those lines instead of ignoring them).  Mypy still has some trouble distinguishing variables from type aliases, and this is one of those cases. It *always* assumes that class-level assignments are variables, not aliases.  [PEP 613](https://www.python.org/dev/peps/pep-0613/) should help, but we're still not able to use that quite yet."
brandtbucher,"I'd really rather not ignore entire modules, and I think it's a bad idea to keep invalid type hints like this.  I can convert them to comments, though. Would that be better?"
brandtbucher,@vhquang I've created an alias to `tp.NamedTuple` called `CorporateActionAttr`.  Hopefully that still makes it clear what is expected here while actually being a valid type!
gdevanla,"Looks like `companies` is a `np.array` at this point? Perhaps, the type hint needs to be changed?"
gdevanla,code golf:    ``` if not x.strip() ```  instead of  ``` if x.string() != '' ```
nekobon,"Since we already use ""country group"" instead of ""region"" on the above table, please use ""cg"" here."
nekobon,Missing typehint (factor_fields)
nekobon,What is rg[0]?
nekobon,Are you overwriting country group name?
nekobon,What is regions type? Is it a Frame?
nekobon,"If you only need to sum, maybe you don't need a temporary Frame?"
nekobon,"If possible, I think it is easier to read without `assign`s, as I (or readers) cannot tell if you actually need to overwrite the existing values"
nekobon,"Please remove this comment (# for qc), as this table is now a requirement for another table"
nekobon,I think they are sleeves (cg x size x factor)
nekobon,"(I think you meant table_manager) Yes, table_manager should take sf.Frame. I remember Chris mentioned that before."
vhquang,"I realize what I am doing here is confusing. Let me know if there is a better way to clear it up. What I am trying to do is get a placeholder Frame, with same shape of current region Frame. Then update it with country group name, country group weight, factor weight."
vhquang,Do you know which table will use the data from this cg_factor_weight table? Should I expose the field used in this table to the methodology?
vhquang,"I use a temporary Frame to take advantage of `fill_value`. Since EM doesn't have ""small"", that region only has 4 rows (4 factors). And the NaN only shows up when re-index, which has roughly same cost as creating new Frame."
nekobon,"I think `sum` ignores nan. If that's correct, you don't need `fill_value` there."
nekobon,"The new table is not yet used by anything. Ted wants to take a look by himself. If they want to automate some checks associated with the table in the future, we can think about exposing the field names."
vhquang,"That's right, thanks Yu!"
vhquang,"Hi @flexatone this is where we discuss in our OOCR, about my approach of using the ""placeholder"", which may not very idiomatic if the placholder is immutable. Let me know if there is a better way to do this.  "
flexatone,"I am missing some context here, but yes, this is a bit unidiomatic! often when we need a ""placeholder"" we might just use an `Index` object to enforce a common shape, or an empty `Frame`; or not all: simply build up the `Frame` you need and then validate that it has the `Index` or shape you are looking for. Or, rather then using `assign`, just collect the `Series` you need and concatenate them together."
nekobon,Does `regions` need to be a sequence of `FrameGO`? It is often safer to pass/receive `Frame` instead of `FrameGO`
nekobon,:+1: 
vhquang,"It doesn't _need_ to be FrameGO. The typehint in this case is just a document for the type of input goes into the function, which is the output of `distribute_factor_to_region`. I didn't think of converting FrameGO into Frame is needed, given that both those helper functions are internal to `get_cg_factor_weights`. But now that you mention it, I think it is probably better to do so."
flexatone,Do we need a value for this parameter so that it will work without the study parameter?
johnjhawk,"no value is needed.  if it's not defined, it gets the file from rapc_dated_paramaters."
gettodaze,Just a personal question: Is `CACHE_GENERATION_IDS` mostly just used in `DiskCache.get_cache_fp`? When do you determine if you need to increment your id? Is it just if you make a change to a function (or its called functions) that uses `DiskCache`?
gettodaze,Does this mean that this docstring and the one above it might need to be changed too?  ```Security tables are not supported in PSUC```
gettodaze,"This might be for my own knowledge, but is the PSUC not a child of PSU? Why are they listed separately?"
gettodaze,Or would the docstring and errors just say `not supported in PSU`? There is a line in the rst below saying:  ``` ``augur.api.compustat.PSUC`` and ``augur.api.compustat.PSUR``  are removed and ``augur.api.compustat.PSU`` is added containing  frequently-used data from both previous PSUC and PSUR. ```
gettodaze,Are these `FundamentalFields` not in `SDKFieldMissingValues` because they are not from the `SDKFields`? Would they benefit from a `FundamentalFieldMissingValues` class?
nekobon,"It is used for both disk and in-memory cache through `cache.py`. When we know some data that could have been cached should be invalidated, we increment this ID. It is difficult to know if any client of the code you changed are cached, especially for SDK users, so it's good to increment when any data is changed in the SDK packages."
nekobon,"This PSUC class is still there for internal use, but not in public for SDK users (not in `augur.api`). These docstrings are still valid for IS's internal code."
nekobon,"That is a great point. I will discuss with Charles who wrote the Fundamentals. I think 99% of the Fundamental fields are float values, so it might not be very useful, but it's definitely worth consideration. "
nekobon,"PSUC and PSU are two different type of UniverseHistory. They don't inherit from each other. PSUC is an annual version of PSU, while PSU is a daily one that uses some data from the last available PSUC."
nekobon,"But since SDK users are only interested in part of the PSUC's data that is available via PSU, and not interested in the whole PSUC, we decided to hide it from the public access."
vhquang,"I will handle this, and the check of `hasattr` in separate PR, since that will involve spec change and there are other portfolios using this pattern: CTI, FF eurozone."
gettodaze,"How about: ```         '''Returns:             (product id, carve id), where carve id may be None if not found.     ''' ```"
ForeverWintr,"maybe this could be more generic, and `assertAlmostEqual` can just take a `message` argument that's appended without the added `'context='`? I imagine a user of this function might not always want their additional text prepended with 'context='.  Something like:  ```python def assertAlmostEqual(self, v1, v2, tolerance=1e-12, message=''):     ...     if message:         msg = f'{msg} {message} ```"
ForeverWintr,"Actually I think np.isin can handle arbitrary iterables, so I think the typehint is ok. Even generators seem to work here."
gdevanla,"I think it is a good idea. Avoids, that function from inserting unwanted extra text."
gdevanla,Um...But aren't you again indexing into `companies` with the returned values of  `np.isin`. Or maybe I am overlooking something?
ForeverWintr,"Oh, you're right! Good catch!"
ForeverWintr,Under what circumstances might this assert fail?
ForeverWintr,"What do you think about making this a constructor on the `RAPID` class?   I think this method could be better named `from_series`, or `from_rapid_characteristics_row`. `from_str` implies we are parsing attributes from the string. Also, it's possible that we might get a row from the RAPID sheet by other means. For example, what if we want to load all rapids by iterating over the sheet? It would be nice to be able to do something like:  ``` rapids = list(RapidCharacteristics._frame.iter_tuple(axis=1, constructor=RAPID.from_row)) ```      "
ForeverWintr,"Rather than have a `rapid` attribute, what if you add a `__str__` on this class that converts it to a rapid string? "
ForeverWintr,"You may want to look at `patch.object`, which saves you from such long import strings. In this case, I believe you could do `@patch.object(PerformanceTimeSeriesData, 'get_series')`"
ForeverWintr,is `valid_revision` ever used?
ForeverWintr,"What if you split this in two: `get_series_from_rapid`, which only takes a `RAPID` instance and doesn't need `rapid_characteristics`, and `get_series_from_rapid_str`, which loads a `RAPID` from the str, then calls this method?   That way you don't need your `isinstance` check, and you make the situation where a user might pass `rapid_characteristics` more explicit. "
gettodaze,"It shouldn't, haha. I can remove it. I was referencing `product._KeyedInputDataNames` that has ```     def __init__(self,             revision: tp.Optional[int]=None,             src_dir: tp.Optional[str]=None,             ref_revision: tp.Optional[int]=None,             remove_inactive: bool=True):         rev = ref_revision if ref_revision else revision         assert self.valid_revision(rev)  # rev this file was introduced          # sets self._fp         super().__init__(revision=revision, src_dir=src_dir, ref_revision=rev)         assert self._fp ``` Also responding to your other comment about `valid_revision`, I see that I should check that here, maybe throwing a value error if invalid. "
brandtbucher,"```suggestion         MachineExternal(machine_name='api.bloomberg.com', ip=None), ```"
brandtbucher,```suggestion         return f'{protocol_str}{auth}{machine.machine_name}{port_str}{end_point_str}' ```
flexatone,In other places where we need to do this we branch on the type of `live_geu`  rather than `live_geu.co`. Not sure if one approach is better.
nekobon,"Is this `remove_ff` used? If not, perhaps you might want to add something like ```python assert remove_ff, 'remove_ff=False is not supported with ISS data'```"
nekobon,I think the same date as as_of_date is still good.
nekobon,"I think it would be better if we can make this more static, or at least exposed in the output (summary, etc). The build would be different if imcron calendar is updated (e.g. new product is added or deleted), and we won't be able to produce the same past build."
nekobon,Can we make this date (or co_sec_map) as the input to this reader?
nekobon,This is not a nice data format! (I'm blaming ISS) :joy:
gdevanla,You probably overwrite this change. Can you please check?
gdevanla,"This can be an enum. ``` import enum  class FieldListType(str, enum.Enum):        static = 'static'        timeseries = 'timeseries' ```  And in the file, do you think you could just use the full names, `static`, `timeseries` rathar than `st` and `ts`? "
gdevanla,"These 2 lines, can go into the `inventory.py` as a `PlatformResource`.  You can take a look at some classes here:  https://github.com/ResearchAffiliates/invsys/blob/df25aab1d87d09b8cb1e7629cade229c57fb5316/deploy/inventory.py#L526"
gdevanla,This is not needed. We set up out own logger at the outermost level.
gdevanla,This is old code I assume. Do you plan on using this for something?
gdevanla,"You can directly use, `sf.Frame.to_tsv` instead of going through `pandas`."
gdevanla,Looks like these 2 variables are not used currently. Do you need this here?
gdevanla,nitpick:  You can just say  ``` if active:   .... ```
gdevanla,Can you please add a return type to this function?
gdevanla,"For both, `bloomberg/bbg_field_list.txt` and `bloomberg/bbg_field_list.txt`,  can you consider adding constants at the top of the module, at the class level, like   ``` class Beap:        BBG_TICKER_LIST_FP =  kozuchi.get_input_dir() /  '/bloomberg/bbg_ticker_list.txt'       BBG_FIELD_LIST_FP    = kozuchi.get_input_dir()  / '/bloomberg/bbg_field_list/txt' ```  That away you can references this variable in multiple places and can be easily discovered."
gdevanla,"This function's return type, says the function is returning `sf.Frame`, but actually this function returns a `dict`.  Can you also consider, creating a `NamedTuple` for this fields instead of dict. I am guessing you use this data type in multiple places."
gdevanla,Looks like the function is returning a dict.
gdevanla,May be we can create a   ``` class FieldListType(NamedTuple):   ... ```
gdevanla,"One thing to consider:  Create a class called `BeapConfig` and move the following methods to that class.  That way you can keep the config code outside the core `BEAP` class.  ``` class BBGTickerConfig(NamedTuple):     pass  class BBGFieldsConfig(NamedTuple):     pass  class BBGTriggerConfig(NamedTuple):     pass  class BBGDatasetConfig(NamedTuple):    pass  class BEAPConfig:      def get_bbg_ticker_db(cls, data_group_short_name: str) -> BBGTickerConfig:         pass      @classmethod     def get_bbg_field(             cls,             data_group_short_name: str         ) -> BBGFieldsConfig:         pass      @classmethod     def get_bbg_trigger(             cls,             data_group_short_name: str         ) -> BBGTriggerConfig:         pass     @classmethod     def get_bbg_dataset(             cls,             data_group_short_name: str,             as_of_date: datetime.date         ) -> BBGDatasetConfig:         pass   ```"
gdevanla,"Usually, we just call this `logger`."
gdevanla,Can use a f-string here  ``` f'/eap/catalogs/{c}/' ```
gdevanla,You can use `date_util.get_timestamp_str()`.   ``` id_postfix =  f'{date_util.get_timestamp_str()}-{uid}' ```
gdevanla,"Since we are returning more than 2 values, and they are used everywhere, it would be nice, we can also make this a named tuple:  ``` class ClientSessionInfo(NamedTuple):       session       sse_client: SSEClient,       account_url: str ```"
gdevanla,Does this have to be   ``` return universe_url ```
gdevanla,Is this call needed? I see we are only returning the `universer_url` string.
gdevanla,Is this call needed? May be you left it here for debugging?
gdevanla,"Again, maybe this is just for testing?"
gdevanla,Should this return an `url`?
gdevanla,Please could you add type hints.
gdevanla,Probably needs to return a url
gdevanla,I notice that sometimes you are passing the session object and sometimes you are creating one here? Is there a reason you cannot always create one? Or pass one?
gdevanla,You don't need the `return` here.
gdevanla,"Usually, we raise `ValueError` for this."
gdevanla,Return a `url` maybe?
gdevanla,"You have put in a lot of effort in this file Thanks for that!  I am adding some general observations about this module here:  1. Please consider adding type-hints where possible. 2. I see when `upload` is not set, we return `None`. I am guessing we should return a `url`. 3.  We sometimes pass session and sometimes `create_session`. Is there some pattern we can follow, or is it better this way? 4.  Many places, I see a call to session.get() which does not get used later on. Maybe a comment can be added if we plan to keeping it for testing?   I think this module has lots of functionality. We would need tests for each of these functions, to make sure they continue to work.  Can you please add tests that will improve that coverage?"
gdevanla,"We could either consider making these a list of Enums.  Better, maybe just generate this list, using the function names in `BEAP`. That way, we have tight integration with the actual function defintions in `BEAP`.  That way we can also automatically, extend the `arg_parser` to pick up new function definitions in `BEAP` class. "
gdevanla,We need an error to be raised if none of the `RUN_MODE` options match.
gdevanla,"Can we also make `TriggerType` an enum?  ``` class TriggerType(str, enum.Enum):       adhoc = 'adhoc'       scheduled = 'scheduled' ```"
gdevanla,We are not using the `universal_url` anywhere. Do you need to define them here?
gdevanla,We are not using the `request_url` anywhere. Do you need to define them here?
gdevanla,"Same with snapshot files. We are not using it here, unless it needs to be used for logging."
gdevanla,You probably checked in your wealloc stuff to this branch?
gdevanla,"The, you can also move `CREDENTIAL_FILE` attrbute into that class."
gdevanla,Can we also add a Enum class to store the list of supported datagroups.
gdevanla,"I think if `upload` was chosen, then this function should return a path to the `static url`. Let's chat about this if needed."
AlanMLin,"I don't remember that I made any change to this file. I modified deploy/core/config/requirements.txt and added a deploy/core/config/bloomberg/credential.txt.  BTW, do I need __init__.py in deploy/core/config/bloomberg folder?"
gdevanla,"You don't need it there. We only need `__init__.py`, in folder where we have `.py` files. The `__init__.py` tells the various python file discovery tasks to pick up files in that folder."
AlanMLin,Removed
AlanMLin,I will use this enum class
AlanMLin,I will use this enum class
AlanMLin,"I agree. I am calling upload_to_static() in sftp_uploader.py, but it does not return anything. Can we modify this to return static_url?"
gdevanla,"That change might take a while. I added a ticket for that. For now, we will have to construct the link ourselves. I can take care of that and I will push my changes to this branch."
gdevanla,"I updated the `inventory.py' to provide a helper function.  It should be merged into default tomorrow. After, that you can use the following code after call to `upload_to_static`.  ``` STATIC_FOLDER_LEAF = 'bloomberg'    if upload:      .......        path = inventory.StaticVendorData.url_join(                     STATIC_FOLDER_LEAF,                     f'{os.path.basename(output_file)}.zip')       return path  return output_file ```  "
gdevanla,Hi @AlanMLin This function is now available on default. Please pull from default and then this function should work as needed.
AlanMLin,This is done
AlanMLin,removed
AlanMLin,done
AlanMLin,"I am returning two variables, tickers which is a frame, and data_group which is a str. How to assign the return type?"
AlanMLin,done
AlanMLin,done
AlanMLin,done
AlanMLin,done
AlanMLin,done
AlanMLin,done
AlanMLin,done
AlanMLin,done
AlanMLin,done
AlanMLin,done
AlanMLin,I created a list of Enums for run mode
AlanMLin,I created a Enum for datagroups
flexatone,"Does all of this need to go in `__init__.py`? It seems that putting this at the root of the TLT is a little awkward, as there might be clients of the TLT that do not care about nor use DB sessions."
flexatone,Should this inherit from `RuntimeError`?
flexatone,"```suggestion             connection_spec: tp.Type[inventory.PostgresConnectionSpec], ```"
flexatone,"If you use this type in more than one place, maybe an alias is appropriate."
flexatone,"Why are the `*_map` dictionaries in lower case, but `PRICE_FIELDS` is in upper case? Maybe all in upper?"
flexatone,"I think the type `audit_fields` may not be consistent elsewhere: I think you want `str` to `tp.Any`. ```suggestion                 **audit_fields: tp.Dict[str, tp.Any] ```"
flexatone,"I think this is a little better, because if you accidentally stomp a kwarg name, this will fail, while the former will silently stomp.  ```suggestion             #attrs = {**dict(attr), **audit_fields}             macro_attr = MacroAttr(**dict(attr), **audit_fields) ```"
flexatone,"```suggestion def clone_object(*, cls, inst, skip_attr=None, update_attr=None): ``` I prefer `cls` in this situations, even though it is not a class method."
flexatone,"This will not match `np.float` objects, if they might come through here."
flexatone,Should this large text file be committed to our code base? 
flexatone,I noticed you are using pytest for your other tests; why use a `RATestCase` here?
gdevanla,"I put it here, since are dealing with Global Sessions (across any PostgresDB) related to kozuchi.  Let me consider if I can isolate some of it to just mats db."
gdevanla,For `exceptions` that can be handled we inherit from `Exception`. That's the approach we have in ralib.exceptions as well. 
gdevanla,Just that this is *not* `cls` in the usual sense. 
gdevanla,Good point. I wanted this somewhere since I am iterating over this and wanted to track this file. I will remove this.
gdevanla,Good point. I will update that.
gdevanla,I vaguely remember there was a discussion on this.  What would be the best practice for this kind of a check?
vhquang,"This comes from a code review that we want to break tie between the date the ISS data is loaded (aka: AsOfDate) with the date we have CoSec map (ie: GEU date). The CoSec map date ideally should be close to the AsOfDate, but not after it."
nekobon,"But does it explicitly find the ""prior"" date as in the docstring? I feel like it can be the same date, if available."
vhquang,"It is exposed in the summary as part of this PR: ``` def build(): ....     cosec_map_date = iss_data.ISSData.get_most_recent_geu(fp_components=self.spec.iss_fp_components)     self._summary.insert('cosec_map_date', cosec_map_date) ``` > The build would be different if imcron calendar is updated (e.g. new product is added or deleted), and we won't be able to produce the same past build.  Can we make this date (or co_sec_map) as the input to this reader?  This is a good point. And I am not aware of GEU date can be unstable. Should this cosec map date be part of the rafi_esg spec? Previously in this change, it was look up at runtime then written out into spec. And that was pointed out (I think by @flexatone ) that it shouldn't be part of the spec, then it is written into summary instead."
vhquang,"But I hope they won't ""improve"" it. If they decide to introduce ""[50-70%)"", ""[70-100%]"", it will break our calculation... :("
nekobon,"Sorry, I didn't notice adding it to summary. Would it be possible to simply give the as_of_date from the build (we have it as the geu date) instead of parsing from the filepath? That way, it is very explicit and you don't have to call `get_most_recent_geu` multiple times. It seems like getting the most recent geu from another date is not directly related to this reader. "
nekobon,"Oh, that is a great point! Would you like make sure we don't receive unknown intervals, maybe?"
vhquang,"I see, and this is a good point. I think the `geu_dates` is exclusive range, so the docstring is correct. But in this case we would like it to be inclusive: get GEU on or before given date. Also, I notice that the `geu_dates` takes input_data_revision. I am not sure of the workflow, but if the calendar is locked into the revision, then maybe I can use that to lock the cosec map date. I will test on this to make sure."
vhquang,"It is different from the GEU date or trade date of the build. For example, we build March portfolio, the GEU will be 2/26. The ISS date (AsOfDate) is 1/31 (month end of prior month of the build date). The cosec map date will be 1/29 (GEU before that month end).  Ted and Robert wants to know the cosec map date, but defining it more on our implementation as it ties to the way we interpreting ISS data. Hence I reluctant to ask Ted/Robert specify it."
gettodaze,I added `from_series`!
gettodaze,@ForeverWintr What about a `__str__` that returns the `rapid` attribute?
gettodaze,"Tom, this has blown my world! Thanks for the recommendation!"
vhquang,"I am going to do this along with #1295, since it is currently not doable to check the SQL result before writing, with the old `DataWriter.write_stored_proc`."
gettodaze,Are these still test postgres instances?
gettodaze,I really like using choices! I always forget about it.
gettodaze,"Do these need to be moved now, or is this a note for the future?"
gettodaze,Changed the error message.
gettodaze,Added str typehint.
gdevanla,They are local instances which can be used during development. The Test instances are separate.
gdevanla,Yeah. It will be moved in the upcoming iterations.
gettodaze,"Got it! Now the `port_loc` is converted to an object, so we now can do the `LIVE` check in the beginning."
gettodaze,Now parsing is done above.
gettodaze,That makes sense! Now it doesn't catch key errors.
ForeverWintr,"The benefit I see of constructing the rapid string dynamically is that it removes the possibility of the rapid string and the contents of the row being out of sync. That may not be worth the complexity, however, and may not even work if we expect that contents of the row may not be sufficient to construct the rapid. I yield to your judgement here. :)  If we don't construct the rapid from the contents of the row, I actually prefer not to have a `__str__`, as I think it could be confusing when the row contents and the rapid string are out of sync (I think I saw an example of that in your tests, for example)"
gettodaze,"Oh, it's a bit hard to see here, but `USD_to_currency` is another column from the same `Frame`, so they have the same index. `self.frame` contains FX rates and returns data."
gettodaze,I think I did! I just left that there as well for an example of how to use the reader.
gettodaze,"#1106 Hi Charles, on merge, please change this line from `papyri/papyri/core/writers/index_level_performance.py`: `from papyri.core.temp_get_fx_timeseries import get_fx_timeseries # NOTE: Charles, please change this when you add get_fx_timeseries`  I hope this works!  Edit: It seems to have worked. Thanks for the suggestion Quang!"
chaburkland,"There is a method in `ISLib.cache.py` called `atomic_write` that should handle this for you, and it's guaranteed to be atomic! It would look like:  ```python with atomic_write(file_path) as temp_path:      with open(temp_path, 'wb') as f:          f.write(content) ```"
chaburkland,"This method is only used for testing? I'm thinking this should be removed, since it's the only real benefit it provides is caching, but that's not very important for testing."
chaburkland,"Minor, but I would inline this. `match = re.match(pattern, item['webUrl'])`, is just as clear, and it adds one less line overall."
chaburkland,This is very clever.
chaburkland,I'm wondering if this should be moved to `date_util.py`?
chaburkland,"I think the yearmo construction can be simplified here, since `sf.IndexYearMonth` will handle the string to `datetime64[M]` conversion for you.  ```python frame = sf.Frame.from_csv(fp, index_depth=2, name=name)  yearmo_index = sf.IndexYearMonth((f'{year}-{mo:02}' for year, mo in frame.index) return frame.relabel(yearmo_index) ```  Plus, you can get rid of `cls._yearmo_to_dt64_month`"
chaburkland,Perhaps return a frozenset here?
chaburkland,"Everytime this test class is run, you will remove all files in the `SBIFactorReturnsReader` save directory? That doesn't seem right to me, although I admit I don't know this project very well."
chaburkland,`web_urls` is unused here.
gettodaze,The problem is that I need to parse the string in order to see if the locator has a LIVE build_type. I don't think `'LIVE' in port_loc` is robust enough for my use case. @vhquang Unless you had something else in mind?
gettodaze,"@ForeverWintr Is there a simple way to get a file path (not directory) from `self_destructing_directory`? Otherwise, I think it might just be simpler to do `make_tlt_temp_file()`"
gettodaze,"This is great, thanks for sharing!"
gettodaze,"Oh, you're right! I was using it originally but not anymore. I will remove it."
gettodaze,Thanks for the tip!
gettodaze,"@chaburkland The idea is that this reader reads directly from sharepoint, and anything on local is just temporary. So the test just removes the files if they exist. Alternatively I could have `__init__` take a filepath argument; would that be better?"
nekobon,Move this message to `else` repr of connector there too
chaburkland,"I think that if the reader is supposed to only store temporary local copies from SharePoint, then that should be baked into the reader's implementation. So either the `__init__` should `rmtree` it's directory, or on `__del__` should do it. Basically the setUp/tearDown of the class should enforce the non-permanence of it's storage directory."
gettodaze,I like that. I will `rmtree` on `__init__`
vhquang,Not use PrettyDate
vhquang,Make private method.
vhquang,TODO: make public getter method.
vhquang,"TODO: use `.get(x, False)`"
ForeverWintr,"Oh, I missed that `fp` was a file not a directory. You'd have to create a file path within the directory yourself.   I recommended `self_destructing_directory` though because it's automatically cleaned up after the test, whereas the file created with `make_tlt_temp_file` is not.     "
vhquang,"TODO: change `log` to: add, or extend_table."
vhquang,TODO: Check for True/False.
nekobon,"How about to check here for vigeo to be safe ```python assert not hasattr(spec, 'vigeo_fp_components') ```"
nekobon,"June is production yearmo, so it's better to avoid using this yearmo for testing (otherwise test builds won't be reproducible after the production build)"
vhquang,"Since the test build require a PSUR ""patch"" to use May PSUR, what I am currently use to build test build is: ``` --spec eur_multi_2021/emc_gen --date 202106 --NFD --study 7827-june --suffix bid7827j ``` I imagine once I make production build, it will be without the `--study` param. ``` --spec eur_multi_2021/emc_gen --date 202106  ``` I think that would allow us to reproduce both test build and production build. I also use this approach to test both test build and production build: https://github.com/ResearchAffiliates/invsys/blob/64987a566768198e6a942fb6e8955f71c2abd719/RAPC/cspec/ra_multi_2021/rmc_gen.py#L64-L77 Is this approach OK?"
nekobon,"Once we need to build for production, `parc_id` and `iss_fp_components` would need to be updated. So we won't be able to reproduce the test builds. How about to simply move these two in the study parameter, so that it will be reproducible even after we put different values for production? Study parameters would overrides other parameters."
flexatone,Should we provide dtypes to `read_csv`?
flexatone,Just to confirm: we want to be inclusive on both start and end dates?
vhquang,I see. Thank you for the suggestion Yu!
gdevanla,"This move is probably very fragile. If an exception was raised inside this context manager we might end up with a bunch of `open` file handles, correct?"
gdevanla,"Here, should `result.text` be `result.reason`?  I am just curious. I am not sure."
gdevanla,Is this still needed? I see some code below this statement.
gdevanla,Is this #TODO still valid?
gdevanla,"Could we just have done   ``` start_date =  f'DATA_DATE <= {_sanitize_date_arg}'   if date_from else '' end_date  =  f'DATA_DATE >= {_sanitize_date_arg}'   if date_to else '' ```  Sanitize could just sanitize the date arg.  Just that there is so much stringiness happening in `_sanitize`, the client is better for creating one 'sql_stmt` and plugging in the values.    Another reason, is looking at `_sanitize` functions signature, I am not sure if `>=` I have to make an assumption that it is applied as `DATA_DATE >= date_from` rathar than  `date_from >= DATA_DATE`. "
gdevanla,Any reason you are not using the temp_folder methods avaialble under `tlt`?
gdevanla,I like these decorators!
gdevanla,I think you need to handle both Postgres and MSSQLServer here.  The `write_stored_proc` makes an assumption that the connection spec is a  MSSQLConnectionSpec
gdevanla,I like it!
gdevanla,I thought we were moving away from using PrettyDate? Do you still have to use this class.
gdevanla,Same here. Are we still planning to use PrettyDate?
gdevanla,You may want to add a type hint here for future mypy.
chaburkland,"Yeah. I just copied this from RALib to ISLib, but I'll clean it up too."
chaburkland,I didn't know about that! That seems better to me.
chaburkland,I was going to uncomment this once portal is deployed on a production server.
chaburkland,I thought I caught all my todos! Yeah it's valid - I'll fix this.
chaburkland,Those are good points. I'll update this.
chaburkland,Mainly because I can never remember where they are and I intuitively go to the `tempfile` module. Why are the tlt methods preferable?
chaburkland,"My thought process was that `_sanitize_date_arg` should only determine if `date_arg` can be converted to a date object, and thus to be as generous as possible with the date format. I'll make this call more explicit."
chaburkland,I'll remove it.
chaburkland,I was too scared to but this is the wakeup call I needed. I'll typehint them.
chaburkland,"@nekobon my assumption is yes, but I don't know for sure."
nekobon,@chaburkland I'm not sure the definition of these columns in the DB (or query). We need to confirm with Forrest or Xi.
chaburkland,"Wait I'm sorry I skimmed this question this morning.  Yes, the inclusive start/end is intentional and correct."
chaburkland,"I don't think they're needed, but I will add them to be explicit :+1: "
gettodaze,"If I'm understanding this correctly, maybe the docstring (and subsequent docstrings) could be   ''Get companies that pass the screening of percent of woman on board, and the data used to determine exclusion.'''?"
gettodaze,"I see `ColumnTracker().retrieved()` (below) is always cast to a list even though the method casts to a tuple, would it be better to just return a list? ```     def retrieved(self) -> tp.Tuple[str, ...]:         return tuple(self._tracker.keys()) ```"
gettodaze,"Also, what is the difference between `ScoreInfo` and `ExclusionInfo`?"
gettodaze,"Maybe `table_dict to inject new data to`, to show that `table` and `table_dict` are interchangeable words. Or the top docstring could be `Add the calculated data and its involved columns into given target_table`."
gettodaze,"Ah, `ScoreInfo` might be a less strict version of `ExclusionInfo`?"
gettodaze,Remember to remove this
gettodaze,It's interesting how pylint doesn't recognize namedtuples as unpackable
gdevanla,Can we also update the type hint of this function.
gdevanla,Type hinting could be useful here as well.
vhquang,"Thanks for the suggestion for docstring. The main purpose of the function is return the calculated data. The dataframe with columns used is just a supporting artifact. I would like to keep the docstring on the main usage of the function at this stage.  `ScoreInfo` is a numeric series, and `ExclusionInfo` is a boolean series. I may change `ExclusionInfo` into `SelectionInfo` now that my recent usage has inclusion instead of exclusion. "
vhquang,"From the perspective of the function, it wants to return the columns used. I want to make it explicitly immutable, for example: ``` ct['a'] ct.retrieved() ct['b'] ct.retrieved() ``` The casting is due to static_frame expects list, instead of tuple, for columns selection. And that is independent to the tracking objective of the tracker."
vhquang,I see the confusion. Thanks for pointing that out. I like your second suggestion better!
vhquang,"Both would have equal impact into the calculation. But for `ExclusionInfo` we wouldn't have NaN. For `ScoreInfo` we may, depend on the data."
gettodaze,```suggestion             - How to handle multi-line notes? ```
gettodaze,"Maybe something like:  This code has various issues in such categories as readability, performance, etc, and may contain bugs. As it is, we would not feel too proud to merge it into our codebase. We would both like to get your opinion on how to refactor it into something we would feel proud to put into our codebase. You can comment on anything and everything you like, in an effort to make it something that you would be proud of. But for the sake of time, try not to change any actual code and just add comments where applicable.  I want to lead the interviewee a bit into the problem so they feel more confident recognizing changes. But for exact wording, I'm not married to the above by any means."
nekobon,Does `tp.Any` here mean something could modify `object()` to something else?
nekobon,Very nice separation of the core methods and ms-related process! I like they are not decorated anymore.
nekobon,I'm curious; does our myra-related code still work for the current myra website?
chaburkland,What is AgentL?
brandtbucher,"It's a ""local"" test agent that just runs on your current repo (without updating anything). It's really useful for testing changes to the agent machinery, or just executing a local AgentQ-like run over the weekend when the line is too long.  ``` $ python uroborus/apps/local.py ```  While it's running, you can view the results with:  ``` $ python uroborus/apps/serve.py ```"
chaburkland,"I used it simply because I don't think there's any other typehint type for `object`.  This is technically a sentinel flag that's not mean to be modified, but `UNCAUGHT_EXCEPTION_SENTINEL_FLAG` was too verbose."
chaburkland,"I have no idea! I un-did how this method was wrapped with a `GenericMS`, since this method is only ever called by the `CentconMonitor` process, so it's unnecessary to have this method wrapped by a monitored sequence."
gettodaze,"@ForeverWintr   Edit: Actually don't read this yet! There's a bug somewhere still.  First I want to say thank you for the detailed explanation and sorry for leaving this sit for so long! I really appreciate the time and energy that you put into explaining this for me Tom, and I should have responded to this months ago.  I implemented the `get_standardized_name` like you described, but I later found out that the `product_history.standardize` step allows for setting `include_family` and `include_tlt` to False, giving letting me just list `column_order` as  ``` COLUMN_ORDER = [     '{co_id_field:-1}',     '{name_field:-1}',     '{sedol_field:-1}',     '{ticker_field:-1}',     '{mic_field:-1}',     '{country_field:-1}',     '{industry_field:-1}',     '{SECURITY_TYPE:-1}',     '{SECURITY_TYPE_SUB:-1}',     '{bics_3_code:-1}',     '{bics_3:-1}',     '{bics_4_code:-1}',     '{bics_4:-1}',     '{bics_5_code:-1}',     '{bics_5:-1}',     '{bics_6_code:-1}',     '{bics_6:-1}',     '{pu_rafi_size_single_country:-1}',     '{mkt_cap_column:-1}',     '{adj_mkt_cap_column:-1}',     '{float_field:-1}',     '{volume_usd_field:-1}',     'previous_weight',     'live_weight',     'client_weight',     '{capacity_field:-1}',     ] ``` The fields omit the `tlt` and `family_id`, so I can just use the truncated anchor of `{pu_rafi_size_single_country:-1}` instead of the full `'{pu_rafi_size_single_country:-1:family_id:tlt}'` Does that seem right, or am I missing something?"
gettodaze,"@ForeverWintr You were right, I actually did need the `get_standardized_name`! For some reason, even passing `include_family=False, include_tlt=False` still included the `tlt` and `family_id` in the column name of `f_rafi_size`, I'm guessing because the column name was already the standardized name. ```python f_rafi_size = factory.frame_from_recipe(recipe_objects.FrameRecipe([pu_rafi_size_single_country_column])) f_rafi_size = product_history.standardize(f_rafi_size, -1) ``` So now I have ```python3 purssc_name = pu_rafi_size_single_country_column.get_standardized_name(     family_id=product_history.delivery_history.family_id) COLUMN_ORDER = [     '{co_id_field:-1}',     '{name_field:-1}',     '{sedol_field:-1}',     '{ticker_field:-1}',     '{mic_field:-1}',     '{country_field:-1}',     '{industry_field:-1}',     '{SECURITY_TYPE:-1}',     '{SECURITY_TYPE_SUB:-1}',     '{bics_3_code:-1}',     '{bics_3:-1}',     '{bics_4_code:-1}',     '{bics_4:-1}',     '{bics_5_code:-1}',     '{bics_5:-1}',     '{bics_6_code:-1}',     '{bics_6:-1}',     purssc_name, # using the get_standardized_name here     '{mkt_cap_column:-1}',     '{adj_mkt_cap_column:-1}',     '{float_field:-1}',     '{volume_usd_field:-1}',     'previous_weight',     'live_weight',     'client_weight',     '{capacity_field:-1}',     ] ```"
ForeverWintr,"Interesting. Can you show me what you were running that included the tlt and family_id when you expected it not to?  `ProductHistory.standardize` lets you omit those two components (or at least it's supposed to), but the `FrameFactory` doesn't. The reason is that `ProductHistory` is already specific to a family/tlt, but the `FrameFactory` isn't. It's possible that e.g. `'{sedol_field:-1}'` maps to a different `field` in one family than it does in another, unfortunately.   For that reason I think it's best to include family and tlt in the FieldAnchors you're using here, if you're still using them. "
brandtbucher,"```suggestion     def _pre_process_loaded_data(cls, data: Frame) -> Frame: ```"
brandtbucher,"```suggestion     def _pre_process_loaded_data(cls, data: Frame) -> Frame: ```"
brandtbucher,```suggestion ```
brandtbucher,Maybe break this out into a module- or class-level constant?
gettodaze,"Sure, the example is: ``` >>> f_rafi_size = factory.frame_from_recipe(recipe_objects.FrameRecipe([pu_rafi_size_single_country_column])) >>> f_rafi_size.columns.display_wide() <Index> {pu_rafi_size_single_country:-1:rae_dy:RAPC} <<U44> >>> product_history.standardize(f_rafi_size, -1, include_family=False, include_tlt=False).columns.display_wide() <IndexGO> {pu_rafi_size_single_country:-1:rae_dy:RAPC} ```"
gettodaze,"I see, it is more robust to include family and tlt even in the `ProductHistory.standardize` frames. I now have the new column order like this: ```python3         COLUMN_ORDER = [             co_id_field,             f'{{name_field:-1:{family_id}:{tlt}}}',             f'{{sedol_field:-1:{family_id}:{tlt}}}',             f'{{ticker_field:-1:{family_id}:{tlt}}}',             f'{{mic_field:-1:{family_id}:{tlt}}}',             f'{{country_field:-1:{family_id}:{tlt}}}',             f'{{industry_field:-1:{family_id}:{tlt}}}',             f'{{SECURITY_TYPE:-1:{family_id}:{tlt}}}',             sec_type_sub_field,             f'{{bics_3_code:-1:{family_id}:{tlt}}}',             f'{{bics_3:-1:{family_id}:{tlt}}}',             f'{{bics_4_code:-1:{family_id}:{tlt}}}',             f'{{bics_4:-1:{family_id}:{tlt}}}',             f'{{bics_5_code:-1:{family_id}:{tlt}}}',             f'{{bics_5:-1:{family_id}:{tlt}}}',             f'{{bics_6_code:-1:{family_id}:{tlt}}}',             f'{{bics_6:-1:{family_id}:{tlt}}}',             purssc_name,             f'{{mkt_cap_column:-1:{family_id}:{tlt}}}',             f'{{adj_mkt_cap_column:-1:{family_id}:{tlt}}}',             f'{{float_field:-1:{family_id}:{tlt}}}',             f'{{volume_usd_field:-1:{family_id}:{tlt}}}',             'previous_weight',             'live_weight',             'client_weight',             f'{{capacity_field:-1:{family_id}:{tlt}}}',             ] ```"
nekobon,"`current_sales` is already defined in factors, and this seems too simple to need a new class. How about to use it directly?  ```python factor = factors.Factors(                 last_fy=self.spec.last_fy,                 measures=self.spec.measures)  factor.current_sales[si] ```"
nekobon,"Maybe it makes sense and cleaner to make `calculate_greenhouse_gas` return intermediate data, too."
nekobon,How about for helper functions to return Seriess or Frames so that you can avoid converting them back to forth from tabledict?
nekobon,It seems a little unsafe to switch behavior by hasattr. Maybe confirming not having is_ff_field_pre_ci would add more security. Is there any other way to switch the behavior? By spec?
vhquang,"I completely agree. That is in my plan to do, as I can use my column tracker to implement it cleaner. However, the `calculate_greenhouse_gas` is also used by CTI. To make that refactor, I will need to make change in CTI as well. I want to minimize code change for faster review and fast merge, since we will need this for production build this week. I can refactor code after we deliver portfolio (and have test coverage)."
vhquang,"Can you elaborate more? Do you mean like: ``` table.add_column_from_function(field_carbon_intensity,     lambda row: row[field_carbon_footprint] / row[field_revenue] ``` That could be an interesting solution. I can avoid convert back/forth. I just need to handle NaN/None correctly."
vhquang,Thank you!!!! I have no idea I can do that!
ForeverWintr,"I see the confusion. `factory.frame_from_recipe` returns a table that is already standardized, so standardizing it again with `product_history.standardize` doesn't change anything (perhaps that's what you already understood).   You could `factory.unstandardize` it, then `product_history.standardize`, but including the family_id like you've done is better. Looks good!"
vhquang,"Both Vigeo and ISS if-branch will produce `is_ff_field_pre_ci` attr. But Vigeo execution will not calculate Carbon Footprint (and that won't change in the future, or I hope so).  Explicit defining in spec has been brought up couple time. Maybe I really should have done it."
nekobon,"These columns are added in a separate function. If we don't add them there, and the function simply returns the Series(es) and Frame(s), you can use it as is here and add in the table."
nekobon,"I think it will be a lot easier to maintain in the future! Besides, the Vigeo version is now outdated, so it will be removed eventually. Preparing for easy removal is usually a good idea."
gettodaze,"Great! And oh, I now realized too that my previous comment didn't make sense. I meant: You were right, I actually did need the `get_standardized_name`! For some reason, even passing `include_family=False`, `include_tlt=False` still included the `tlt` and `family_id` in the *standardized* name of `f_rafi_size`, I'm guessing because the *tlt and family id* were already the standardized name. :sweat_smile: "
gettodaze,Were you thinking to perhaps keep this code somewhere?
gettodaze,"```suggestion def index_on_or_before_geu_date(attr_history: AttrHistory, date: datetime.date):     '''Return the history index of the most recent distribution containing geu date on or before `date`''' ```"
gettodaze,"We talked about it in code review, but -> tp.Type[CascadeSpec]"
gettodaze,"Maybe `with_wt` could be named `weights_raw` (to be a bit more clear), like below?"
gettodaze,"I'm not sure where this table gets used, but it might be a good idea to remove the security-specific columns, just in case. I see some of the columns vary within a given company: ``` >>> with_wt.loc[with_wt[reader.co_id_field]=='7257877'].T <Frame> <Index>               819                  547                  <int64> <Index> SHARES                19236000.0           488200.0 WEIGHTS               0.000167567553       8.86890000e-06 PRICE                 nan                  nan SECURITY_NAME         Aluminum Corporat... Aluminum Corporat... CURRENCY_CODE         nan                  nan SEDOL                 6425395              B1WLHY0 CUSIP                 nan                  nan TICKER                nan                  nan ISIN                  CNE1000001T8         CNE1000000T0 no_id                 False                False src_weight            0.000167567553       8.86890000e-06 sedol_from_ticker     nan                  nan sedol_from_isin_pnote nan                  nan ID_BB_COMPANY         7257877              7257877 missing_co_id         False                False weight                0.000168022301232... 8.89296860e-06 co_weight             0.000176915269833... 0.000176915269833... <object>              <object>             <object>  >>> by_co.head().T <Frame> <Index: ID_BB_COMPANY> 16857643             8957976              153737               117929               153370               <object> <Index> SHARES                 6631406.0            21863600.0           94039000.0           18261057.0           1694631.0 WEIGHTS                0.066602394377       0.065490924063       0.04645132968        0.037323508808       0.014364771322 PRICE                  nan                  nan                  nan                  nan                  nan SECURITY_NAME          Alibaba Group Hol... Tencent Holdings ... Taiwan Semiconduc... Samsung Electroni... Naspers Limited C... CURRENCY_CODE          nan                  nan                  nan                  nan                  nan SEDOL                  BP41ZD1              BMMV2K8              6889106              6771720              6622691 CUSIP                  nan                  nan                  nan                  nan                  nan TICKER                 nan                  nan                  nan                  nan                  nan ISIN                   US01609W1027         KYG875721634         TW0002330008         KR7005930003         ZAE000015889 no_id                  False                False                False                False                False src_weight             0.066602394377       0.065490924063       0.04645132968        0.037323508808       0.014364771322 sedol_from_ticker      nan                  nan                  nan                  nan                  nan sedol_from_isin_pnote  nan                  nan                  nan                  nan                  nan ID_BB_COMPANY          16857643             8957976              153737               117929               153370 missing_co_id          False                False                False                False                False weight                 0.06678314130916     0.06566865466442112  0.04657739024303153  0.043024274601791715 0.014403754730508329 <object>               <object>             <object>             <object>             <object>             <object> ```"
gettodaze,"Just for my own knowledge, is this `top_level_tool.RAPC` `tlt` argument meaningful for GEIUs, or is it just a placeholder? If the latter, would it make sense to make `tlt` optional in history keys?"
gettodaze,"```suggestion             group: tp.Tuple[recipe_objects.LiveSecProductAligned, ...], ```"
gettodaze,Part of me wonders how it would be to subclass `Key`s instead of having nested keys. Does the current approach help in creating keys in some way?
gettodaze,I see there is still a `TODO` here
vhquang,"This will be done in #1336, where I can apply the change to other portfolio and can properly test it, and not feel rush to make production build."
vhquang,"I refactor `add_revenue` to return Series. The carbon is calculated in process_pre_carve, which is a correct place, but far away from where it being used. The raw CI calculation is done in process_in_carve just because of the dependency of ScoreInput.  I agree with your preference with working on Series/Frame over retrieving from table_dict. Overall I don't like using table_dict as the ""drawer"" storage, where we store data in one place and access it from another place. But our methodology uses table_dict heavily, and also there is no clear better alternative."
gdevanla,You can consider using date_util.get_timestamp_str() for this.
gdevanla,you probably need utcnow()
gdevanla,Can you please explain how this function is used? When/Where it is called? I ask since this is may not work if this is invoked across different workers depending on how this function is used.
gdevanla,Maybe this is simpler:   time.time() // (5*60)
chaburkland,"This is only called  in `disque.py:post_job_to_db`. Basically, before disque registers an incoming job as a new one, it first goes to the tool and calls this method to determine any existing jobs already meet that search criteria.  Thus, it's my understanding that this is not happening in a multi-worker context. If the scheduler determines an incoming job is a duplicate, it won't add it to the db, and thus no worker will pick it up."
gdevanla,"Thanks for the explanation. Yeah, your set up should work fine in this case. "
chaburkland,"To be clear, you no longer want to fill NaNs from the `interm_frame`?"
chaburkland,`sr = sr = `!!
vhquang,Thank you for catching this typo. :facepalm: 
vhquang,"Yes, that is correct. I update the description of the PR to clarify why we would want that. I didn't expect the PR got review so fast. But thank you very much for the responsive review!"
chaburkland,"Okay that's what I thought, but the PR's title was a tiny bit confusing to me so I wanted to double check! And you're welcome :)"
ForeverWintr,"I was afraid to remove it because I wasn't sure this would work, but now it should be removed. Thanks for catching it!"
ForeverWintr,"Thanks for taking such a close look at this! I agree, keeping those other columns is potentially confusing once the table has been reindexed to company level. I think the only columns that should be kept are (co) `weight` and `ID_BB_COMPANY`, in fact. I'll remove the rest."
ForeverWintr,"That history_key is actually used to get a distribution history, from which we get a spec, that we then use to build a GEIU key. It's convoluted!  It is important to use the `RAPC` tlt here though, because I want to use the build's spec. blend specs are different, and I'm not sure how to use them to get a geiu.  "
ForeverWintr,Thanks! I make that mistake a lot!
ForeverWintr,"I find subclassing DataClasses to be frustrating at times, as the autogenerated `__init__` introduces some requirements on the order of fields in the class. In this case I think having keys that contain other keys makes them easier to use though. For example, the `LiveKey` and it's `geiu_key` attribute are used in different places in the factory, and the `GeiuKey` alone is used as a key in a cache. If `LiveKey` subclassed `GeiuKey`, I'd have to pull only the `GeiuKey` fields out in order to check the cache."
ForeverWintr,Thanks for catching that! 
gettodaze,"Ah, I see! That makes sense now; even in blends, I remember always getting the build in order to find the GEU date."
nekobon,"Does this comment mean `base_comp` should never be None, or `url_comp == base_comp` should be always True if `base_comp` is None?"
nekobon,This change is awesome! Thank you!
nekobon,I'm curious. Do we prefer tp.Any over the string version to avoid the circular import?
nekobon,How about to name them starting with `IO` to follow the hierarchical naming convention? 
nekobon,How about to put this URL (or a part of this URL) as a module-level constant?
nekobon,Is this BASE_URL for testing?
nekobon,"Are the `output_folder` and `zipped_folder` supposed to be the same? If so, making the same name would help. If can you add a comment about how they are related?"
nekobon,TODO here
nekobon,TODO here
chaburkland,"It basically asserts that the beginning of `base_url_iter` exactly matches `url_iter`. `zip_longest` will return `None` when a shorter iterable is exhausted. ```python >>> for a, b in zip_longest(range(2), range(4)):             print(a, b)  0 0 1 1 None 2 None 3 ```  It's probably too convoluted, but it seemed the safest way to check when I first wrote this."
chaburkland,"I'm not exactly sure. I found this same pattern in the `uroborus_tool.py`, so I changed it here for consistency. I didn't actually investigate it...  https://github.com/ResearchAffiliates/invsys/blob/default/disque/core/tool_types/uroborus_tool.py#L70"
chaburkland,"If you think it's best I will change it. It just sounds so ugly to me to read `RoutineIOCPIQuery`, `RoutineIODeriveWSFUSDFundamentals`, and `RoutineIODeriveWSFLocalFundamentals`"
chaburkland,Ah yeah I forgot about this. I'll put it as a module-level constant for now. Can you think of a better place for it?
chaburkland,Good catch. I'll fix this.
chaburkland,"They're not the same. The output folder is an unzipped folder where the `io_deliverable` will be written to, so that the portal tool_type can zip and upload it to the static server. The zipped_folder is alway (outside of testing) going to be the path to the downloaded zip file from the static server."
gdevanla,Do we really want to memoize this?   My understanding is you will have to remember the `extra_salt` anytime your file changes. Is my understanding correct?
gdevanla,You can do this in one move using  `bbg_fields.iter_series(axis=1)`
gdevanla,"Do you even need this class attribute? Can't we just call this function when needed rather than build up the dict over here. The dict construction here would be eager and be created in processes even when this class is not used, but this module is imported."
gdevanla,May be throw an error here? That way we can fix this function when we see types that we are not handling. Looks like so far we are handling most of the types we care about.
gettodaze,I like these
gettodaze,What's the purpose of keeping this test commented out?
chaburkland,"I wasn't brave enough to remove it, and I couldn't skip it because it imports `statsmodels` and we don't have that in our requirements so it fails linting. I can just remove this as it's been dead code for at least 2 years now, and there's no reason to keep it around anymore."
nekobon,"How about to do this check out side, to avoid calling this per row?"
nekobon,"Please add a little more in the comment, such as ""include small due to QSR"""
brandtbucher,"@flexatone, I believe this is a bug in the old code (note that it is comparing `bs_valid.keys()` with itself, which would never fail).  I believe the intent was to compare `bs_valid` with `bs_local`, which is what I've done here. I just thought I'd ping you since this code hasn't been touched in 9 years."
nekobon,I think you meant `Dev+KR` here
brandtbucher,What are these two lines doing? Replacing a default grey background with white?  I think a comment would help here.
brandtbucher,"This doesn't need to be imported at function scope, right?  Also, please add `ansi2html.*` to the last heading in `mypy.ini`. That way it won't complain about this line."
brandtbucher,"Perhaps change the name to something like this? `str_to_html` makes me think I won't be getting a `str` back!  ```suggestion     def ansi_to_html(cls, s: str) -> str: ```"
gdevanla,Later on we should use the entries in DataGroupShortNames as keys here. That way we have only one definition.
gdevanla,Do you think we can add this as an attribute to the BEAP platform resource class in inventory. That way all API related configuration can be in one place. Something to consider.
gdevanla,"I think to be more explicit, the type of `account_type` here could be `AccountType`. That way you can pass around the enum value and unpack it to a `str` right before you call `bloomberg API`."
gdevanla,"Here is you use an enum, you can say `account_type.value` to get the`str` back"
gdevanla,You can pass `AccoutType.persec` here.
gdevanla,Can the type of `account_type` here `AccountType` rathar than a str?
ForeverWintr,"Thanks! I wasn't sure what was correct for this field actually, so I copied the single country benchmarks. I see now that they had no other region information, however, so `Dev+KR` makes sense. "
vhquang,I am curious. Which linting show for this change? My current IDE and lint config don't show anything for this.
vhquang,"Yes, I agree this is a bug. Though I am not sure if we want to keep this check. My understand is that we only care about the weight change while validating builds. Over time we add more files into the build (report, factset file, aggregate client file) that we don't care much.  Let merge this change and see how many tests will fail, and whether it worth to fix it or abandon this check."
vhquang,"Couple points I don't understand on this change, can you clarify? - Why is there an [abstract] error? It looks like all writers implement the needed abstract method. - Since this is in a loop, shouldn't the type error only happen at run time and not static checking? - If this is a mypy error, wouldn't it better in this case to leave it and tag the author to fix it, than ignore it?"
vhquang,Did pylint complain about 1-char variable in this case?
vhquang,Why would it be better to remove the typehint in this case?
vhquang,"~There are other places in our codes that I see people specifying return None. And I think the intention is to make it explicit when we add data into the table and return that data, versus not return anything. That is not consistent throughout our code.~  ~Also, I see doc from mypy that uses explicit return None. Isn't that the recommended from mypy?~  /nevermind: I didn't fully expand the function to its return statement. The type of the return `sleeve_pid` is `str`, if you don't mind update this function."
brandtbucher,The type is already annotated a few lines above. It's an error to annotate the same name more than once in the same scope.
brandtbucher,"Unannotated functions like this currently aren't checked by mypy. This PR updates `mypy.ini` with `check_untyped_defs = True`, so a few errors like these started showing up.  We were already checking for this (`name-match`) in typed functions."
brandtbucher,"Great, thanks!"
brandtbucher,```suggestion ```
brandtbucher,```suggestion     raise IndexError(f'there is no geu date on or before {date}') ```
brandtbucher,```suggestion ```
brandtbucher,```suggestion ```
brandtbucher,"Won't this raise? ```suggestion     with pytest.raises(IndexError):         data_retrieval.get_delivered_index_on_or_before_date(             attr_hist,             datetime.date(2018, 2, 11)) ```"
brandtbucher,```suggestion     def get_holdings_from_db(self) -> tp.Optional[sf.Frame]: ```
brandtbucher,"```suggestion                 f""no live holdings for:\n{self}\n{pm_key}\n"")) ```"
brandtbucher,```suggestion     dtype_mapping = dict(HoldingsLiveWriter.COLUMNS.values()) ```
brandtbucher,```suggestion ```
brandtbucher,"```suggestion     """"""latest psu dist as latest delivered"""""" ```"
brandtbucher,"```suggestion         return f""{prog_path} --date {data_date}"" ```"
brandtbucher,"```suggestion     def construct_command_line(cls, data_date: str) -> str: ```"
brandtbucher,"```suggestion     def is_data_available(cls, run_date: datetime.date) -> bool: ```"
brandtbucher,"```suggestion     def can_run(cls, run_date: str) -> bool: ```"
brandtbucher,Should this be `-1` as well?  ```suggestion         psu_dst = delivered.loc[delivered.index == year_mo].iloc[-1] ```
brandtbucher,"This branch has already passed on AgentQ, so presumably nothing is broken by this change."
johnjhawk,"No, I originally thought the same thing, but Chris convinced me that's not the case."
johnjhawk,"great, catch. I recently started raising instead of returning None. "
vhquang,"Very interesting. Thanks for explaining the answer in detail!  > Mypy checks code in loops!  So my understand was wrong. I thought code inside a loop wouldn't be reached by static checker, as I thought the same code frame is used by the loop, and static checker wouldn't know the value of that frame in each iteration until runtime. What did I got wrong in that understanding?  > We should really only use type: ignore comments when mypy has bugs that we can't easily work around. I think this is a good example of one.  Agreed! Especially after your explanation about the downcasting."
vhquang,Thanks for explaining it clearly!
vhquang,That is actually surprise to me. But the concern would be out of scope of this change.
brandtbucher,"> - Why is there an [abstract] error? It looks like all writers implement the needed abstract method.  The issue is a bit complicated. `itertools.product` is typed something like this:  ```py def product(__iter1: Iterable[_T1], __iter2: Iterable[_T2]) -> Iterator[Tuple[_T1, _T2]]: ... ```  Our arguments have type `Tuple[WSFRawWriter, WSFDerivedLocalWriter, WSFDerivedUSDWriter]` and `Tuple[Frequency, ...]`. However, to be compatible with the `product` signature, mypy downcasts them to `Iterable[_WSFWriterBase]` and `Iterable[Frequency]`. `_WSFWriterBase` is chosen because it's the best common base class that `WSFRawWriter`, `WSFDerivedLocalWriter`, and `WSFDerivedLocalWriter` can resolve to.  So, inside the loop, the type of `cls` isn't `Union[WSFRawWriter, WSFDerivedLocalWriter, WSFDerivedUSDWriter]`. It's just `_WSFWriterBase`. So mypy thinks instantiating it is an error.   > - Since this is in a loop, shouldn't the type error only happen at run time and not static checking?  Not sure what you mean by this. Mypy checks code in loops!  > - If this is a mypy error, wouldn't it better in this case to leave it and tag the author to fix it, than ignore it?  We should really only use `# type: ignore` comments when mypy has bugs that we can't easily work around. I think this is a good example of one."
brandtbucher,"> So my understand was wrong. I thought code inside a loop wouldn't be reached by static checker, as I thought the same code frame is used by the loop, and static checker wouldn't know the value of that frame in each iteration until runtime. What did I got wrong in that understanding?  Just because the code has a loop doesn't mean that mypy needs to loop over it (exactly like how mypy doesn't need to actually *call* a function to analyze it).  For example, consider this infinite loop:  ```py x = 0 while True:     x += 1 ```  Because mypy knows the *type* of `x`, it can just go over the loop body *once* and check that `+= 1` is a valid operation to perform on an `int`. Similarly, it doesn't need to actually loop to see that this code is illegal:  ```py x = 0 while True:     x += [] ```  One pass is fine."
brandtbucher,"No. Mypy sometimes has trouble distinguishing type *variables*, which are valid in code (`c = cct.Compare; x = c(...)`) from type *aliases*, which are valid in annotations (`c = cct.Compare; x: c = f()`). It has some heuristics to help it guess, and in this case it misidentified `c` an alias and complained about the subclassing below. Just inlining it fixed the ambiguity.  Hopefully [PEP 613](https://www.python.org/dev/peps/pep-0613) will help once Python 3.10 is stable!"
chaburkland,TODO
chaburkland,Wouldn't it be better to rename this SDKFieldDtype instead of commenting it out?
nekobon,"I wanted to talk with you before changing to secty code, as writer/reader pair (if both are there) needs to be updated together"
nekobon,I removed all `fields.DS_SEC_CODE` from our public interface and made all `fields.DS_SECTY_CODE`. I kept a comment here because `qad_mappings.py` is still only supporting 'ds_sec_code'.
brandtbucher,```suggestion             return cls.construct_command_line(                     data_date=sourcing_dates.data_date) ```
brandtbucher,"```suggestion def get_fill_in_co_sec_map(as_of_date: str, target_sedols: tp.Container[str]) -> pd.DataFrame: ```"
brandtbucher,```suggestion         if src_df is None: ```
brandtbucher,"```suggestion def get_mapped_carve_eav(         carve_product_ids: tp.Iterable[str], ```"
brandtbucher,"```suggestion             if isinstance(holdings_sf, sf.Frame) and holdings_sf.size: ```"
brandtbucher,"This is probably more idiomatic as:  ```suggestion         date_str = report_date.strftime(""%Y%m%d"") ```  Or, even better:  ```suggestion         date_str = f'{report_date:%Y%m%d}' ```"
brandtbucher,```suggestion         frame_recipe = recipe_objects.FrameRecipe(fr_weights_model) ```
brandtbucher,```suggestion         weights_model = ff.frame_from_recipe(frame_recipe) ```
brandtbucher,```suggestion         weights_model_frames.append(weights_model) ```
brandtbucher,"I find this form a bit more readable:  ```suggestion     weights_model_f = weights_model_f.relabel(columns=""{}_model"".format) ```"
brandtbucher,"Here too?  ```suggestion         columns=""{}_live"".format, ```"
brandtbucher,"```suggestion             [""--date"", date] ```"
brandtbucher,"```suggestion     geiu_sec = geiu_sec.relabel(columns=""{}_geiu_sec"".format) ```"
brandtbucher,"```suggestion     geiu_co = geiu_co.relabel(columns=""{}_geiu_co"".format) ```"
brandtbucher,"```suggestion     """"""cleanup and rename columns INPLACE."""""" ```"
brandtbucher,```suggestion     column_reorder = [ ```
brandtbucher,```suggestion     security_level = security_level[column_reorder] ```
brandtbucher,Maybe move this (and `column_name_map`) to module-level constants?
brandtbucher,"```suggestion     """"""create summary tab for daily holdings report"""""" ```"
brandtbucher,"```suggestion     """"""main function to create the daily holdings report"""""" ```"
brandtbucher,"This avoids two intermediate sets:  ```suggestion     cp_ids_all = {*cp_ids_live, *cp_ids_model} ```"
brandtbucher,"```suggestion     psur_co_f = psur_co_f.relabel(columns=""{}_psur"".format) ```"
brandtbucher,"```suggestion     date_str = f""{report_date:%Y%m%d}"" ```"
brandtbucher,Module-level constants?
brandtbucher,"```suggestion         c += ""_geiu_co"" ```"
brandtbucher,```suggestion def write_to_static_server(temp_file: str) -> str: ```
brandtbucher,"I sort of like this as one string.  ```suggestion     root_path = f""daily_holdings_report_{date}_{datetime.date.today():%Y%m%d}"" ```"
brandtbucher,```suggestion     weight_alert: sf.Frame) -> None: ```
brandtbucher,```suggestion     if missing_live_holdings.size: ```
brandtbucher,"```suggestion     return security_level.loc[         security_level[""weight_change""] > weight_change_threshold     ][display_columns] ```"
brandtbucher,"```suggestion                 f""Program was run in debug mode. Nothing was posted to static. Nor were any result notification emails sent.\nThe file was created here:\n{self.tmp_output_fp}"" ```"
brandtbucher,"```suggestion         help=""Don't push to static nor email."", ```"
brandtbucher,"This was hard for me to follow (and a comment was incorrect), so I took a stab at cleaning it up:  ```suggestion     if not weight_alert.size and not missing_live_holdings.size:         # no weight alert and no missing         msg = f""{msg}\nNo companies violate the {weight_change_threshold}x weight change threshold.""     elif not weight_alert.size and missing_live_holdings.size:         # no weight alert and missing         msg = f""{msg} {mlh}:\n{req_mlh.to_html()}""         subject = f""{mlh} {subject}""     elif weight_alert.size and not missing_live_holdings.size:         # weight alert and no missing         msg = f""{msg} {wca}:\n{weight_alert.to_html()}""         subject = f""{wca} {subject}""     elif weight_alert.size and missing_live_holdings.size:         # weight alert and missing         msg = f""{msg} {wca}:\n{weight_alert.to_html()}""         msg = f""{msg} {mlh}:\n{req_mlh.to_html()}""         subject = f""{wca} and {mlh} {subject}""     else:         assert False ```"
brandtbucher,"If you import `StaticServer` from inventory, you don't need to hardcode the machine name:  ```suggestion     upload_to_static(         server_root=server_root,         destination_folder=destination_folder,         source_fp=temp_file,         cleanup=True,         preserve_timestamps=True,         log=False,     )      return (         f""{StaticServer.get_url(host_only=True)}/{server_root}/{destination_folder}/{temp_file.split('/')[-1]}""     ) ```  Although I'm *pretty sure* that `upload_to_static` returns the upload location... so you *may* just want to try:  ```suggestion     return upload_to_static(         server_root=server_root,         destination_folder=destination_folder,         source_fp=temp_file,         cleanup=True,         preserve_timestamps=True,         log=False,     ) ```"
brandtbucher,"If you set the default value of `suffix` to `""""`, you can just do:   ```suggestion      name = f""{root_path}.xlsx"" ```"
vhquang,Got it. Thank you Brandt for the explanation and the example!
johnjhawk,"just removing the unneeded ==0 allows black to not wrap in parenthesis and put on a seperate line, that help for readability.  Thanks. "
johnjhawk,"I think so, it then gets them out of the processing code and make it easier to follow.  Thanks."
ForeverWintr,"Are you sleeping for `.2` seconds just so that the timestamp you get from time.time is `.2` seconds later? Why not just do `time.time() + 0.2`? You could also mock `time.time()`, but perhaps that's overkill. "
ForeverWintr,I think testing your understanding of time may be outside of the scope of a unittest. :). What if you just assert that the rounded timestamp is written to `attributes`?
chaburkland,"Yeah I'm sleeping just to guarantee that `time.time()` gives a different value. I know that it's excessive, but I like it. +0.2 would be better to avoid unnecessary sleeping though! And yeah, I didn't want to mock time "
chaburkland,I'm not exactly sure what you mean..
ForeverWintr,I think avoiding unnecessary sleeping is valuable. Consider that this probably increases the runtime of this test by a large factor (especially since you sleep twice). 
ForeverWintr,I was being glib. But what are you testing here? I think all that you need to test is that a timestamp is added to the attributes.   It seems like this test is also testing that `time.time()` divided by a constant does what you expect. I think that's unnecessary. 
chaburkland,I guess I'm trying to prove that the timestamp added `attributes` is rounded by a given interval. It's probably overly complicated though. I'll simplify it.
gdevanla,"alternatively, sometime having this code in this style is readable. But, I leave it to you in this case:  ``` if field_type in ('Real', 'Price, 'Integer/Real'):      ....  ```"
gdevanla,What happens if `field_type` does not match any of these types? Do we silently not populate those values? 
gettodaze,"Just curious, what is this used for?"
gettodaze,"Should we add the ""add companies screening"" comment here?"
gettodaze,Comment from here
gettodaze,```suggestion     ):         '''Add D and G score base on ISS data.'''         all_row = lambda _: True ```
gettodaze,```suggestion     ):         '''Add screening columns for passing criteria screens on ISS data.'''         self._add_to_table( ```
gettodaze,```suggestion         '''Add screening columns for passing criteria screens on Vigeo data.''' ```
vhquang,"This is for lazy type annotation (https://www.python.org/dev/peps/pep-0563/). Since all the class that I used for typehint is under `tp.TYPE_CHECK`, that import only works with type checker but not regular python execution. For regular execution, it needs to be `foo: 'Foo'` instead of `foo: Foo` (ie: need the `'` to avoid being evaluated)  On python 3.9, lazy evaluation for type is implemented as default behavior and we don't need to import `annotations` anymore. But we are still on 3.8, and I want to use this feature because it is nice."
vhquang,"Typehint for the mapping would be helpful here, especially as you already define `FactsetUploadConfig`."
vhquang,"I feel weird about the passage of setting `None` in `_get_client_directory` then checking `isna` here, especially as it goes through multiple functions in between.  An suggestion I could think of, is may be setting a constant `NO_DIRECTORY = None`, and used that constant in both places to make the passage clear. But I don't know if that is over-engineer or not. I will defer the preference to you."
vhquang,"I _think_ you intend to have `,` at the end. ```suggestion                     use_new_client_folder=use_new_client_folder, ```"
vhquang,"```suggestion                         use_new_client_folder=use_new_client_folder, ```"
vhquang,"```suggestion                 use_new_client_folder=True, ```"
vhquang,"I think it is better to have default value as `''` along with NOT NULL, so that we remove the ambiguity between NULL and empty string. (you would have to update `_get_client_directory` and `_prepare_tables` as well, but that won't increase the complexity we are already doing).  ``` ALTER TABLE portfolio_map ADD COLUMN factset_holdings_client_folder NOT NULL DEFAULT ''; ```"
vhquang,"Is `VendorName, Dataset, is_pro_forma` refer to the key in the dict? https://github.com/ResearchAffiliates/invsys/pull/1368/files#diff-9b8f8a38e91e379231059fac71c5e4ab692a7b7e1b1b6ac7158a98f4b728a3a3L156 If so it seems to be outdated. (not have `is_pro_forma` anymore)"
gdevanla,Umm. I don't understand. We usually use NULL at the database level to signify it is not set yet. Why do you think setting '' would be consistent with how we handle such scenarios in other places.
vhquang,"I though of that base on 2 considerations: - Is this a value that we will be using as folder for client files, and empty string wouldn't be a valid value? - I think ""no value"" of string type is better as empty string than NULL. If you prefer to have NULL as default value, then I think we should have a constraint to not allow '' while updating database. It is to make it clear and consistent which null value we are expecting."
gdevanla,"Hi @vhquang , This link does not seem to work. I am guessing you were referring to the comment in the file. I have updated that, if that is the case."
gdevanla,"yeah, this is transitioning code. I would not need that once we transition over. Therefore, I will leave it as is. Your point is valid though and I would consider it in other places where the code would be permanent."
gdevanla,"`NULL` for me means the value was not set by the user.  Any other value provided by the user would mean the user has determined that a 'base folder` path set up in the column is valid. Now, of course that would mean the user could set up an empty string.  But, even a non-empty string may not be a valid value. We don't enforce existence of this folder for any value. So, I don't see a reason why we will have to validate ''. Setting a constraint to hold a non-empty string does not give us any guarantee's of existence of folder correct?  "
gdevanla,"I do understand that you want to enforce only proper values in this column. But, that is not possible even with non-empty strings. I do agree with your concern."
vhquang,"> `NULL` for me means the value was not set by the user.  I would think more broadly that a default value is the value not set by the user. There are two conventions of having that default values: `NULL` or `''`. We can pick either of those conventions, but preferably not both. The con of using `''` will not differentiate when that value is set, but I think in our case I think that distinction is not meaningful for us. If it indeed is, than I think having `NULL` is more preferable.  > Setting a constraint to hold a non-empty string does not give us any guarantee's of existence of folder correct?  I think there are 2 separated concerns: valid values and incorrect values. From what I understand so far, it is not feasible to check for correctness. But having constraint of using either `NULL` or `''` will reduce the domain invalid values, and that would help us in querying valid values (ie: we will not need to check both NOT NULL and `!= ''` to find valid data)"
vhquang,"ah I see. I agree. If this is transition code, let not over-engineer it."
gdevanla,@vhquang I see your point with respect to what values I am checking in the code and it make sense to set to '' and not allow NULL. Thanks for noticing that. I will fix that!
vhquang,"I was trying to convince you on the benefit of restricting values. But you are more familiar and have more visibility on how it is used. Please feel free to make a decision on its benefit/cost to implement, and how you see fit."
gdevanla,"Your point was valid. So, I am happy with the decision :)"
nekobon,I'm curious; What is this short name used for? `yldcrv` looks mysterious!
nekobon,Would we want to return None for `str` and an empty string for non-`str`?
nekobon,"Would it want to raise here with `else`, when `field_to_dtype[d]` is not datetime nor float?"
nekobon,I prefer to keep `CURRENCY` instead of `CRNCY` but is it perhaps required by some other process?
nekobon,Is this the same as `attrs.iloc[0]`?
nekobon,missing type hints
nekobon,How about symbolic constants for these strings?
nekobon,Would we want to use static server for this? 
nekobon,"Same here, is it the same as `attrs.iloc[0]`"
nekobon,Would this path depend on where this module is called from?
gdevanla,"yeah, this is how we have declared in bloomberg. I will check with Alan to see if we can change it. thanks for reminding me!"
gdevanla,"Yes, I have addressed this changes in another PR which I am merging now."
gdevanla,Ha Ha! That field is from `Bloomberg`. 
gdevanla,That's right. I did not realize iloc[0] returns a series!
gdevanla,"This file was very big and we needed this for iteration. Initially, I wanted to add this to the code base, but given its size I decide to just use the `test` folder as a staging area. "
gdevanla,"Yes, I think I will use .iloc[0] from now on!"
gdevanla,"I don't think so. Also, function is programmatically called from airflow dag."
gdevanla,"These are constants from Bloomberg file. Therefore, I have not used symbolic constants for these."
gdevanla,Would it be more efficient to just build the list and create a `str` in the end.
gdevanla,Nice!
chaburkland,Oh! Today I learned/remembered that `''.join(...)` is faster than string concatenation. Yeah I'll put it back.
johnjhawk,can we add a docstring to this abstract method?  
johnjhawk,can we add a docstring to this abstract method?  
johnjhawk,I think that an f string here would be slightly more readable. 
johnjhawk,I like the new names for these decorators.
johnjhawk,"```suggestion             'grafi-dev+kr_lm': None, # TEMP value ( Still need to determine the correct live holdings class)             'grafi-emxkr_lm': None, # TEMP value (still need to determine the correct live holdings class) ```"
johnjhawk,"```suggestion             'grafi-dev+kr_lm': None, # TEMP value (Still need to setup the MOCK_DELIVERABLES dict)             'grafi-emxkr_lm': None, # TEMP value (Still need to setup the MOCK_DELIVERABLES dict) ```"
johnjhawk,Are these temp? Don't we already know earliest deliverable?  If not could we add why they're temp?
johnjhawk,"```suggestion             'grafi-dev+kr_lm': '20210831', # TEMP value (determine first month end that live holdings are to be used in blend)             'grafi-emxkr_lm': '20210831', # TEMP value (determine first month end that live holdings are to be used in blend) ```"
flexatone,hahaha
ForeverWintr,"  I think this only shows up in the diff because of black, but I wonder why this isn't just:  ```python for c in (f for f in GEIU_CO_REQ_FIELDS if f not in [""ID_BB_UNIQUE"", ""sec_primary""]):     ... ```  or  ```python for c in GEIU_CO_REQ_FIELDS:     if c in [""ID_BB_UNIQUE"", ""sec_primary""]:         continue     ... ```"
ForeverWintr,Note.
johnjhawk,that's a good point.  when it was originally written it was doing some more complicated stuff but now the filter method is overkill.  I used option number 2. 
johnjhawk,I know!
brandtbucher,"I sort of dislike this kind of `klass` spelling. It's not a big deal, but perhaps this instead?  ```suggestion     cls.CLI_NAME: cls for cls in ( ```"
brandtbucher,"Here too:  ```suggestion         Class: tp.Type[_FactsetReportWriter] = REPORT_TO_CLASS[cli_name]         f = Class(options.as_of_date, options.upload) ```"
brandtbucher,I think what you want here is `operator.itemgetter`. See my suggestions below.  ```suggestion ```
brandtbucher,"```suggestion         'Date': itemgetter(ISS_Issuers.AsOfDate),         'Symbol': itemgetter(ISS_Issuers.ISIN),         'SEDOL': itemgetter(ISS_Issuers.SEDOL), ```"
brandtbucher,"```suggestion         'CF_Scope_1_and_2': itemgetter(ISS_ClimateImpact.ClimateTotalEmissions),         IRF.CarbonRiskRating: itemgetter(ISS_ClimateImpact.CarbonRiskRating),         IRF.ClimateScope1Emissions: itemgetter(ISS_ClimateImpact.ClimateScope1Emissions),         IRF.ClimateScope2Emissions: itemgetter(ISS_ClimateImpact.ClimateScope2Emissions),         IRF.ClimateScope3Emissions: itemgetter(ISS_ClimateImpact.ClimateScope3Emissions), ```"
brandtbucher,"```suggestion         # 'Reserves_Intensity': itemgetter('Climate PotentialFFREmissions'), ```"
brandtbucher,"```suggestion         'ESG_Score': itemgetter(ISS_Ratings.ESGRatingOverallNumeric), ```"
brandtbucher,"```suggestion         'Environment_ESG': itemgetter(ISS_Ratings.EnvRatingNumeric),         'Social_ESG': itemgetter(ISS_Ratings.SocRatingNumeric),         'Governance_ESG': itemgetter(ISS_Ratings.GovRatingNumeric),         IRF.ESGRatingDecileRank: itemgetter(ISS_Ratings.ESGRatingDecileRank), ```"
brandtbucher,"I don't think you need this. `Namespace` gives you iteration for free, so you can just do `tuple(ISSReportField)`!  ```suggestion ```"
brandtbucher,```suggestion         fields = PREV_FIELDS + tuple(ISSReportField) ```
vhquang,I don't have preference on variable naming neither. The reason I change it is that it looks like what we use for classmethod. Using the original name it had is no problem.
vhquang,This is a great suggestion. Thanks Brandt!
gettodaze,Haha nice!
gettodaze,"```suggestion     ) -> tp.Tuple[tp.List[str], tp.Optional[int]]: ```"
gettodaze,"How about a kwarg of `debug` or `verbose` instead of `use_logging`?   There are two overlapping notions of logging here that get confusing. I first noticed it here: ```python3 RALib/test/unit_test/test_monitored_sequence_fpn.py:524  logs, ret_code = ms.popen_returncode(command, use_logging=True) ``` Reading the function, I was getting confused why the it wasn't `logging` the `logs` even though `use_logging` was `True`, and also then I realized that the `logs` are actually being returned, and `use_logging` just uses the python logging module for the `popen` output.  `use_logging` is also fine though, especially once I know what is actually doing. Maybe just a docstring to explain that."
gettodaze,"Oh but also, I really like this refactoring! I think it reads a lot more nicely."
gettodaze,"I like this, assigning the mock path to a shorter variable!"
gettodaze,How are these changes related to the QCUT?
gettodaze,What is this doing?
gettodaze,"Oh wow, I didn't realize black can be used within python as well!"
gettodaze,Nice!
gettodaze,Nice `.T.to_string()` for a readable test.
gettodaze,Good catch!
gettodaze,"`join_str` and `str_join` are very similar, so how about `sep`? ```suggestion def str_join(s: sf.Series, sep: str=',') -> str:     return join_str.join(s.values) ```"
gettodaze,"I think something like this might be more parallel to the logic of the code ```suggestion         # Relevant securities to check are only from the companies from live that are also in the new model.         sec_relevant_live = live.loc[live[self.co_id_field_anchor].isin(model_sedols.index)] ``` Also, why is the frame called `sec_relevant_live`? Isn't it indexed by `ID_BB_UNIQUE`?"
gettodaze,"Are `company id` and `ID_BB_UNIQUE` used interchangeably? If not, what is the `company id`?"
gettodaze,```suggestion          # live ID_BB_UNIQUE:sedol == model ID_BB_UNIQUE:sedol         sec_matching = sec_relevant_live[self.holdings_sedol_label] == sec_relevant_model_sedol ```
gettodaze,"```suggestion         GeiuCo = functools.partial(recipe_objects.GEIUProductAligned, ```"
gettodaze,```suggestion         geiu_columns = [GeiuCo(column_name=c) for c in cls.geiu_info_cols] ```
gettodaze,"I really like using the partials to cut down on repeated arguments, as well as explain what is happening!"
gettodaze,"Ah, I got it! I was thinking of `ID_BB_COMPANY`. Please ignore all my comments about `sec` vs `co`, haha."
gettodaze,"I know this is longer, but just a suggestion. ```suggestion     def get_failures(self, live: sf.Frame, model_primary_sedols: sf.Series) -> sf.Frame: ```"
vhquang,```suggestion     @constant  # Lazily defer the db query. ```
nekobon,Is there any relation between this and `adjust_high_impact...` function? The name looks similar. Maybe a docstring here would help.
vhquang,Yes there is. This function sets a True/False mask that `adjust_high_impact` will use to adjust weight. I will add docstring for it.
nekobon,:+1: 
nekobon,Thank you for adding this! Is this `np.int_` different from `np.int64`?
nekobon,"Do we want to remove all the duplicated companies? For example, if we have A, A, B, C, would it be B, C?"
nekobon,Maybe `Series.loc_min` can help here https://static-frame.readthedocs.io/en/latest/api_detail/series.html#api-sig-series-loc-min
ForeverWintr,I think this is good feedback! Too bad the code ended up not being part of my review!
ForeverWintr,Me neither! :open_mouth: 
ForeverWintr,Haha! I didn't realize I'd done that. Thanks for the suggestion!
chaburkland,"It's platform specific. But for all of our machines it should ultimately be `np.int64`. It's better to be more explicit here, so I'll make it `np.int64`."
chaburkland,"Black made this pretty hard to read, so I think I might decompose it a bit more to make it more readable.  It's removing any companies that are exactly duplicated on rank & start_date. This is because those records are completely ambiguous, and there is no way to determine which mapping is correct. So we drop them.  Here's an example: ```python <Frame> <Index> ws_perm_id_co gvkey    rank     date_start date_end   <<U13> <Index> 5787    C840O0650     013353   1        1960-01-01 2079-06-06 5788    C840O0650     011550   1        1960-01-01 2079-06-06 42892   C840EQ800     163591   1        2005-03-22 2079-06-06 43247   C840EQ800     185607   1        2005-03-22 2079-06-06 82535   C84045B00     005054   1        1960-01-01 2079-06-06 82536   C84045B00     166789   1        1960-01-01 2079-06-06 <int64> <object>      <object> <object> <object>   <object> ```  These three companies will be dropped."
nekobon,That makes sense!
gdevanla,Is it possible to just do `[c[-1] for c in df.columns]`.  May be I am not thinking of some other scenario here?
gdevanla,"You need a ""nan"" here too? Curious!"
gdevanla,I may be wrong. Do you need `==` here?
gdevanla,"Can we be more specific and check for `==2`? or may be it does not matter, here?"
nekobon,Return field_carbon_denom here
nekobon,outside loop?
nekobon,Please confirm with Ted
nekobon,Apply carve min weight here
nekobon,you can remove this
gettodaze,"You could also try `os.path.splitext(file_name)`, it's a bit more robust: >  os.path.splitext(path)   Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period. Leading periods on the basename are ignored; splitext('.cshrc') returns ('.cshrc', '')."
gettodaze,This is really cool! I never knew context managers could be used with responses! I see they recommend using it when `stream=True`.
johnjhawk,"```suggestion         pdif = 0 if equal_weight_spin else spin_add_pdif.get(co_id, len(tranches))   ``` if you're into ternaries, should be equivalent. "
gdevanla,This is part 2 of the 2 changes in this module.
gdevanla,Part 1 of 2 parts of changes in this module.
flexatone,I like ternaries!
gdevanla,Only non-blackened change
ForeverWintr,When should this todo get done?
vhquang,"It comes from Ted's request after we talked about validation. It makes it easier for him to QC if he has it in the summary file. However, he can also calculate it from the weight and the CarbonFootprint column.   I will wait to see if he ask for it again. Or if we see a benefit in implementing a ""post_process_carve"" callback. If neither happens, I may remove this TODO."
ForeverWintr,Perhaps you could update the note to that effect? 
flexatone,I always use the `days` keyword in timedelta; obviously not necessary but possibly more readable. ```suggestion         start_date = data_date - datetime.timedelta(days=7) ```
flexatone,"No symbolic constants for ""level_price"" and ""level_total""? I suspect you use them all over..."
flexatone,"Do callers really need a list here, or can you return a tuple of one tuple?"
flexatone,We have enums for all FX ISO codes if you want to use them here.
gdevanla,"We already have `get_end_of_month` function.  Can you consider using it?    ``` get_end_of_month(d.year, d.month -1 ) ```"
gdevanla,I think mostly it is `datetime.date`. There could be some old instances where you might have seen `PrettyDate`. Can you point me to code that still uses PrettyDate for this?
gdevanla,Thanks for cleaning up this module by adding type hints.
gdevanla,"yes, always a `str`."
gettodaze,"Oh sure, I've changed the function to be: ```python3 def get_previous_eom(d: datetime.date) -> datetime.date:     if d.month == 1:         return get_end_of_month(d.year - 1, 12)     return get_end_of_month(d.year, d.month - 1) ```"
gettodaze,"All I know is that my test produces a pretty date: ``` def test_can_run_a(self):     run_date = datetime.date(2021, 6, 14)     can_run, sourcing_dates = DPT.can_run(run_date=run_date)     self.assertTrue(can_run) ``` ``` imcron/test/unit_test/test_performance_report_task.py(26)test_can_run_a() -> self.assertTrue(can_run) (Pdb) pp sourcing_dates SourcingDates(data_date=2021-06-11, run_date=datetime.date(2021, 6, 14), params_used=datetime.date(2021, 6, 14)) (Pdb) pp sourcing_dates.data_date 2021-06-11 (Pdb) pp type(sourcing_dates.data_date) <class 'ISLib.date_util.PrettyDate'> ``` But because `PrettyDate` subclasses `date`, I can change the typehint and leave a note that this includes PrettyDate"
gettodaze,"Maybe my question was confusing. `data_date` should always be a `datetime.date` because I pass in a `datetime.date` here, right? ```python3     @classmethod     def get_command_line_construction_func(         cls, debug_mode: bool = True     ) -> tp.Callable[[SourcingDates], str]:         # NOTE: debug_mode not currently implemented here         def command_line_func(sourcing_dates: SourcingDates) -> str: >>>         return cls.construct_command_line(data_date=sourcing_dates.data_date)          return command_line_func ```"
gdevanla,Is there a reason we are doing a group_by on `all` the columns in the frame. Would it be better to just use `group.iter_series(axis=1)`?
gdevanla,Will you be getting rid of this TODO before merging?
gdevanla,This too.
gdevanla,Do you still need this?
gdevanla,Sure.  Will use it.
vhquang,"Very minor suggestion, but if you name the statement `insert_returns_attrs` it will be clearer what we are executing."
vhquang,"I think you should re-raise here, so that the insert gets rollback. Otherwise this error will be silent, and we could hang in a bad state."
vhquang,"With multiple update statements, I think you should put them under the same transaction: https://docs.sqlalchemy.org/en/13/core/connections.html#using-transactions so that if any of them fail, everything is rolled back. I think we don't want to stuck in a middle of some statements already succeed and some fail.  Separately, I think the previous operation (L419-L423) and this should be in the same transaction, so that the data is consistent with the history. ie: we won't end up successfully insert the return but fail to insert the return history."
vhquang,"I am curious. You already have the model defined in SQLAlchemy, which is the heavy weight upfront cost, why not utilize that model to generate SQL statement?"
vhquang,"Do we need to use `sa.Enum`? Setting values constraint in this dynamic way, I think will not be picked up by alembic script generator, so we will need to manually create constraint on the database. I also don't see we set constraint in the database in the migration script. So, we only benefit on the SQL generation of SQLAlchemy. But I also don't see we are using SQL generation.   I am quite confused on the setup and the benefit of using `sa.Enum`. Maybe I am missing context. Can you elaborate more on what we are trying to get?"
vhquang,"I see `ReturnsAttrs.id` is defined as foreign key, so you wouldn't need to provide the key for the join-clause. But if you want to be explicitly, I think that wouldn't hurt. I think `cls.attr_id` is clearer than `ReturnsHistory.attr_id`."
vhquang,"I don't feel strongly about this, and feel free to skip this suggestion, but since `klass` is expected to be a Class object, would it better to name it `Klass`?"
vhquang,"I would prefer `test_db_session`, to make it a clearer distinction from `db_session` which we also use it in non-unittest code."
vhquang,"Minor suggestion: I think if you assign a constant for `history[0].quote_value` and `history[1].quote_value`, it will easier to spot the testing purpose. I misread the decimal value on my first read, and was confused on the assertment."
vhquang,"I am curious, in which case do we expect to remove previous? Would it be better to keep the history immutable?"
vhquang,"```suggestion             if not prev_history:                 db_session.add(history)             elif not np.isclose(                 prev_history.quote_value, history.quote_value             ):                 # end date prev history                 prev_history.effective_dates = DateRange(                     prev_history.effective_dates.lower, history.effective_dates.lower                 )                 db_session.add(history) ```"
vhquang,"I think it is better and safer to do a rollback, to prevent stuck on limbo state, and also to buble up the error: (I don't know yet which specific exception to catch in this usage) ```suggestion         try:             db_session.commit()         except:             db_session.rollback()             raise ```"
vhquang,"Assuming it is not really important about the error message, you can also use `one_or_none`: https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Result.one_or_none  ```suggestion         )                         return prev_history.one_or_none() ```"
vhquang,"I need to iterate on the unique combined values of those columns. There are 3 sets of columns `['region', 'sector']`, `['market', 'sector']`, `['universe', 'sector']` (the last one can be simplied as just `['sector']`). Originally, I pass in the whole frame and do the column selection in this function. But then I think it is better to let the parent function, who creates the frame, to also define the selection. That way this function operates solely on logic, and independent how of the parent function names those columns."
vhquang,"I would need to address this in separate PR. Currently I don't know how to do it.  The problem, is that we are using this plugin across 2 different products: `rmc` and `grafic` (which are the derive of Multi and `grafi`). So, it is weird, to use `rm` constant also for `grafic`. But it works, because those constants are conventionally the same: ``` methodology.rm_base.CG_FIELD = 'country_group' methodology.grafic.CG_FIELD = 'country_group' ``` But it is fragile, because there is no logic to constraint it, just conventionally naming. I will need to talk with Yu and John to see what they think for refactoring that. I would like to leave it as remainder for us (for me mostly)."
gdevanla,We expect this to fail and we want to keep moving. But your comment highlighted a problem with the code. I will add separate block for insert_return_attrs.
gdevanla,Good point! I will add the transaction block. I kept the previous block separate because I want to just delete the previous block after a short period (couple of weeks) of parallel testing.   This script is run manually by me once in a while and I usually have to verify data after every step is run.   Good point on the transaction per table thought. I will fix that.
gdevanla,"Actually, I take it back. For now, I will run everything in one transaction. Thanks for identifying that!"
gdevanla,"This is a one off script, and this script was defined and is being used for a while. I did not want to change this. Hopefully, soon this script can be deprecated!"
gdevanla,"Sure. I don't plan on using the alembic script generator for any data migration. I have retained almebic scripts to be pure sql statements thus embracing duplication of code at that level.  Here defining enums, just helps switch to Python Enum objects when reading varchar from database, and also translating them back to varchar when writing back to the database. I do not plan on using Enums at the database level as well, since we know that really complicates transformation between these 2 layers. But, having Enums at this level still gives us constraints and failures if we put in wrong data and later try to read it.  We can chat more on this if you have specific questions."
gdevanla,Good point! Will change.
gdevanla,Yes! That is the whole point of this PR.  This code block will go away and be replaced with just the new code. For now I have both functionality in 2 different set of tables!
gdevanla,"Nice! Thanks, I knew there was a cleaner way to do ti. "
gdevanla,Good point! I add that block outside this function.
nekobon,Please make sure that Ted or Robert know we're not applying company weight overrides.
vhquang,Ted knows. I talked with him this morning. He also added that we should aim to have that ability. And I told him we would need sometime to prepare and implement it.
nekobon,"Sounds good. When you have some time, this can be done in an hour or so, assuming there is no surprise. Feel free to set a meeting with me or John and we can go over. "
chaburkland,@nekobon Do you know where we should put this file? There isn't a symbology static dir currently.
chaburkland,"@nekobon Specifying string length is essential to manage memory constraints. Do you have reservations about this? Right now, `10` and `14` are max length of any string in those respective columns, although it's within the realm of possibility that later a new value will be added that exceeds those limits, and will be truncated.  My thought is, if that happens, we can always increase the size."
nekobon,I would put it in QAD. It only has FX now but I'm adding Market Holidays there as well.
nekobon,Interesting! Was this the reason of 64G+ RAM? I would ask Forrest and Xi. They might be able to figure out the hard limit in QAI/Symbology documents.
nekobon,I would call it `SYMBOLOGY_SECURITY` as a similar file from compustat is simply `SECURITY` in compustat folder.
nekobon,Interesting error!
chaburkland,"Per the documentation it's capped at 80 characters... which would create an even bigger memory issue!  And yeah, this is to deal with 64+ GB issue that arises when just using `sf.Frame.from_sql`."
chaburkland,Do you mean qai? I don't see a QAD directory
nekobon,"Yes, sorry I meant QAI."
nekobon,Interesting! This limit looks good for now. Please mention it in the next meeting.
chaburkland,"Yeah! Because I'm multiprocessing each column as a unique sql query, it's possible that they queries do not match in size."
vhquang,"@nekobon I am working this TODO, to not passing in `carve_spec`,  but `carve_min_weight` and `carve_max_weight`. It was suggested in one of our review.  The problem is we don't have uniformity of the `carve_spec`. RMC and LAE need `carve_min_weight` and `carve_max_weight`, but EMC doesn't use it.Updating this `process_in_carve` interface will require EMC to have a made up value (`carve_max_weight: 1.0`), just to satisfy the code interface and not because we use that in the calculation.   I incline to keep passing in `carve_spec`, to let each portfolio's spec and its `process_in_carve` define what they need and how to use it, rather than tighten the interface at the cost of putting make up value in the spec. What do you think on this?"
vhquang,I will move this change into #1468 for separate discussion.
gdevanla,I feel like the index value gives the context. I would like to leave it like that instead of trying to name it.
flexatone,"```suggestion     def _get_base_salt() -> tp.Tuple[str, str]: ```"
flexatone,"```suggestion     def _get_validation_keys(*, reference_fp: tp.Optional[str]) -> tp.Dict[str, str]: ```"
flexatone,"We can try specify the inputs and outputs with  ```python tp.Callable[[argType, argType], returnType] ```"
flexatone,Same here with `tp.Callable`
flexatone,"I do not think that `np.vstack` and `np.columns_stack` are types; in general, you want to use `np.ndarray` for all arrays of all dimensionalities and types. Maybe you just mean that there is one or more arrays. ```suggestion     ) -> tp.Tuple[np.ndarray, ...]: ```"
flexatone,"As above, we should use `np.ndarray`."
flexatone,`tp.Dict` might be better than using `OrderedDict` here...
flexatone,"Same here, we can use `tp.Dict[]`"
flexatone,"```suggestion     def _update_Mi_and_bbar(         # self, *, Minv, bbar, j, idx_fa, X, M, action         self,         *,         Minv: np.ndarray,         bbar: np.ndarray,         j: int,         idx_fa: np.ndarray,         X: np.ndarray,         M: np.ndarray,         action: str,     ) -> AdjustedArgs: ``` We might define `AdjustedArgs` outside this function so we can use it as a return type."
flexatone,"Can you use `tp.List[]` and include the contained type, instead of just `list`?"
flexatone,"```suggestion         target: np.ndarray, ```"
flexatone,"As before, see if you can specify key/value types with `tp.Dict` and input/output args with `tp.Callable`"
flexatone,Can we include key/value types of `tp.Mapping`?
flexatone,"If possible, try to specify contained types within lists/tuples with `tp.List` and `tp.Tuple`."
flexatone,"If possible, try to specify contained types within tuples with `tp.Tuple`."
flexatone,"If possible, try to specify contained types within tuples with `tp.Tuple`."
flexatone,"Maybe? ```suggestion def df_to_hashable(df: tp.Union[pd.DataFrame, pd.Series]) -> tp.Tuple[tp.Tuple[str, tp.Any]]: ```"
flexatone,"If possible, try to specify contained types within tuples with `tp.Tuple`."
flexatone,"If possible, try to specify contained types within `tp.Mapping` and `tp.Callable`."
flexatone,`tp.Set[]` can also define contained types.
flexatone,Something like this... not sure what is in the return tuple...  ```suggestion def df_iterable_to_hashable(iterable: tp.Iterable[pd.DataFrame]) -> tp.Tuple[str]: ```
flexatone,types within `tp.Iterable` and `tp.Callable`.
flexatone,contained type within `tp.Iterable`...
flexatone,args for `tp.Callable`
flexatone,types within `tp.Callable`?
flexatone,Types within `tp.Iterable`?
flexatone,types for `tp.Iterable`
flexatone,types for `tp.Iterable`?
flexatone,types for `tp.Mapping`?
flexatone,types for `tp.Callable`?
flexatone,types within `tp.Callable`?
flexatone,These and others might be better as `frozenset`
MadisonAster,"changed this to  `-> tp.Callable[[tp.Hashable], tp.Any]:`"
MadisonAster,"```         it0: tp.Iterable[tp.SupportsFloat],         it1: tp.Iterable[tp.SupportsFloat], ```"
MadisonAster,"` d0: tp.Mapping[tp.Hashable, tp.Any], d1: tp.Mapping[tp.Hashable, tp.Any]`"
MadisonAster,"`worksheet_skip_cond: tp.Callable[[str], bool] = None,`"
MadisonAster,"Changed this function to use a TypeVar per suggestions from Brandt:  ``` T = tp.TypeVar(""T"", bound=tp.Callable[..., tp.Any]) def time_cache(time_to_live: float) -> T: ...     def decorator(func: T) -> T:     ... ```"
MadisonAster,"Using the same pattern as cache.py here: ``` T = tp.TypeVar(""T"", bound=tp.Callable[..., tp.Any]) def throttle(max_per_minute: int) -> T: ...     def decorator(func: T) -> T:     ... ``` "
MadisonAster,"Updated these to use frozenset. Thanks for pointing this out again, you brought it up previously, but I didn't quite register the significance of this at first."
vhquang,Is this suggestion still applicable?
vhquang,"Sounds good. I would like to chat with you more on this. I was having trouble converting SQLAlchemy Enum to python Enum. I would like to learn how you do it, and if there is any limitation."
vhquang,"I mean name the value. Ex:  ```     old_val, new_val = 0.0123, 0.01239     ...         assert history[0].quote_value == old_val     assert history[1].quote_value == new_val ```"
gdevanla,"Ok, got it. That makes sense!"
flexatone,"Typo? ```suggestion         self, w0: tp.List[tp.SupportsFloat], w1: tp.List[tp.SupportsFloat], a: int ```"
flexatone,"I do not think this is valid syntax for `tp.Callable`; args need to be in a list, and you can only have one return type."
flexatone,Does this have to be a list or can it be a `tp.Sequence` or `tp.Iterable`?
flexatone,"Do you mean this, or can you be more specific? ```suggestion def df_to_hashable(df: tp.Union[pd.DataFrame, pd.Series]) -> tp.Tuple[tp.Tuple[tp.Any], ...]: ```"
flexatone,"Same here; in general, avoid using `tuple` as we can always be more specific. ```suggestion def df_iterable_to_hashable(iterable: tp.Iterable) -> tp.Tuple[tp.Tuple[tp.Any, ...]]: ```"
flexatone,Syntax on `tp.Callable`: args must be in a list.
flexatone,"Maybe: ```suggestion         self, expected: tp.Any, callable: tp.Callable[[...], str], *args, **kwargs ```"
MadisonAster,"`-> tp.Tuple[tp.Tuple[tp.Set[tp.Tuple[bytes, bytes]]]]:`  Is this too explicit?"
MadisonAster,"Updated to this: ` -> tp.Tuple[tp.Tuple[str, tp.Any]]:` fits better I think."
MadisonAster,"Ahh, missed that. One of the arguments was wrong anyway:  `min_fn: tp.Callable[[float, float], tp.SupportsFloat],`"
MadisonAster,"Apologies missed this one. One of the arguments was wrong anyway:  min_fn: tp.Callable[[float, float], tp.SupportsFloat], "
MadisonAster,"This one is a bit tricky. If I wrap the ellipses in brackets, I get an error. I think this is because if the ellipses is the first item in a list, it evaluates to a list? "
MadisonAster,"These work: `callable: tp.Callable[..., str],` ``` T = tp.TypeVar(""T"", bound=tp.Callable[..., tp.Any]) ... self, expected: tp.Any, callable: T, *args, **kwargs ```  These do not: `callable: tp.Callable[[...], str],`  ``` T = tp.TypeVar(""T"", bound=tp.Callable[[...], tp.Any]) ... self, expected: tp.Any, callable: T, *args, **kwargs ```"
MadisonAster,"Great point! Found 4 instances of this in ISLib, replaced 2 with tp.Iterable, and 2 with tp.Sequence based on their usage within each function."
flexatone,I see; thanks for clarifying that!
johnjhawk,Is this just saying to ignore any extra kwargs that may be passed?  
johnjhawk,"```suggestion         return missing[0] if missing else func(*series, **kwargs) ``` I think a ternary is nice here if you dig it"
johnjhawk,I think Guru changed this to take static frames.
johnjhawk,"```suggestion             raise RuntimeError(""Unable to parse the following locators. Use skip_invalid to ignore"", errors) ```"
vhquang,"LAE and CTI use mcap as benchmark, while LGIM use weight from GRAFI as benchmark."
chaburkland,TODO
chaburkland,I think it's better to use `.astype[col]('datetime64[D]')`. That ways there's no ambiguity about what the date precision will be.
nekobon,Great point! Thank you!
nekobon,"Since spec's trade date is not meaningful in this build, it is often overlooked, and this dependency might be surprising for IM team. I recommend to use either GEU date or parc's year-label which is usually more reliable. @johnjhawk what do you think? "
nekobon,"We usually use most recent in the last 5 years for ""most_recent_*"". Is it explicitly requested to change the lookup to 1 year by Ted or Joseph?"
nekobon,How about isna().any()?
nekobon,How about to directly use `lambda row: row[field_exclude]==True`
nekobon,"Please make sure to get this part validated before the post-launch builds, it might be the best to make it raise for now."
nekobon,This `lambda row: row[field_in_region_size]` is used multiple times in this function. How about to define it once and reuse?
nekobon,What is this `namespace` used for?
MadisonAster,"Hi Guru, I ran this successfully with ISDBProd and received an email, however when I tried running this against ISDBTest or ISDBDev I got the following error:  ``` sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedTable) relation ""returns_history"" does not exist LINE 13:         from returns_history fr inner join returns_attrs drc... ``` I don't think the schema in our dev and test db's has been updated to reflect this change."
gdevanla,"Yes. Currently, they are not in sync. Thanks for checking that though."
vhquang,"It is to prefix the column with `carve_label`: ``` def namespace(_field: str):     return f""{carve_label}_{_field}""  ``` All the columns we create in `process_in_carve` would need to be namespace, as we now have multiple carves using Carbon plugin. Earlier version, I made that small function to make it easier to namespace the columns. However, with the change of letting helper functions defining their own column name, those functions need to take in `carve_label`, and the usage of this `namespace` function is only for the helper that I haven't yet refactor. "
vhquang,"I want to mention that PARC's year-label is based off trade date. And currently, PARC year-label can be non-standard year-month string, for example '202106-mk2' (a feature for multi deliver for the same month, but we haven't used that feature). Using PARC year-label may involve unnecessary string parsing.  Aslo, the `launch_date` (changed to `reduction_start_date`) is used to determine the `universe_ci`/`original_ci`, which is reported in the summary file for QC purpose."
vhquang,Yes Yu. It is explicitly requested in the techdoc: http://centcon01-prd-i:5009/Technical+DocumentationModels/rafi_indices/climate_transition_index_series/rafi_custom_cti_lgim_global/rafi_custom_cti_lgim_global.html#ci-as-ghg-emissions-scaled-by-revenue
vhquang,"This is due to `numpy.bool` is not Python boolean: ``` np.bool_(True) is True >>> False ``` I am doing this explicitly, to avoid someone attempt to refactor `row[field_exclude] == True` to `row[field_exclude] is True`, which will cause hidden bug that is not obvious to spot."
vhquang,"That is a valid concern. But since this plugin is shared by CTI, if I raise exception here it will affect CTI. That will also fail all RMC tests.  I will override LGIM inheritance to only return current `origininal_ci` while waiting for validation."
johnjhawk,"It may be nice to create a large_mid class level constant like so: ```     LM = frozenset((SubIndex.LARGE, SubIndex.MEDIUM)) ```  ```suggestion                 in LM ```         "
johnjhawk,```suggestion                 in LM ```
johnjhawk,Let's make this an RAPC_DATED_PARAMeter.  I can help if you like. 
johnjhawk,I believe that would just be a snap shot of sales and the havg_years is not needed?
johnjhawk,"Can we chat about why this is needed, when you have a moment? I just want to understand it."
johnjhawk,"I know that this is not new to this methodology, but I don't like set of ignored_ISINs in the code. It seems strange that we would maintain a list of 3 ISINs to ignore while all others are not.  Maybe we can determine why they are ignored an have that be the name of the variable. Or if we expect these to ever change, we put the list in the input data rev.  We can discuss this outside of the context of grafic though."
vhquang,"I think I know how to do it. But I also hope to do it as we usually do it.Let me make that change in separate PR, so we can review it."
brandtbucher,"If you ""group"" two string literals in parentheses (no commas or anything), the compiler will automatically concatenate them for you. It's much cheaper than calling `"""".join` when the strings are known at compile time.  Also, you can move the date formatting into your f-string!  ```suggestion         title = (             '<p style=""font-size:125%;font-weight:bold"">Product & Market Daily Returns</p>'             f'<p style=""font-size:100%"">Close Returns {data_date:%Y/%m/%d}</p>'         ) ```"
brandtbucher,It looks like you're not using this...  ```suggestion ```
brandtbucher,Could `spec_revision` or `rapid_revision` ever be `0`? if so...  ```suggestion         self.spec_revision = spec_revision if spec_revision is not None else latest_revision         self.rapid_revision = rapid_revision if rapid_revision is not None else latest_revision ```
brandtbucher,Maybe create a symbolic constant for this (if one doesn't already exist)? Lots of opportunities for typos.
brandtbucher,Here too.
brandtbucher,"We usually don't send emails *from* `imdev_notifications@rallc.com` (I didn't even know you could do that).  You can really put anything you want here. Maybe:  ```suggestion         addr_from=""performance_report@rallc.com"", ```"
brandtbucher,"Again, maybe change this email address?"
brandtbucher,"```suggestion         data_date: tp.Optional[date], ```"
brandtbucher,"This isn't needed when the action is `""store_true""`.  ```suggestion ```"
brandtbucher,"Maybe avoid computing this twice?  ```suggestion         null_columns = frame[not_na_columns].isna().any()         self.assertFalse(             null_columns.any(),             f""Null Columns: {null_columns}"",         ) ``` "
brandtbucher,"Forget something? 😉  ```suggestion         spec_revision=options.spec_revision,         rapid_revision=options.rapid_revision, ```"
brandtbucher,"Do these work currently?  I believe that, the way this is written, `spec_revision` and `rapid_revision` are parsed in as `str`s, not `int`s, right?  (Also, I think `required` is already `False` by default.)  Perhaps you mean:  ```suggestion     parser.add_argument(         ""--spec_revision"", help=""Report Spec Revision."", type=int     )      parser.add_argument(         ""--rapid_revision"", help=""Rapid Revision."", type=int     ) ```  That way it will automatically convert them to `int`s for you."
brandtbucher,I don't think this is needed:  ```suggestion ```
brandtbucher,Why are you assigning here?  ```suggestion             dp.PortfolioPerformanceData._extract_monthly_levels(daily_levels) ```
brandtbucher,Unnecessary parens:  ```suggestion         expected = (series + 1) ** 0.5 - 1 ```
brandtbucher,Here too:  ```suggestion         expected = (series + 1) ** 0.2 - 1 ```
brandtbucher,```suggestion ```
brandtbucher,"`save_frame` works with `Path`s, right?  ```suggestion         savepath = self.tmp_dir / ""test_save_workbook.xlsx"" ```"
brandtbucher,Unused:  ```suggestion ```
brandtbucher,```suggestion     @staticmethod     def _levels_to_returns( ```
brandtbucher,```suggestion         def set_index(f: sf.Frame) -> sf.Frame: ```
brandtbucher,"```suggestion         def format_frame(name: str, f: sf.Frame) -> sf.Frame: ```"
brandtbucher,"```suggestion     def _to_zip_tsv(self, path: PathSpecifier) -> None: ```"
brandtbucher,"I sort of prefer this form:  ```suggestion         benchmark = (self.benchmark or '') and self.benchmark.rapid_id         currency = self.currency or ''         return f""{self.portfolio.rapid_id}|{benchmark}|{currency}"" ```"
brandtbucher,"Unnecessary parens:  ```suggestion             section_groups[spec_row.section, spec_row.sub_section].append(spec_row) ```"
brandtbucher,Are we sure we want `from_latest()`? Don't we always have a `data_date` to work with?
brandtbucher,"Did you see a benefit from `@lru_cache`'ing this?  I'd be a bit surprised if so: you're already caching the reader, and the reader itself performs a lot of caching under-the-hood."
brandtbucher,This is *super* confusing. Do you mean for `to_fx` and `from_fx` to be backwards here (and to use multiplication below in `_convert_levels_fx`)?
brandtbucher,Pretty scary to be caching a mutable list. Is this really that expensive?
brandtbucher,"Maybe `ValueError` is better here?  ```suggestion             raise ValueError(""RF monthly returns include NA!"") ```"
brandtbucher,Unnecessary parens:  ```suggestion         annual_stdev_excess_returns = 12 ** 0.5 * stdev_excess_returns ```
brandtbucher,```suggestion     ) -> sf.Frame: ```
brandtbucher,"Sure you want `from_latest()`? We have a `data_date`, right?"
brandtbucher,```suggestion     ) -> sf.Frame: ```
brandtbucher,```suggestion     ) -> sf.Frame: ```
brandtbucher,"Hm, I sort of like it better when this loop is unrolled:  ```suggestion         yield ""Daily"", daily_start, data_date         yield ""MTD"", mtd_start, data_date         yield ""QTD"", qtd_start, data_date         yield ""YTD"", ytd_start, data_date ```"
brandtbucher,"```suggestion         years: tp.Optional[tp.Sequence[int]] = None, ```"
brandtbucher,"```suggestion         spec_rows: tp.Sequence[SpecRow], ```"
brandtbucher,Maybe you mean *interleave*? ```suggestion     def _interleave_frames(*frames: sf.Frame) -> sf.Frame: ```
brandtbucher,```suggestion     @staticmethod     def _sample_frame( ```
brandtbucher,"```suggestion         rows: tp.Sequence[SpecRow], ```"
brandtbucher,"Maybe clearer as just:  ```suggestion         return (             cls._sample_frame(column_samples=portfolio_samples, frame=frame, columns=rows),             cls._sample_frame(column_samples=benchmark_samples, frame=frame, columns=rows),         ) ```"
brandtbucher,```suggestion     @staticmethod     def _convert_levels_frame( ```
brandtbucher,Have you checked out `ISLib.colors`? It's got symbolic constants for a bunch of our marketing color codes.
brandtbucher,"```suggestion         header_series = header_column(f""Close Returns {data_date:%Y/%m/%d}"") ```"
brandtbucher,Symbolic constant for this?
brandtbucher,"```suggestion         return f""<html>{html}</html>"" ```"
brandtbucher,"This can just be a literal, right?  ```suggestion         label_to_format = {             ""returns"": cls.NUM_PERCENT_FORMAT,             ""excess returns"": cls.NUM_PERCENT_FORMAT,             ""stdev"": cls.NUM_PERCENT_FORMAT,             ""tracking error"": cls.NUM_PERCENT_FORMAT,             ""sharpe"": cls.NUM_FORMAT,             ""ir"": cls.NUM_FORMAT,         } ```"
brandtbucher,"```suggestion             if isinstance(val, float) and np.isnan(val): ```"
brandtbucher,"```suggestion             if isinstance(val, float) and np.isnan(val): ```"
brandtbucher,"Maybe use symbolic constants for `40`, `11`, `32`, and `30`?"
brandtbucher,```suggestion     ) -> Path: ```
brandtbucher,"The `Path` constructor takes `*args`, so you can avoid creating an intermediate `Path` object here:  ```suggestion             Path(portcullis.get_tlt_temp_dir(), f""daily_performance_{date_str}.xlsx"") ```"
vhquang,"Sure, let chat after tomorrow standup."
vhquang,"For why they are ignored, they are rare case of ISIN that Vigeo think is distinct (ie: from different companies), but our Bloomberg co-sec map has the same co_id (ie: Bloomberg thinks those securities points to the same company). For those 3 ISIN, there are 3 other ISIN also map to same 3 co_id. Ignoring them is to let us have an unique index of co_id. We have similar case with ISS as well.  I don't know if that 2-to-1 duplication ever change. When we talk about moving ISS reader in to SDK, there is a request to periodically check if this duplication still happens. I think you suggestion, along with their suggestion, are better addressed in the context of QC vendor data, which I have a ticket for but didn't get to address it."
johnjhawk,"that sounds good, could you add this issue to that ticket that you're referring, too?"
gettodaze,"Wow! Good to know, thanks!"
gettodaze,"Oh, I like that. I mostly was following what John Hawk did. @johnjhawk , there wasn't any particular reason to set `from_address=""imdev_notifications@rallc.com""`, was there?"
gettodaze,"Yeah, good idea. I was saving that until later refactoring, but let me just do that now."
johnjhawk,"I use ""imdev_notifications@rallc.com"" because the report came from the imdev team and not the performance group so when people hit reply (especially with an issue) it goes to the people that sent the report and not the entire distribution list.  This is only a slight preference though so I think that either one is fine. "
gettodaze,"Ah, that is a very nice feature of sending from `imdev_notifications`. I wonder if maybe I could put a footer on the email with something like `Please send any feedback about this report to ""imdev@rallc.com""`?"
gettodaze,"Ah, thanks for catching this. I should really be making this a required argument. It forces the user to think about what data they want to run the report for."
gettodaze,The min revision for both of them is positive. I'll add a step in the parser to error if I receive invalid revisions.
gettodaze,"Wow! `f""{data_date:%Y/%m/%d}""` is a game changer for me. Thanks for letting me know!! And I do like this better. I originally was joining with `""<br>""`, but I don't think I will need to do that anymore."
gettodaze,"I did! I haven't used that argument nor written a test for it yet, so I didn't notice until I just added those argument value checks. Thanks!"
gettodaze,"I agree, looking at it this way, it makes it much easier to visualize what a string representation of a `SpecRow` would be."
flexatone,"```suggestion         All Asset Trade Calculator - Web-application and automated routines for delivering daily trade recommendations to PIMCO. This module implements all methods needed to create trade/trade plans, generate reports and and send emails. ```"
flexatone,"```suggestion         The result of staggered rebalancing (or blending), the headline is generally the final build artifact delivered to our clients, usually on a quarterly basis. The headline is a blend of the current tranche, plus the last three quarterly tranches. Headline can sometimes more generally refer to the current live holdings of portfolio. ```"
flexatone,"```suggestion     helix         A TLT an ""on-hold"" project for doing production-grade index calculation, processing daily market movements and corporate actions for portfolios and delivering daily, and possibly intraday, position updates to our clients. ```"
flexatone,"```suggestion         Research Affiliates Active Equity (RAE) strategies are broad market, systematic active equity portfolios that seek to generate superior risk-adjusted returns. ```"
flexatone,"Not sure about the last sentence here. QSR itself does not mitigate volatility; but maybe you are getting at something else?  ```suggestion         Quarterly Staggered Rebalancing. As the investment targets for our client portfolios evolve, actual investments must be bought and sold to linearly transform the portfolio towards the updated target portfolio. QSR is a blender process that layers the current quarter's tranche with the previous three tranches. This staggering limits the impact of large transactions on the available market for any given position. ```"
brandtbucher,"If you CC `imdev_notifications`, then any ""reply all"" will go back to us. Maybe that's a good middle ground?"
gettodaze,"No way! I didn't know `__getitem__` took args! I am learning so much this morning, haha."
gettodaze,"Actually though, I just realized I don't need `section_groups` anymore, so unfortunately I won't be able to use `__getitem__(*args)` for now :("
gettodaze,"You're right. Originally I was thinking that we might run this report for more days than we have FXWMReuters, but that isn't the case."
gettodaze,"Oh, but it doesn't take a `data_date`, just an `as_of_date`. I always use the latest date as the `as_of_date`, so I think I should stick with `from_latest`. @brandtbucher What do you think?"
gettodaze,"Yeah, I agree that is it confusing, but yes, converting via multiplication instead of division. I left a comment above; I'm guessing it wasn't very helpful?   Conceptually when I think of an exchange rate, if I can get 100 yen for 1 dollar, then `rate(from=USD, to=JPY)` should give `100 (JPY/USD; to/from)`. This function gives  the opposite `(USD/JPY; from/to)`, so I arbitrarily decided to reverse it. This way it makes sense in my head, but it was just a personal choice. @brandtbucher Would you recommend keeping `from` and `to` as is?"
gettodaze,"I never checked. I'll put that on my todo list, but get rid of the cache for now."
gettodaze,"Ah, good point. I should be returning a tuple anyways. It's not expensive, I just call it a lot with the same arguments."
gettodaze,"Actually, haha, I only call it twice. I'll remove the cache."
gettodaze,"Ah, I should change that to use `sqrt(12)` anyways. I think that reads better."
gettodaze,"Ah, thanks! I didn't see I was using it twice."
gettodaze,"Again, should I think my `as_of_date` is the date the report is being run, not the `data_date`."
gettodaze,Thanks :sweat_smile: 
gettodaze,"Yeah, I agree."
gettodaze,"I have not! I added a note to check that out. I know Tom has Colors for his reports, but they didn't seem to match what I had wanted."
gettodaze,"Ah, I'll just use `Colors.LIGHT_GRAY`."
gettodaze,"It could, but I have updated it to use symbolic constants now, so I think it might be easier to keep as a dict comprehension?"
gettodaze,"Ah, good point!"
gettodaze,"Oh, I guess I don't need to. It just feels strange to call a function that gives a non-null return value and not assign the value. I will remove it."
gettodaze,But I think that way has to duplicate `data_date` many times. Is it just that having it unrolled is more readable?
gettodaze,"@brandtbucher I'm not sure how the mailing list works, but then wouldn't it go to the whole mailing list as well? I know in the end, this report gets emailed to a lot of people."
brandtbucher,"To me, this form is a bit clearer:  ```suggestion                 filter(data_input.recipe_is_relevant, low_level_recipes) ```"
brandtbucher,"You can perform this check first, right? That way your comprehension is simplified too, and the code follows your comment a bit closer:  ```suggestion                     # Raise unless all recipes have allow_missing=True.                     if not all(r.allow_missing for r in recipes):                         raise                     data_for_group = {                         r: recipe_objects.MissingSeriesPlaceholder(                             r.missing_data_fill_value, name=repr(e)                         )                         for r in recipes                     } ```"
brandtbucher,I've always wanted an excuse to do something like this! Very cool.
brandtbucher,"These two lines are out-of-order. Either fix here or below:  ```suggestion         locator: A portfolio locator string, e.g., '|LIVE|RUSSELLCANADA'.         column_name: A column to pull from the live holdings frame. e.g., HoldingsAsOf.weight_field. ```"
brandtbucher,"These are out-of-order too:  ```suggestion         locator: A portfolio locator string, e.g., '|LIVE|RUSSELLCANADA'.         column_name: A column to pull from the live holdings frame. e.g., HoldingsAsOf.weight_field.         reference_product: This product's rebalance schedule is used to determine the date to retrieve weights.         reference_history_index: The index in the reference_product's history to use for date information.         label: The name of the column produced by this series. Defaults to the locator. ```"
brandtbucher,"Here too...  Actually, it looks like a bunch of these classes have the args in the wrong order in their docstrings, so I'll stop commenting on them!"
brandtbucher,Didn't know about `pytest.approx`! Cool.
brandtbucher,"We should probably only add new values to the *end* of an `Enum`. That way you avoid silently breaking pickles, or other effects of changing the numeric values of existing constants to something else!  ```py >>> class X(enum.Enum): ...     A = enum.auto() ... >>> p = pickle.dumps(X.A) >>> class X(enum.Enum): ...     B = enum.auto() ...     A = enum.auto() ... >>> pickle.loads(p) <X.B: 1> ```"
brandtbucher,"`__getitem__` works a bit differently than elsewhere. It will collect args into a tuple for you, so these two forms are equivalent:  ```py >>> class Getter: ...     def __getitem__(self, item):  ...         return item  ...                                                                                                                                                                                            >>> g = Getter()                                                                                                                                                                               >>> g[(1, 2, 3)]                                                                                                                                                                               (1, 2, 3) >>> g[1, 2, 3]                                                                                                                                                                                 (1, 2, 3) ```  That's why `static_frame`, `pandas`, and `numpy` need a list when passing several values to `__getitem__`. Otherwise they have no way of distinguishing the two cases above (one tuple value vs. several distinct values)!  ```py >>> g[[1,2,3]]                                                                                                                                                                                 [1, 2, 3] ``` "
brandtbucher,See my comment above.
ForeverWintr,"Interesting point! In this case I have no pickles, but I agree adding new members to the end of an enum seems best practice. "
ForeverWintr,"haha, I find the comprehension form more explicit and readable, and generally avoid `filter` and `map`. Did you know [Guido tried to remove them entirely in python 3](https://www.artima.com/weblogs/viewpost.jsp?thread=98196)? "
ForeverWintr,Thanks! 
ForeverWintr,"You're right! Chris had similar feedback, but I made the change on a different branch. To avoid the merge conflict I'll keep this unchanged for now, and merge the updated version shortly. "
ForeverWintr,Thanks for reading my docstrings!
ForeverWintr,It's awesome!
brandtbucher,"I knew you'd push back on this, haha.  I guess I just prefer to loop in C instead of Python, and avoid unnecessary name loads, name stores, attribute lookups, and function definitions. 🙃   I mean, look at this monstrosity:  ```py >>> dis.dis(""(a for a in b if c.d(a))"")                                                                                                                                                          1           0 LOAD_CONST               0 (<code object <genexpr> at 0x7ff2be0b2df0, file ""<dis>"", line 1>)               2 LOAD_CONST               1 ('<genexpr>')               4 MAKE_FUNCTION            0               6 LOAD_NAME                0 (b)               8 GET_ITER              10 CALL_FUNCTION            1              12 RETURN_VALUE  Disassembly of <code object <genexpr> at 0x7ff2be0b2df0, file ""<dis>"", line 1>:   1           0 LOAD_FAST                0 (.0)         >>    2 FOR_ITER                20 (to 24)               4 STORE_FAST               1 (a)               6 LOAD_GLOBAL              0 (c)               8 LOAD_METHOD              1 (d)              10 LOAD_FAST                1 (a)              12 CALL_METHOD              1              14 POP_JUMP_IF_FALSE        2              16 LOAD_FAST                1 (a)              18 YIELD_VALUE              20 POP_TOP              22 JUMP_ABSOLUTE            2         >>   24 LOAD_CONST               0 (None)              26 RETURN_VALUE ``` ```py >>> dis.dis(""filter(c.d, b)"")                                                                                                                                                                    1           0 LOAD_NAME                0 (filter)               2 LOAD_NAME                1 (c)               4 LOAD_ATTR                2 (d)               6 LOAD_NAME                3 (b)               8 CALL_FUNCTION            2              10 RETURN_VALUE ```  But they're functionally (ha) equivalent, so go with whatever you like better!"
ForeverWintr,"I've mentally been treating these as an unordered collection, and I personally don't ever rely on order when reading a docstring. I imagine it might affect some automated tools though. I'll update them."
ForeverWintr,Yes... but I don't remember why. I'll see if I can remove it.
ForeverWintr,"I took a quick look and I don't think he has, unless I'm missing something"
ForeverWintr,"Yes, it is needed. I'll rename it to be clearer."
gettodaze,Did you want to be passing in this `debug_mode`? It seems like it is being name_stomped in `MatsDagAdapterMixin._get_command_line_construction_func`
gettodaze,Cool way to create module_paths from `__name__`!
gettodaze,"I'm not very familiar with protocols, but it seems that `LoaderInterface[EquityAttr, EquityHistory]` might be redundant, because that is already a superclass of `ExtractTransformMixin[EquityAttr, EquityHistory]`? Is there a purpose to listing both of them?"
gettodaze,"```suggestion     # Maps column to a callable that takes the actual value (to be loaded?) and also the row as sf.Series for context     ATTR_FIELD_TRANSFORMERS: tp.Dict[         sa.Column, tp.Callable[[tp.Any, sf.Series], tp.Any]     ] ```"
gettodaze,"```suggestion      # Maps column to a callable that takes the actual value (to be loaded?) and also the history row as sf.Series and the instrument attr for more context     HISTORY_FIELD_TRANSFORMERS: tp.Dict[         sa.Column, tp.Callable[[tp.Any, sf.Series, InstrumentAttr], tp.Any]     ] ```"
gettodaze,Did you remove the key-word only for any reason in particular?
gettodaze,"Is `**kwargs` necessary here, or can you pass optional keyword arguments around? I think `**kwargs` is fine (I'm not super familiar with how it gets used), but I think sometimes it can make things more difficult to read / hide bugs."
gettodaze,"Just double-checking, this docstring is probably still accurate, correct?"
gettodaze,"```suggestion def convert_from_pct(value: float, _: sf.Series, __: EquityAttr) -> float: ```"
gettodaze,What is the type on value? A str?
gettodaze,"```suggestion     @staticmethod     def add_equity_attrs(         run_date: datetime.date,         connection_spec: inventory.PostgresConnectionSpec,         source_file_path,     ) -> None: ```"
gettodaze,Is this all still accurate? I wonder if maybe this file would be better kept in `rapc_input` somewhere.
gettodaze,"This is a pretty long try block; maybe it would be better as a separate function? This way is fine too, though, because it highlights that steps are being added to the transaction.. I also wonder if the `db_session` can be used in some type of context manager to handle commit and rollback automatically?"
gettodaze,```suggestion         ) -> EquityAttr: ```
gettodaze,"```suggestion         def create_attr( # I'm guessing here             bb_attr: sf.Series,             ticker: str,             index_type:  str,             is_hedged: bool,             instrument_id:  str,             instrument_id_root: str,             seed_row: int, ```"
gettodaze,"```suggestion     ) -> tp.Callable[[datetime.date, bool], str]: ```"
gettodaze,"```suggestion     ) -> tp.Callable[[datetime.date, bool], str]: ```"
gettodaze,```suggestion                         # this will be reset for next portfolio group                         instrument_id_root = instrument_id ```
gettodaze,"```suggestion         return attrs.iloc[:, 0] ```"
gettodaze,"```suggestion     def _load_static(cls, fp: os.PathLike, identifier: str) -> sf.Series: ```"
gettodaze,"```suggestion     def _load_history(cls, fp: os.PathLike, identifier: str) -> sf.Frame: ```"
gettodaze,"I think `macro_attr` could be any `*Attr` class, right? Maybe rename to `instrument_attr`?"
gettodaze,"```suggestion         _: InstrumentHistory, ```"
gettodaze,```suggestion     columns = [attr.key for attr in attrs] ```
gettodaze,"Maybe this could be simpler?  ```suggestion def models_to_frame(     *models: SQLAlchemyModel ) -> sf.Frame:     """"""     Converts a list of sql alchemy models into a frame     """"""      attrs = inspect(models[0].__class__).column_attrs ```"
gettodaze,"Oh, but I notice this is only used in tests: maybe it could be moved to the testing module?"
johnjhawk,"It may be nice it we had some constants that defined common time intervals?  It may make the intervals an timeouts a bit easier to read, but up to you.  ```suggestion MINUTE: int = 60 HOUR: int = MINUTE * 60 WEEK: int = HOUR * 24 * 7 ```"
johnjhawk,could use the WEEK constant here
johnjhawk,this would become something like ```suggestion     DATA_AVAILABLE_CHECK_POLL_INTERVAL: int = MINUTE * 10  # every 10 minutes ```
johnjhawk,would need a proper namespace with all of these obviously but it would be something like: ```suggestion         HOUR ```
johnjhawk,this would be something like: ```suggestion     DATA_AVAILABLE_CHECK_TIMEOUT: int = WEEK * 3  # 3 weeks ```
ForeverWintr,"I take pleasure in making the computer work harder so that I don't have to!   But I promise that if this python loop ever becomes a bottleneck, I'll replace it. :)"
chaburkland,Why do you use `pd.isnull` instead of `.isna()`?
chaburkland,I'm a little confused at what type `row` is. Why do you use `and` instead of `&`?
gdevanla,"Yes, we don't use it. But, it is there if any tasks needs it."
gdevanla,"The ExtractTransformMixin might not implement all parts of the Protocol since I treat is as a mixin. But, I see your point. I will think about how I could refine it."
gdevanla,Good point. This function is evolving. I will leave a reminder there stating that we could move this to test util if not used elsewhere.
vhquang,"Both of them are equivalent: ``` pd.isnull is pd.isna >>> True ``` I want to say I want to check in the column that has `None` in it, and not want to give impression that I want to check `NaN`. But the truth is that it's just a habit."
vhquang,"I will add typehint for `row`. For `and`, I think it is a preferable way for boolean operation."
gdevanla,Um..I am not sure. These are kind of constants. Would you suggest we add this to some module and import and use them? Wouldn't that be too heavy?
chaburkland,"`admin_mail_args` is used by the old architecture, the new architecture does mail args differently so this can be deleted."
chaburkland,"This line can be deleted! The old architecture required monitored tasks to return this triplet (`success_code`, `function_pointer`, `list of string logs`). The new architecture removes this pattern by handling those separately. Function pointers are not used. Success code is done via exception handling. Logs are done using the `logging` module."
chaburkland,"A couple things here. One, since there is only one task, there is no reason to use `ms.task_sequence`. `ms.task` is much more appropriate as there's no reason to build up a pipeline. You can look at `imcron.apps.holiday_notifications.py:notify_holiday_overlap_fpn` to see an example of how to do this, as it's slightly different than `ms.task_sequence`.  Also, I think the correct notify_level here is `ms.NotifyLevel.CRITICAL`, as that was the notify level used in the old decorator."
chaburkland,"I don't think this is correct! The old code was printing everything to stdout, redirecting stodout back into a list, and then forwarding those log messages through the monitored sequence workflow.  The new code uses the `logging` module, making this obsolete, as the logs are caught automatically, and the whole convoluted stdout route is totally unnecessary.  You don't need to run `configure_logging` at all, as the old code wasn't writing logs to a temp log file. Plus, I'm not sure that this directory will live long enough on the worker to even be useful :thinking: "
chaburkland,"We call this an `extraneous else`. In other words, whenever the an `if-else` statement escapes the current scope, we typically like to explicity make the `if` block escape, and remove the `else` block entirely. Something like this:  ```python # Instead of if condition:     return do_something() else:     return do_something_else()  # Do this if condition:     return do_something()  return do_something_else() ```  This other point is moot since this doesn't need to use `ms.task_sequence` and so the construction of an `ms.MSInput` instance will be unnecessary. As a style comment however, I think this code would read better if `EnviroCleanSequence.get_ms_sequence()` was called once outside the branch, and then the branches both referenced that object instance."
chaburkland,"Since you updated `EnviroClean.main` to log instead of print, this context manager isn't doing anything anymore. All you have to do is call `EnviroClean.main` since the new monitored sequence captures logs automaticaly."
chaburkland,"Since these lines were commented out, I would use `log.debug` to indicate lower priority logging information. Plus, these should probably be f-strings! `log.debug(f""Deleting file {sub_path}"")`."
gettodaze,"First of all @chaburkland thanks for reviewing this! You caught a lot of things that I didn't even realize about these functions.   Also (maybe this is because I am not terribly familiar with logging), how would we return a list of logs from the logger? Could we add a StringIO handler to the logger within this function?"
gettodaze,"Oh, never mind, I see your next comment says that this function doesn't need a return."
chaburkland,"Yeah, it's not needed anymore! If you're curious how this was done, you can see here within the new architecture https://github.com/ResearchAffiliates/invsys/blob/default/RALib/core/monitored_sequence_fpn.py#L149 that internally we are capturing and observing logs."
chaburkland,"Can you update these to use the typehints? The argument is always a `YYYYMMDD` date str.  ```python def get_datastream_price_local_daily_core(date: str, suffix: str):     date = du.year_mo_day_str_to_date(date)     return datastream_price.DSPriceLocalDailyCoreWriter(as_of_date=date, suffix=suffix) ```"
chaburkland,"I'm wondering if just using `np.int64`, `np.float64`, etc... would be better for these dtype specifications instead of string parsing."
chaburkland,"Maybe make `_DSPriceResource` a subclass of `ABCDataResource` instead of multiple inheritance? You are already setting `FN_EXT` to an empty string, so it shouldn't be a stretch to set `FN_STUB` to the empty string as well."
chaburkland,"To speed this up, I would also recommend passing in `show_idx_diffs=False`"
chaburkland,`rows_min` and `rows_max` is a cool way to do backwards compatibility testing.
chaburkland,"Additionally, I would do `assert comparison.frames_equal(), comparison.summary`. It's the same thing, just a wee bit more explicit"
chaburkland,"This is a super minor point, but I don't think index is needed here since all this is being used for is to signal an empty container."
chaburkland,"Would you be opposed to renaming the variable to something else, maybe `work_dir`? `work` seems like an verb, so I keep thinking it's a callable, and then I'm surprised each time to find out again it's a directory."
chaburkland,Comment about return type.
chaburkland,These `Calculation` subclass are soo satisfying. I know it was said before in code review but this is really cool.
chaburkland,You should use `.apply_iter` here
chaburkland,Note. Stopped here. Haven't looked at `papyri/papyri/core/crsp_price.py` yet.
brandtbucher,What does `show_idx_diffs=False` do? I want to see index differences in the summary output!
brandtbucher,"Well, I kind of like seeing both..."
chaburkland,"Oh! Then maybe set `show_col_diffs=False`. Basically, there are two ways to group the differences: per column or per index. I find that most times I mainly care about examining differences by column, not by index. Give me a second to show a meaningful example. "
chaburkland,"```python size = 3  index = [f'idx_{i}' for i in range(size)] columns = [f'col_{i}' for i in range(size)]  f1 = ff.parse(f""v(float32)|s({size},{size})"").relabel(index=index, columns=columns) f2 = f1 * 2  comp = cf.Comparison.from_frames(f1, f2)  print(comp.idx_diffs) {     'idx_0': <Frame: idx_0>     <Index>        f1                 f2                  <<U2>     <Index>     col_0          1930.4000244140625 3860.800048828125     col_1          -610.7999877929688 -1221.5999755859375     col_2          694.2999877929688  1388.5999755859375     <<U5>          <float32>          <float32>,      'idx_1': <Frame: idx_1>     <Index>        f1                  f2                 <<U2>     <Index>     col_0          -1760.3399658203125 -3520.679931640625     col_1          3243.93994140625    6487.8798828125     col_2          -72.95999908447266  -145.9199981689453     <<U5>          <float32>           <float32>,      'idx_2': <Frame: idx_2>     <Index>        f1                 f2                 <<U2>     <Index>     col_0          1857.3399658203125 3714.679931640625     col_1          -823.1400146484375 -1646.280029296875     col_2          1826.02001953125   3652.0400390625     <<U5>          <float32>          <float32> }  print(comp.col_diffs) {     'col_0': <Frame: col_0>     <Index>        f1                  f2                 <<U2>     <Index>     idx_0          1930.4000244140625  3860.800048828125     idx_1          -1760.3399658203125 -3520.679931640625     idx_2          1857.3399658203125  3714.679931640625     <<U5>          <float32>           <float32>,      'col_1': <Frame: col_1>     <Index>        f1                 f2                  <<U2>     <Index>     idx_0          -610.7999877929688 -1221.5999755859375     idx_1          3243.93994140625   6487.8798828125     idx_2          -823.1400146484375 -1646.280029296875     <<U5>          <float32>          <float32>,      'col_2': <Frame: col_2>     <Index>        f1                 f2                 <<U2>     <Index>     idx_0          694.2999877929688  1388.5999755859375     idx_1          -72.95999908447266 -145.9199981689453     idx_2          1826.02001953125   3652.0400390625     <<U5>          <float32>          <float32> } ```  As you can see, the same differences are calculated, but they are grouped grouped together differently. Typically you only care about one of these views, not both."
MadisonAster,I've simplified the main function and turned it into a class method.
MadisonAster,Great idea! Thanks for pointing this out.
MadisonAster,Removed this. Thanks for clarifying.
MadisonAster,Converted to ms.task and simplified the daemon.
MadisonAster,Thanks for clarifying! I wasn't aware this became unnecessary. This is indeed much simpler!
MadisonAster,Removed this!
MadisonAster,Moved mail_args into a class attribute.
chaburkland,"This looks really great! I think the final piece you might want change here to to pass in the remaining args to the task. Unlike the heavy restrictions before about callable signature and return value, `ms.task` supports callables that take any arguments and return any value.  So in this case, I would update `work` to accept the `remaining_args` and pass them in here. That way, you don't have to arg parse on every single run of `task`"
chaburkland,This is a great improvement!
chaburkland,"This might be too nitpicky, but for most of the print -> log changes you made, I think the code would be more clear if they were constructedas f-strings, instead of using `"" "".join`"
chaburkland,Haha I wasn't being sarcastic! I really like your removal of the module level `main`!
gettodaze,"Is there a reason you're doing a `"" "".join` beyond just keeping parallel with the old code? I think it would look nicer if you could refactor these `"" "".join` strings into f-strings.  ```suggestion                 log.info(f""     Name: {path_name}"")                 log.info(f""         Path: {path}"") ```"
gettodaze,"The f-strings would make this easier too: ```suggestion                     skipped = sub_paths[-parsed_args.num_to_keep :]                     log.info(f""         Skipping {len(skipped)} newest files"") ```"
gettodaze,"Maybe I'm just not very familiar with `MailArgs`, but what subject are you going for here? I'm imagining an email subject of `__main__` or `enviro_clean_daemon` isn't terribly helpful, but I'm not sure."
gettodaze,"Unless were you trying to have it be the class name? I'm not sure how to do that, all I know is it printed `""__main__""` from within a class when I tested it: ```python3 In [1]: class C:     ...:     print(__name__)     ...:                                                                                             __main__"
gettodaze,"I think Charles said the right level was `ms.NotifyLevel.CRITICAL` here, unless I misunderstood."
gettodaze,I've been defaulting to a module-level main (I thought it was the most common in our codebase but maybe not haha); do we typically try to avoid it?
MadisonAster,"Didn't interpret any sarcasm, I'm glad you like it! I like it too! feels very ""class-first"" to me."
chaburkland,"Hmmm. I'm not sure we have a strong mandate, I think it's preference/judgment. To me, this module is so short, that it seems excessive to have a module-level main, and it just subjectively looks better to me :sweat_smile:. But certainly there are many cases where it is appropriate to have module-level main."
MadisonAster,"I like this better. I was looking for something better than join, just didn't think to try these."
MadisonAster,This worked like a charm!
MadisonAster,Replaced!
MadisonAster,Fixed and replaced everything with fstrings now.
MadisonAster,Fixed this with just a plain string in the class attributes. Easy enough to configure from there.
MadisonAster,Switched to critical.
gettodaze,"Oh! I didn't understand this before but now I think I get it. The idea is to use some of the commandline args here, and pass any leftover to EnvrioClean.main, similar to like: ```python3 def work(a: int, b: str):   pass  def main(c: str, **kwargs):   # do something with c   work(**kwargs) ``` Is that right?"
gettodaze,"Since this just wraps around `EnviroClean`, how about adding it as a parent to get a more helpful `help` option: ```python3         parser = argparse.ArgumentParser(             description=cls.__name__,             parents=[EnviroClean.get_arg_parser()],             add_help=False,         ) ``` ```bash With this, you should be able to see this: rapc$ python '/home/mccloskey/src/rapc/RALib/apps/enviro_clean_daemon.py' purge -h usage: enviro_clean_daemon.py purge [-h] [--static] [--cache] [--output] [--svn_input] [--tmp] [--no-dry-run] [--num-to-keep NUM_TO_KEEP]                                     {all,AAF,AAForecast,AASite,AATC,Bolt,GMac,ISLib,PARC,RAC,RALib,RAPC,RAQC,augur,blender,centcon,deploy,disque,function_pipe,helix,imcron,kozuchi,papyri,portal,portcullis,table_compositor,tardis,teamalloc,uroborus}                                     [{all,AAF,AAForecast,AASite,AATC,Bolt,GMac,ISLib,PARC,RAC,RALib,RAPC,RAQC,augur,blender,centcon,deploy,disque,function_pipe,helix,imcron,kozuchi,papyri,portal,portcullis,table_compositor,tardis,teamalloc,uroborus} ...]  positional arguments:   {all,AAF,AAForecast,AASite,AATC,Bolt,GMac,ISLib,PARC,RAC,RALib,RAPC,RAQC,augur,blender,centcon,deploy,disque,function_pipe,helix,imcron,kozuchi,papyri,portal,portcullis,table_compositor,tardis,teamalloc,uroborus}                         one or more tool names to operate on  optional arguments:   -h, --help            show this help message and exit   --static              operate on static directories   --cache               operate on cache directories   --output              operate on output directories   --svn_input           operate on SVN input directories   --tmp                 operate on temp input directories   --no-dry-run          disables dry-run mode, defaults to FALSE (i.e. dry-run mode enabled)   --num-to-keep NUM_TO_KEEP                         keeps the most recent N items in target directories ```"
gettodaze,"Yeah, this looks a lot better!"
gettodaze,"Sorry I didn't notice this earlier, but since you've freshly looked at all this, would you mind adding some typehints in these modules?  ```suggestion     def main(cls, args: tp.Optional[tp.List[str]]) -> None: ```"
MadisonAster,"Yes that's correct. I shifted remaining_args into an input argument last night per Charles' suggestion, this way the parser only gets called once, then the remaining_args are passed to EnviroClean.main for its parser to handle. The idea being that only some args are applicable to the daemon, while others affect EnviroClean."
MadisonAster,Gah! How could I forget the typehints?! XD
MadisonAster,This is an excellent point! I see now why all of these classes implement the get_arg_parser method instead of a method like parse_args. This chain-ability seems very useful. Just pushed a new commit that includes this.
MadisonAster,updated typehints now.
gettodaze,"Since it calls `str(path)`, this might be taking `pathlib.Path` or strings  ```suggestion     def dir_size(path: tp.Union[str, Path]) -> int: ```"
gettodaze,"I think typing might supply an OrderedDict! https://docs.python.org/3/library/typing.html  ```suggestion     ) -> tp.OrderedDict[str, tp.OrderedDict[str, str]]: ```"
MadisonAster,Excellent point.
MadisonAster,"Hmmm, interesting. I just noticed that I'm getting an error with this when I try to run the daemon.  ``` ~/src/rapc$ python RALib/apps/enviro_clean_daemon.py status all --static --cache --output --svn_input  usage: enviro_clean_daemon.py [-h] {purge,status} ... enviro_clean_daemon.py: error: the following arguments are required: subcommand ```  This works for combining the help output it seems, but somehow breaks the parser so that it can't forward the first argument on to EnviroClean   "
gettodaze,:0
MadisonAster,"Updated to `tp.Union[str, os.PathLike]`"
MadisonAster,I hadn't seen this! Very useful. Updated to this now.
gettodaze,Well gosh darn it haha I'm sorry Maddie! Maybe this doesn't work the way I think it does.
MadisonAster,"Figured it out! Because we supplied the parent parser here, the args came out in one big namespace object, thus there are no remaining_args. Just needed to pass the correct args  object into EnviroClean.main and all is well."
nekobon,Can you please remind me how `ms` knows to run `run_email_results` after `run_core`?
nekobon,This function is a bit long. Would it be able to get a function or two outside? Maybe inside of the inner-most loop can be refactored to be outside. 
nekobon,I think label contains strings of months. I'm guessing this sort won't mean much then? (e.g. APRIL < JANUARY)
nekobon,"Sorry, I don't remember what ""mark"" is... is it delivered or not?"
nekobon,How about to use namedtuples to easily understand what each value means?
nekobon,"What does that ""D"" mean?"
nekobon,"We could also use the min to be more binding instead of -1. ```python trade_date = all_product_pt.loc[match_year & match_label, 'trade_date_D'].min() ```"
nekobon,"Also, once you have combined yearmo integer, you can use `loc_max` to avoid sorting"
nekobon,"Also, it would be better to apply `astype` after the match_year/label selection to avoid unnecessary conversion"
nekobon,"You can convert the `trade_date` here, too, instead of astype on Series."
nekobon,"Do you allow non-today dates to run as older dates? If so, you might need to remove all the builds after this `date` from the table beforehand. "
nekobon,"Is this `date_run` expected to match the date of `portfolio_delivery_reminder`? If so, I would send them explicitly from client (client decides if it wants today or not) instead of deriving in both functions."
nekobon,Symbolic constant for this string would help to share between two functions
nekobon,`tp.Optional[datetime.date]`?
nekobon,how about to call it `aasite`? Other non-rapc product might join later
nekobon,Sorry for a tangent question; which team is responsible for marking AASite delivered now? 
nekobon,`elif len(rapc_alarts):` might be a bit easier to read
nekobon,I'm confused... `cls.construct_command_line` above doesn't take any arguments. How does it work?
ForeverWintr,Maybe it would be more maintainable to assert that all these names are in `TLT_NAMES`?
gettodaze,"@ForeverWintr Here, I had intended to rename `get_summary_data_style_func` to `get_data_style_func` to better fit its generic usability. Would you rather I switched the references to back to `get_summary_data_style_func`?"
gdevanla,"Look's like the TLT's here are by priority. So, membership check alone may not be sufficient."
gdevanla,"To help with fast tests, I will make the related changes on default. If there are other suggestions to improve this test, I can make those on another branch.  @gettodaze Thanks for identifying this fast test failure."
ForeverWintr,"Strange, I didn't see this change when I first reviewed the PR. I'm pretty sure github only showed two small file changes at the time, and I didn't see any reference to these functions. I wonder if I was somehow looking at an out of date version. This looks fine to me!"
gettodaze,"@gdevanla So the issue that Maddie helped me find is that the folder was persisting locally because it contained ignored files, causing isort to treat it as a local package instead of a 3rd party package. This should fix that issue."
MadisonAster,We should only need this line here temporarily to be sure that all cache files are deleted. Once every machine has been updated the line can be removed.
gdevanla,👍🏾 for the idea. We need to remember to change this may be in a couple of days.
johnjhawk,"mark is for storing intra-day portfolios in parc, we don't use it yet. But we may in the future. "
johnjhawk,"that's a good point, but I only put int the date parameter for testing. I cant think of a production use for it at this time. Barring a major objection, I'd like to leave it grabbing future builds."
johnjhawk,good call. will do.
johnjhawk,"the ""D"" is a bad naming attempt.  It means that it's a python datetime.date object as opposed to the parc table trade_date which is <M8[ns] or a datetime (with time) object.  I like the idea of converting to a date after the year/label match but I like doing it before slightly better. 1. trade_date_D's are easier to read when viewing the entire table so having them for everything is nice.  2. when I match on year/label the trade_date becomes an integer so then I cant use astype to do the conversion, I have to use datetimes fromtimestamp conversion which seems bulky in this case.  Please let me know if you feel strongly about this or is I'm missing something."
johnjhawk,"I agree in principle, but in this case all the trade dates should be the same so I dont care witch one I grab."
johnjhawk,"from my comment above, I really like converting the series."
johnjhawk,I agree. I reused the results namedtuple factory for this.
johnjhawk,"that was the idea behind calling it non_rapc, but after implementing it the code turned out to be pretty specific to aasite.  I'll rename."
johnjhawk,I agree!
johnjhawk,Not sure. I just know that I asked Ashwini to do it. I have yet to determine who this reminder should go to.
johnjhawk,I agree
johnjhawk,it's the function pipe pipe notation on line 235. `(self.run_core | self.run_email_results)[msi]`
johnjhawk,it calls the ms version and the date is provided when the RunPortfolioDeliveryReminder is initialized.
nekobon,"Great, thanks!"
nekobon,But the cls.construct_command_line is define in line 17. How does it go to the ms version? Does ms inherit and overwrite?  
nekobon,It means that the test behavior could depend on the data on the future. Is it expected? 
nekobon,"For your point (1), do you use the converted trade_date_D anywhere? It seems like it's not in any output. It only grabs the iloc[-1] of this column and the rest goes away. It seems to be better to convert `trade_date`"
johnjhawk,"When `PARC/core/analysis/portfolio_delivery_reminder.py`  is called, it runs the main() function in the portfolio_delivery_reminder_task.py and main calls the callable class RunPortfolioDeliveryReminder which only interacts with the ms version. I may not understand the question. Maybe we should have a quick chat."
nekobon,A quick chat sounds good!
flexatone," I think using `__` is unconventional; if you are implementing a shared signature, maybe it is better to just use the variable names."
flexatone,"This linear search gets my attention; could this be expensive in some cases?   ```identifier not in history[""IDENTIFIER""].values```"
flexatone,"```suggestion         history = history.loc[history[""DATA_DATE""].notna()] ```"
flexatone,"Isn't it always better to multiply instead of divide (when you can?)  ```suggestion             (data_group_attr.ticker_ytw, lambda x: x * .01, BondHistory.yield_ytw),             # basis points conversion             (data_group_attr.ticker_spread, lambda x: x * .0001, BondHistory.oas), ```"
flexatone,Do  we / can we check that `history_attr.name` is not already set... or are we trying to overwrite the same attr in these loops?
flexatone,"Is None really allowed for `debug_mode`? ```suggestion         debug_mode: bool = True, ```"
flexatone,"This use of `x.strip() if x else None` will not deliver the right result if `x` is `"" ""` (or any other whitespace); if you think you need to `strip()`, I would `strip()` before the truthy test."
flexatone,You do this `replace` move more than once: should it be a utility function?
gdevanla,We expect atmost 3 tickers in the list here and this only in may be less than 1/3rd of cases. In all other cases in could just be 1 ticker.
gdevanla,Thanks! Did not know we had `notna`!
gdevanla,True. I think I was aiming for readability.  In this case a comment is probably sufficient.
gdevanla,"We are overwriting different attrs defined in the `ticker_function_map`. The purpose of this loop is to deal with the complicated setup of JP Morgan indices where different values are reported under different tickers. Over here, we are setting up `ticker_ytw`, `ticker_spread` and `ticker_duration` and this is an explicit over-ride for JP Morgan indices.    This is the only complication of bonds, which makes us override this function from the base class."
gdevanla,Good catch! Thanks
gdevanla,Good idea. I think I will add an util function for this.
johnjhawk,Do we have to return empty strings here or could we return None instead?
johnjhawk,Can the string be Optional?
gdevanla,Thanks @johnjhawk. Good point.  I have been considering just changing it to return a None or an list instead of a string as well. I will make the changes accordingly.  Thanks for taking the time to review it at short notice!
gettodaze,"I think it would be nice to separate the FileNotFoundError except block, but this way reduces code duplication."
gettodaze,What is the benefit of np_raise over np?
gdevanla,True. The condition makes it complicated. One reason why I still have it is that there are other conditions at play here.    I have another change in another branch which kind of re-organizes this whole workflow. I will address your comment in that branch.
gdevanla,"We have a small wrapper around numpy, in the ISLIb called np_raise. You will see that we have a number of default overrides we do while accessing numpy API. The most important setting we have there is:  ``` # NOTE: not setting `invalid` as we often use > in contexts where we have nan                                                                                                                                     seterr(divide=""raise"", over=""raise"", under=""raise"")                                                                                                                                                                                                                          ```  This force numpy to raise on divide by error, which numpy does not do by default. "
chaburkland,"This isn't a real suggestion, but would the walrus operator work here? ```python if f := hook(self, f, work):     return None ```"
chaburkland,Why did you change the order here?
chaburkland,Maybe create a ticket to add the necessary endpoints to portal?
chaburkland,`repr(str(c))` ?
vhquang,"Base on the comment, we are doing this because we are executing job in python `venv` environment, not conda environment (but Calypso code from AA is using conda)? "
brandtbucher,"Yep. Activating a conda environment in a subprocess is a total pain, so we just perform the necessary steps here to have roughly the same effect."
vhquang,I feel sorry you had to handle that hack.
brandtbucher,"While we're at it...  ```suggestion     def from_series(cls, series: sf.Series) -> ""RapidCharacteristics"": ```"
brandtbucher,```suggestion             frame = frame.loc[frame[_RapidColumns.RAPID].notna()] ```
brandtbucher,"I sort of like this better:  ```suggestion         elif index_depth == 1:             return frame.set_index(_RapidColumns.RAPID, drop=True)         raise NotImplementedError(f""Not supporting {index_depth=} not in {{0, 1}}"") ```  Although if `index_depth` can only ever be `0` or `1`, why not just make it a boolean parameter (maybe `set_index: bool = True`)? That way the intent is clearer, and you don't need to worry about raising."
gettodaze,"Oh right, thanks!"
gettodaze,"Ah, I had learned about this one recently too! Thanks!"
gettodaze,"Yeah, thats a good idea. I'll use the bool. I was thinking this way could be extensible to more index depth, but I doubt anyone would ever want more than 1."
johnjhawk,"```suggestion                  c if c.isalnum() or c in  ""_.-"" else replacement_char for c in portfolio_code ``` Maybe something like this so we don't have to create a set of alpha nums? "
vhquang,"I don't understand the goal of this `DID_GROUPS`. Can describe about more about them. They are used as `--latest_dids`, so are we expected to update this list after every quarter delivery? Beside, are those NFD stable enough to be used for this purpose?"
vhquang,"I see we only use this for typehint. If that is the case, I think it is better to conditionally imported with `tp.TYPE_CHECKING`."
vhquang,"I need to add note for myself to expose the `sleeve_hl_did` as a constant somewhere in our RAPC constant, so we can track where it is being used."
vhquang,Why do we need to catch `RuntimeError` for this?
ForeverWintr,Fair point.
vhquang,"Alternative to `col-xs-4` + `col-xs-2`, you can try using `flexbox` to set the inner items into one row: ```suggestion                                         <div class=""col-xs-6""                                              style=""display: flex; flex-direction: row; flex-wrap: nowrap"">                                             <label for=""cliqc_{{tool.__name__ | lower}}_{{iui.cli_arg}}""                                                 title=""{{ iui.doc }}""                                             >                                                 {{ iui.cli_arg }}                                             </label> ```"
flexatone,"This strongly implies quarterly histories, which may not always hold. Should the variable be named `REPORT_QUARTERLY_HISTORY_INDEXES` or similar?"
ForeverWintr,"True, although this is all specific to `rae`. Do we expect it to cease being quarterly? "
ForeverWintr,"No, this is just a tool for me to automate running multiple versions of Kleio at once. I manually update the dids based on Ted's request. It should perhaps be a sketch!"
ForeverWintr,"This isn't catching `RuntimeError`, it's catching `SystemExit` and replacing it with `RuntimeError`!   When argparse is given bad arguments, it calls `sys.exit()`, which raises `SystemExit`. That decorator replaces the `SystemExit` error with the exception class you provide. "
brandtbucher,"I prefer this form, since it's needed for `datetime64[D]`. Then I can keep them all uniform."
brandtbucher,"I think I'll leave this as-is. `FN_EXT` is truly an empty string in all derived classes, so that makes sense there. But setting `FN_STUB` is just incorrect, and could mask errors if I forget to set it later (the whole point of `ABCDataResource`)!"
brandtbucher,"I see what you're saying, but there have been cases where I've had to debug _both_ entire columns _and_ rows that are missing or incorrect. Due to the ""wide"" nature of the frame, it's super nice to be able to view each group of failures individually.  This step also isn't very slow or memory-intensive in my experience, but I'm willing to revisit it if it becomes a problem!"
brandtbucher,"I believe I added this was because some downstream logic expects an `IndexDate`. I'm not sure if that still applies, though... I'll add a comment to investigate this further."
brandtbucher,"Why? I've never used `apply_iter` before, but I don't know how/why I'd use a generator here..."
brandtbucher,"Not quite. You'd need to do something like:  ```py if (f := hook(self, f, work)) is None:     return False ```  ...which I find to be less readable. Otherwise an error is raised for checking the truthiness of a `Series`!"
brandtbucher,Because in some nasty edge-cases the arrays were immediately evicted from the weak cache (if they didn't have references elsewhere).
chaburkland,My bad. I got some sf interfaces confused. You're good :+1: 
chaburkland,"Can you make this `has_performance = len(missing_performance) == 0`? The usage made it seem like a boolean so I got pretty confused. (I know it's the same either way, but I think the readability makes it worth it)."
chaburkland,Should this perhaps be done by a logger instead of using `print`? I'm not exactly sure how uses this module.
chaburkland,I think this extra line is unnecessary. I think below you could have just one declaration:  ```python date_min = data_date if single_date else min(s.index[0].item() for s in all_series if len(s)) ```
chaburkland,I think this is a good removal :+1: 
chaburkland,What an alias :laughing: 
chaburkland,"From what I can tell, based on how you are mocking out `_get_daily_levels`, you don't actually need to have your rapid_characteristics be a list of `MagicMock` objects. I think that's undesirable as when I see `MagicMock`, I'm assuming the code is going to either take advantage of it's magic-ness, or run tests on the objects, such as `my_magic_mock.assert_called_once()`, etc...  In this case, since they are just dummy data, I think it would be better to use dummy strings or just sentinel objects, i.e.: `[object(), object(), object()]`"
chaburkland,Maybe just delete?
chaburkland,Why not just `sf.IndexDate([data_date])`?
flexatone,"Yes. We hope to move RAE to be an event-based rebalance strategy, though that is still pretty far off as far as I can tell."
ForeverWintr,Good to know! I am inclined to not spend more time on this right now though. Maybe we can add that to a list of things to update?
vhquang,"Yea, that's fine. I understand this is a minor change."
gettodaze,Good point! But I think I'll just add a comment to that effect because I know other people will complain if they see `len(missing_performance) == 0` :sweat_smile: 
gettodaze,"Yeah, I have that in mind for another update that I'll hopefully get out today."
gettodaze,"I like that, but I actually need `date_min` before I get `all_series` below."
gettodaze,"Yeah, haha I actually avoided using `PTSD` in other modules, but its sat with me for a while now and I've realized its just a word haha."
gettodaze,Hah! I have no idea how this happened! Thanks Charles!
gettodaze,"Ah, that's a good point! I had needed them elsewhere to allow downstream attribute access, but this test actually doesn't need that! Thanks!"
gettodaze,"I occassionally use a script lke this to save performance data for future tests, so I just left it here. I'll add a comment `# use to save performance data for future tests`, but where do you usually put manual processes like these?"
chaburkland,Oh my bad! I checked to see if it was used but I totally missed that.
chaburkland,Yeah that's a good point. I'm not exactly sure what to do. It's probably fine to leave it up to your preference :+1:
ForeverWintr,What if the file extension is `'Csv'`? My inclination in a situation like this would be to just convert *all* extensions to lower case. Doing that is a bit easier if you use python's `pathlib`:  ```python from pathlib import Path  for file in Path(fp).iterdir():     new_file = file.with_suffix(file.suffix.lower())     file.rename(new) ``` 
ForeverWintr,Should 'Just Testing:' still be here?
ForeverWintr,"`required=False` is the default, so you don't need to specify it."
ForeverWintr,"Maybe this help text is out of date? ```suggestion                 ""Flag. Use --upload to upload the files to the static server."" ```"
ForeverWintr,"I think this doesn't need to be in the `with` block, does it?"
ForeverWintr,"Logging can already be configured in cliqc using the `'--log_level'` argument on the command line, so I don't think we want to do it here, too. "
Nradulovich,"We have not seen cases like that, but you are absolutely right. Converting all file extensions to lower case is the best solution. I will refactor the code. But I don't understand the ""file.rename(new)"" part you meant ""file.rename(new_file)"" ?. Thanks"
Nradulovich,"Oops! No, I forgot to take that out. Thanks"
ForeverWintr,"You're right, I meant `file.rename(new_file)`!"
Nradulovich,"But the "" f""{year_mo}"" part is needed to show the latest data available on the subject line of the email. Usually that is all recipients need to know, and they don't even have to open the email."
Nradulovich,Got it. Thanks.
vhquang,"I am not familiar enough with Airflow, to know the effect of this removal. You may want to double check with Tom on this."
vhquang,"Just for my curiosity, I typically see this level of verbosity on code that fails a lot. Is this code fragile, or you just want to track the progress?"
vhquang,"You may want to use `skipna`: ```suggestion         stdev = relevant.std(skipna=False, ddof=1) * annualize_factor         return stdev ```"
vhquang,"I think this can be cleaned up, now that you have better handling of the NaN."
vhquang,"I am curious. Is there a mix of `None`, `nan` in the data? Maybe you can do this: ``` relevant = relevant.fillna(np.nan) ```"
vhquang,"Please clean up this comment when this PR is ready to merge. Or if it can be useful for future reference, let put more description for it."
vhquang,"When you have more time, maybe it is better to place code for each title, main, footer into separate functions. I am guessing this is the result of feature growing. It is fine to leave them here for now."
vhquang,"I wonder why we need to save and load data into file. Doing this, with an non-unique filepath, will prevent us from running multiple tests with this utility concurrently. Can you give more info on the benefit for saving/loading file?"
vhquang,"I think the work done in this code is fast. Only getting test data is slow, but only for the first time. Is that correct, or did I miss any part that would make this test slow?"
vhquang,"I always have hesitation on raw string test, especially with rendered HTML. Any trivial change would cause the test to fail. And the person who fixes the test would need to string diff before they can know the reason why.  I hope you will consider the cost vs the benefit of having such test. I will defer the decision to you."
nekobon,Can you please add a note that this is different from percentile rank?
nekobon,"How about to replace `store_intermediate` with `field_center_values` and `field_spread_values` with None as default? It would be a problem if by any chance the user's score input has `""center_values""` or `""spread_values""` already stored there."
nekobon,Is this market map defined the same way from other strategies market? (using input data rev?)
nekobon,I think you can replace `lambda s: len(s)` with `len`
nekobon,Is this column used?
nekobon,TODO is here
nekobon,Do we want to use this column here even if the build didn't use it? If so this change looks fine to me.
ForeverWintr,That question is what I'd like to talk to you about. This is for rae. Will the build always use pu_rafi_size_single_country?
gettodaze,This change will just have my task run on the default airflow changeset instead of the changeset that I had previously been providing.
vhquang,"The `score_input` used in this function is a transformed with a given prefix (the output will be `mod_z_score_spread_values` and `mod_z_score_center_values`), which I think already namespace and helps us prevent the collision: https://github.com/ResearchAffiliates/invsys/blob/fb09ec87c4c06f1ac0f5121f801be06f0246a826/RAPC/core/measures/factors.py#L438-L451"
nekobon,Ah! That makes sense.
vhquang,"The market map we used in this plugin is defined manually in the code, and separate from the market definition in data input.  https://github.com/ResearchAffiliates/invsys/blob/66e2230eca95885792c0b734e980166a1914b585/RAPC/core/methodology_plugins/plugin_climate_transition.py#L131-L138  The goal back when we decided it, was to isolate the CI score from that definition. So, if we need to move Korea to different region, we can customize it, instead of depend on market definition in data input."
vhquang,"It is used by Joseph to compare intermediate steps, during the validation. I have consideration to remove all QC column in this change, so that people (like Ted won't use it in Kleio). But I don't know when is a good timing for it. The counting actually helps me spot the typo in my code, since the amount don't match my expectation."
vhquang,"Yes, it is currently broken for EMC as note it in the description of the PR. Fixing for EMC would require more thinking. We are now do CI calculation at `process_pre_carve`. This code is inside FossilFuel `process_in_carve` so it is a strange workflow. Maybe the next is moving the CI score into FossilFuel `process_pre_carve`, and only do the screening here.  Also, EMC does not inherit from `CarbonIntensityPlugin` like RMC and GRAFI-C do, so it is weird corner case. I want to resolve it in a separate PR."
nekobon,I had an impression from Ted and Joseph that they want to make sure this definition doesn't change by product (so no special treatment for KR). It might be good to keep it in the module level to enforce that through all climate transition plugin.
nekobon,"I agree that if this is only for validation, we want to remove before building for production. If we need it for any QC purpose after the launch, I propose to put it in the summary file."
vhquang,Thank you for this information. I will move this to the module level.
gettodaze,"Just to track the progress. These show up in the DAG logs, and its nice to just see."
gettodaze,Nice! Thanks for the tip!
gettodaze,"There shouldn't be any `None`s in the data, because the data all comes from a reader that just uses `nan`s. Are you thinking of a case where `None` can slip into the data?  Also, the goal here is just to not do the calculation for any column with missing data, which I just learned from you that I can do with `skipna=False`! So I don't need this assignment line here."
gettodaze,"Are these changes related to this PR, or is this just github not displaying the diff correctly?"
gettodaze,"Oh, cool! Did you find a way to import `teamalloc` in RAPC modules? I haven't been following this change too closely. Is it just a separate private package like `ISLib` etc?"
gettodaze,Why is this change necessary?
gettodaze,"I see, its a github package now."
gettodaze,"Nvmd, this is to add teamalloc, and I assume while you were at it you updated some other packages."
flexatone,"I am sharing this code in both repos and needed to use a built-in Exception in ra-tech. On review, this error is not really an ""RAPC"" exception so it seemed sensible to change it in invsys too."
flexatone,"Right, that is the ""git+https"" move in requirements.txt"
flexatone,"I did bump up a few packages, but teamalloc comesfrom this ""git+https"" move."
gettodaze,"This and the two ""save"" functions in `test_daily_performance` are not used in any other functions; and are just used to manually update test data or manually retrieve data. I added a leading wonder to all of them and a docstring.  The load functions are used to load test data from static (which was saved with these save functions)."
gettodaze,"Yeah, I just marked any test that reads files as slow. What is your criteria for fast/slow?  Also, I forgot that I had to update this test! Right now it tests the test data against itself instead of against data generated by the code, haha. I will updated this."
gettodaze,"Yeah, that's a good point. I like this integration test, but the failure wouldn't be very informative. But couldn't someone just save the result to a test and then do a `git diff -- expected.html result.html` and see a more informative view of the difference? Although you're right, the integration test should be accompanied by some unit-tests to help find the cause of a change. I haven't figured out a good way to write unit-tests for the formatting yet."
gettodaze,"Ah, that is a good idea. I will leave a NOTE to that effect."
Nradulovich,"Hi Tom, I tried Path as you suggested and it worked really well. It is definitely a better option. Thanks."
Nradulovich,You are right. I lined it up with the others
vhquang,"The spacing we saw around the checkbox, is due to the `#toolbar input` CSS set the width to 100%, which fills up all the space. I also think it conflicts with flexbox rule, which expects to pack space to minimal space required for each element. So, I think it is best to unset that width on the toolbox, so flexbox can calculate the element size."
vhquang,"To explain what is being set: - `flex-wrap: nowrap`: having all the items in one line. It doesn't mean nowrap on the inner elements. If one element needs to wrap, that will increase the height for all elements. - `justify-content: space-between`: anchor the beginning and the end items to left and right. - `align-items: center`: vertically align the items to the center of all items."
vhquang,"> What is your criteria for fast/slow?  We use run time for deciding fast/slow. I think less than 1 second will qualify to be fast test. If the test needs to read files, but still less than 1s, then I think we would prefer it to be fast test. Also, if it is only one-time slow (ie: downloading file to cache), I would still consider it as fast. Other people may have different preference than me though."
vhquang,"Feel free to adjust this size. I am setting small size, just to see the effect of wrapping (when the label was still on the left side)."
MadisonAster,perhaps targeted_aum instead of just aum to stay closer to the doc?
MadisonAster,Is this for testing?
MadisonAster,"This seems correct to me based on the equation in the doc, but could you help me understand the `if Volume i,t > 0` and `if Volume i,t <= 0` terms on the right? Is the calling function responsible for implementing this?"
ForeverWintr,"Out of curiosity, why do we `lower()` the vendor name here? If we're just reporting it in a log message, might it be clearer to keep the original case?"
ForeverWintr,"```suggestion                 ""--use_file_download_log"",  # running in batch mode ```"
ForeverWintr,"I think you are missing a comma here.  ```suggestion                 f""--portfolio_ids all"", f""{prod_mode}"", ```"
ForeverWintr,I think it's worth considering not using `call_once` here. Holding the mutable `data_group_map` in the cache could cause confusion if a caller of this function modifies the returned result. 
ForeverWintr,Should this try/except be removed?
ForeverWintr,What does it do with the file_download_log table once it's looked it up?
ForeverWintr,"```suggestion                 help=""Send an email summarizing all errors/warnings"", ```"
ForeverWintr,"This code seems very similar to that in `loader.py`, and similar to there, can this no-op try/except be removed? Maybe some of this common code can go in a utility function?"
ForeverWintr,"```suggestion                 help=""Send an email summarizing all errors/warnings"", ```"
ForeverWintr,"```suggestion def compile_batch_errors(batch_errors: tp.Dict[tp.Tuple[int, datetime.date], str]): ```"
ForeverWintr,Don't you need to `</br>` somewhere?
ForeverWintr,Why do you need to `strip()` the cmd_line here? Shouldn't the command line construction func handle that?
gdevanla,Good point! I don't even remember why I was doing this.
gdevanla,"Good catch, thanks!"
gdevanla,Thanks. again. Good catch. I had this changed from `pass` to `raise` for testing.
gdevanla,"The correct code is to capture this exception and `pass` as we do here. I updated the similar code in the other file to also use `pass`.  Regarding, reuse, I went back and forth on adding this try/except block inside the `monitored_mail_summary' function. But, it felt weird to silently catch and ignore that exception there.  Do you think it is clearer to have it in that function itself?"
gdevanla,"Yeah, it is not required anymore. This is a left-over from how we used to construct the command line. I will remove it. Thanks for pointing that out."
nekobon,"How large is the data? If it's large, it might make sense to put this logic in the query."
gettodaze,"Good idea! It's only 1131 long, but I will do that anyways. There's no use-case for the non-unique (benchmark, portfolio) pairs yet."
gdevanla,Good point. I will get rid of the decorator.
gdevanla,I think it is OK to not have a ending tags for empty element like <br>. Have you seen issues with this otherwise?
ForeverWintr,"Woops, I didn't notice this was a `pass` instead of a `raise`!  It seemed to me that a lot of the code in `loader_returns` was similar to code in `loader`, beyond just this try except block. I was wondering about a utility function that captures more of the code than just the monitored_mail_summary, but I don't understand it enough to have specific ideas, unfortunately. "
gdevanla,"Yes, I agree with common code. But, there are currently subtle differences and I expect this code to diverge (between holdings/returns) as we add more refinements. Therefore, for now I have them as separate implementations even though many of the parts of that function are similar."
ForeverWintr,"No, I haven't seen issues, I was just surprised that you didn't need the ending tags. If you're confident it's ok, that's good enough for me!"
chaburkland,You might consider using `addr_from=ms.get_email_for_process_user()` as it the same thing!
chaburkland,"Just a comment that if you can, it's better to be more specific with the exceptions you want to retry on."
chaburkland,Are you using this manual decorator pattern to allow for the underlying functions to be easily tested?
chaburkland,This f-string isn't doing what I think you want! It's giving back `Date Sensor for task_id='task_id' has failed`
chaburkland,I'm not sure why you have a inner function called `_poke`. It seems to me you could just make `poke` itself an `ms.task`.  One good feature of the new MS design is that `ms.task` can wrap any function that takes any args/kwargs and returns anything.
ForeverWintr,"It was more a mental note to self, as I was comparing my numbers to Ted's. I'll remove it. "
johnjhawk,I have a preference for geu date here.
vhquang,"Yea I remember the suggestion from you and Yu. `trade_date` is more preferable for me, as not need to mentally remember the offset (if we build December portfolio, GEU is some day in November). This is done with a production params in mind. If SI wants to build December portfolio, they would need to put PARC request with `trade_date` in December. So I choose to depend on that."
ForeverWintr,"As I understand it, there are two possible outputs from this calculation. I've sloppily highlighted them in the below image as A and B.  ![image](https://user-images.githubusercontent.com/3046190/126823846-be169551-55ed-4623-9f0f-8ddb861cdd7e.png)    In code I've called A `estimated_trade_size_by_vol`, and B `trade_size_cap`.  The `if Volume i,t > 0 and if Volume i,t <= 0` terms are telling us some criteria by which we choose between A and B:  - If Volume i,t > 0, we take the minimum of A and B - else we take B  In the code I handle this by setting volume <= 0 to `nan` (line 31). This causes the min operation (with skipna=True) to select the non nan element. I started to explain this in the comment, but seem to have lost my train of thought part way through. I've pushed an update.   "
brandtbucher,"```suggestion             columns=(""a"", ""b"", ""c""), ```"
brandtbucher,```suggestion     files: tp.Iterator[Path] = ( ```
brandtbucher,"I like `assert False` better:  ```suggestion         assert False, ""This should be an impossible branch."" ```"
brandtbucher,```suggestion     files: tp.Iterator[str] = ( ```
brandtbucher,"```suggestion                 print(""Unable to get og variable name. "", end="""") ```"
brandtbucher,"```suggestion             f""{name_to_save!r} already exists in the {_KEEP_DIR} cache and `force_overwrite` is set to False. Exiting."" ```"
brandtbucher,"```suggestion             f""{name!r} already exists in the {_KEEP_DIR} cache and `force_overwrite` is set to False. Exiting."" ```"
brandtbucher,"Why did you reformat these three parameter lists? Not a big deal, but I have like 3 DS Price branches right now and I want to reduce conflicts.  (Maybe these are left over from an earlier version of this branch which added additional args?)"
brandtbucher,Thanks for adding these!
brandtbucher,```suggestion         with open(fp) as f: ```
brandtbucher,```suggestion ```
brandtbucher,```suggestion ```
brandtbucher,```suggestion def test_get_raw() -> None: ```
brandtbucher,"This is a bit excessive...  ```suggestion     same_exchange_code = raw.loc[         raw[SDKFields.EXCHANGE_CODE_DS]         == DatastreamExchangesReader.NASDAQ_EXCH_CODE     ]     assert len(same_exchange_code) == 3 ```  Also, what is this even testing? Do we expect this to not change?"
brandtbucher,What is this testing?
brandtbucher,```suggestion def test_get_mapping() -> None: ```
brandtbucher,```suggestion     def test_30_90_median(self) -> None: ```
brandtbucher,"Does this belong in `sf_util`? This would work for pandas too, right?"
brandtbucher,Return type?
brandtbucher,```suggestion ```  Or just delete this file?
brandtbucher,Return type?
brandtbucher,"```suggestion def np_dt(year: int, month: int, day: int) -> np.datetime64: ```"
brandtbucher,```suggestion     def test_get_field_cache_dr(self) -> None: ```
brandtbucher,```suggestion     def test_get_day_ffilled_a(self) -> None: ```
brandtbucher,```suggestion ```
brandtbucher,"Is is possible to revert the changes to this file? It seems like it's almost entirely cosmetic, and will cause lots of annoying merge conflicts for me..."
brandtbucher,"Are we still using this? If so, the names of these classes and stubs should be different. There are four different DS Price readers, and this should only write data for one. Otherwise the static files will conflict."
brandtbucher,Why is this an input file (and not on static)?
brandtbucher,"```suggestion     , Ds2PrimExchQtChg.StartDate ```"
brandtbucher,```suggestion ```
brandtbucher,"Ooh, I really don't like this. Either make a copy for this module, or add this entry in the original definition!"
brandtbucher,"Again (if we're still using this), it should be renamed to reflect that it only reads local daily data."
chaburkland,"My understanding is this file will never change, and it's not related to any reader or any such process that regularly writes to static."
chaburkland,I didn't mean to. I will put this back.
chaburkland,It's saying we expect there to be 3 different exchanges with the NASDAQ exchange code. This is significant because we choose only one of them when we build the unique map.
chaburkland,It's testing that the api that returns a unique map will have set the MIC code for the NASDAQ exchange to be a specific one defined on the class.
chaburkland,"It would work for pandas, but I don't think there's a better file in ISLib to put this in. Can you think of one?"
chaburkland,This is placeholder file for tests I have yet to write.
chaburkland,I didn't really think about the merge conflicts - I'll revert this back.
chaburkland,Actually I'm looking back at it. There were some changes I made to address some un-optimal behavior. I will remove out the cosmetic changes but leave in the changes I think are needed.
chaburkland,"Good catch. This wasn't actually necessary, as it's a redundant definition of that dtype. I will remove this."
chaburkland,"It will be used for sourcing the first alpha GEIU snapshot, although that data was written to `test_data`, not a static directory.  As far as your comment, you're totally write. This is not a permanent solution, as it ignores the 4 other DS writers. I also don't know if this is what we will end up doing. I will make a note here describing the transience of this reader/writer pair."
chaburkland,See my reply above: https://github.com/ResearchAffiliates/invsys/pull/1466#discussion_r675893408
vhquang,This ISIN doesn't seem to have any information: ``` <Index>                         16128                           62164                  <int64> <Index> CarbonRiskRating                70                              -1 ClimateTotalEmissions           1138218.0                       nan ClimateScope1Emissions          262445.0                        nan ClimateScope2Emissions          875773.0                        nan ClimateScope3Emissions          2932049.568                     nan ClimateCNIEmissionsSource       CDP                             nan Ticker                          STX                             nan CountryOfIncorporation          Ireland                         nan PowGenCapacityRenewableRatio    0.0                             nan PowGenCapacityThermalRatio      0.0                             nan PowGenOutputNuclearGWh          0.0                             nan PowGenOutputOthersGWh           0.0                             nan PowGenOutputRenewableGWh        0.0                             nan PowGenOutputThermalGWh          0.0                             nan AsOfDate                        2021-06-30                      2021-06-30 IssuerID                        537329                          3401186 IssuerName                      Seagate Technology Holdings Plc Seagate Technology Plc ISIN                            IE00BKVD2N49                    BRS1TXBDR005 CUSIP                           G7997R103                       G7945M115 SEDOL                           BKVD2N4                         BJ9RYC4 NBSOverallScore                 5                               -1 NBROverallSeverityIndicator     Moderate                        nan TobaccoServMinRev               nan                             nan TobaccoProdMaxRev               nan                             nan TobaccoServMaxRev               nan                             nan TobaccoRevShareInterval         nan                             nan APMinesOverallFlag              nan                             nan BiologicalWeaponsOverallFlag    False                           False ChemicalWeaponsOverallFlag      False                           False CivFADistMaxRev                 nan                             nan CivFAProdServMaxRev             nan                             nan ClusterMunitionsOverallFlag     nan                             nan DepletedUraniumOverallFlag      nan                             nan IncendiaryWeaponsOverallFlag    False                           False MilitaryEqmtProdServMaxRev      nan                             nan NuclearWeaponsNonNPTOverallFlag nan                             nan NuclearWeaponsOverallFlag       nan                             nan WhitePhosphorusOverallFlag      nan                             nan CoalMiningRevShareMinTotal      nan                             nan CoalMiningRevShareMaxTotal      nan                             nan CoalMiningRevShareMaxThermal    nan                             nan CoalMiningRevShareMinThermal    nan                             nan CoalMiningAndPowGenRevShareMax  nan                             nan CoalMiningAndPowGenRevShareMin  nan                             nan FossilFuelCoalPowerRevShareMax  nan                             nan FossilFuelCoalPowerRevShareMin  nan                             nan OilSandsRevShareMax             nan                             nan OilSandsRevShareMin             nan                             nan OilSandsExplMaxRev              nan                             nan OilSandsExplMinRev              nan                             nan GamblingProdMaxRev              nan                             nan GamblingServMaxRev              nan                             nan FossilFuelRevShareMax           nan                             nan OilSandsProdMaxRev              nan                             nan ESGRatingOverallNumeric         2.547                           nan EnvRatingNumeric                2.653                           nan SocRatingNumeric                2.3                             nan GovRatingNumeric                2.997                           nan ESGRatingDecileRank             1                               -1 CRScPolicyNonDiscriminationNum  4.0                             nan CRScMeasuresDiversityNum        2.0                             nan CRScGenderDistributionNum       2.625                           nan BoardSize                       11                              -1 NumWomenOnBoard                 2                               -1 PctWomenOnBoard                 18.1818                         nan ```
gdevanla,These underlying functions are dynamically discovered. Wrapping each concrete instance of this function may be redundant. 
gdevanla,"Um. Not sure what you mean here. Do you mean as a decorator?  Just that there were 2 config objects I had to create meant that the decorator would be multiple lines. Therefore, I decided it would be more easier to read if I have the wrapping inside the function."
gettodaze,This is a cool way of building up the CliqcTool CLIs!
gettodaze,"Just wondering, is this arg parser different from the arg parser for the Cliqc tool?"
chaburkland,"Yeah I meant as a decorator. I think that having the decorator outside the function indicates to the reader right away that the function is a monitored process. When it's at the bottom, you have to read the whole function before you see the greater context `poke` is in.  I see though that mail_args is using the `context` argument from the function, so I see there is possibly some other value to having it follow this non-standard decorating approach."
gdevanla,Sounds good. Agreed with your point on the decorator part. Given the dependence on the context I will leave it this way for now.
ForeverWintr,"Yeah, it's a cool interface!"
ForeverWintr,"It is. Kleio has its own CLI (`portcullis/apps/kleio.py`), which is a bit more flexible than `cliqc`. "
brandtbucher,"```suggestion     force_overwrite: bool = False, ```"
brandtbucher,Is this still the case? It *looks* like it's supported...  ```suggestion ```
brandtbucher,"Personal preference, but I like this form better:  ```suggestion         return map(self.co_table, dates) ```"
brandtbucher,"Ditto:  ```suggestion         return map(self.sec_table, dates) ```"
brandtbucher,"This strikes me as sort of an odd method. Why can't users just call `Frame.from_concat` themselves?  Or, if it's *really* needed a lot, move it to `sf_util` or `geiu_util`?"
brandtbucher,```suggestion     @staticmethod     @lru_cache(maxsize=1)     def _get_reader(         as_of_date: datetime.date ```
brandtbucher,"Why did you disable the line wrap here? I think it can be just as clear as:  ```suggestion         sedol = geiu_util.filter_day(self._sedol_history, date)         isin = geiu_util.filter_day(self._isin_history, date)         cusip = geiu_util.filter_day(self._cusip_history, date)         sedol = sedol.set_index(SDKFields.GVKEY_IID)         isin = isin.set_index(SDKFields.GVKEY_IID)         cusip = cusip.set_index(SDKFields.GVKEY_IID) ```  I personally think disabling the formatter should be reserved for things like complicated math expressions, not line breaks. If the line is too long and you don't like the way it wraps, just split it up!"
brandtbucher,"This is sort of weird, and hard to keep track of (especially since they're used interchangeably). I'd say just pick one name and stick to it."
brandtbucher,"Does this need to be a closure? You can define this outside the function and just pass the necessary args (`day`/`end` and `vol_history`) into it, right? Then it can be tested separately or reused."
brandtbucher,"🙄  I guess this is okay here, haha."
brandtbucher,```suggestion     def test_get_field_cache_dir(self) -> None: ```
brandtbucher,This can be module-level (or maybe dumped into `date_util`?)
brandtbucher,Type hints here would be *really* nice.
brandtbucher,Maybe just get rid of `process_sec` and inline it inside of the loop here?
brandtbucher,```suggestion ```
brandtbucher,"Do we have symbolic constants for `""ExchIntCode""`, `""ExchCtryCode""`, and `""MIC""`?"
brandtbucher,"I *think* maybe this change should be reverted.  - Why are you reordering the columns? - That early return is there for a reason. I found that the `astype` call below costs time and memory, surprisingly.  ```suggestion             frame = Frame.from_concat(frames, columns=columns, index=IndexAutoFactory)         if frame.size:             return frame ```  I could be wrong, though. We can talk about this if you want."
brandtbucher,Nice!
brandtbucher,This seems like a pretty important `TODO`...
brandtbucher,This is sort of scary to cache. Is this really expensive enough to justify caching? ```suggestion ```
brandtbucher,```suggestion ```
brandtbucher,Maybe rename this to `filter_day_sdk` or something?
brandtbucher,Symbolic constants?
brandtbucher,Here too...
brandtbucher,Is this coming from `arraykit`?
brandtbucher,These type hints aren't necessary:  ```suggestion         self.fp = fp          frame = sf.Frame.from_pandas( ```
brandtbucher,"Again, is this mutable dictionary really expensive enough to cache?  ```suggestion ```"
brandtbucher,Symbolic constants for `298` and `307`? They seem really important but aren't given any explanation...
brandtbucher,"This formatting confused me at first:  ```suggestion                 , a.EndDate             DESC ```"
brandtbucher,"This whole function could use a symbolic constant for `""DSLocalCode""`."
brandtbucher,```suggestion ```
brandtbucher,Why?  ```suggestion ```
brandtbucher,"This is *super* confusing for me to follow (we're iterating backwards using a while loop, and it's not clear why we're using `final_sec_ids` to calculate `i` or why the initial `i` calculation is in the context manager or why we're `del`'ing `s`).  And `del`'ing `s` shouldn't reduce your peak memory usage, since you have the array and the whole `series_list` in memory before entering this loop...  I *think* this is equivalent... `final_sec_ids` and `series_list` have the same length, right?  ```suggestion         for i, s in enumerate(tqdm(series_list)):             arr[:, i] = s.reindex(date_index, fill_value=fill_value).values ```"
brandtbucher,"```suggestion     def write(self, exist_ok: bool = False) -> str: ```"
brandtbucher,Why?
brandtbucher,```suggestion         with open(fp) as f: ```
brandtbucher,"```suggestion         frame = sf.Frame.from_sql(query=sql, connection=self.connection) ```"
brandtbucher,"Not a big deal, but I find the unrolled version a bit easier to follow:  ```suggestion         frame = frame.assign[""MIC""](frame[""MIC""].fillna("""").astype(str))         frame = frame.assign[""PrimQtInfoCode""](frame[""PrimQtInfoCode""].fillna("""").astype(str)) ```"
brandtbucher,```suggestion ```
brandtbucher,```suggestion ```
brandtbucher,```suggestion     def get_sql(self) -> str: ```
brandtbucher,```suggestion         with open(fp) as f: ```
brandtbucher,"```suggestion         frame = sf.Frame.from_sql(query=sql, connection=connection) ```"
brandtbucher,```suggestion     def write(self) -> str: ```
brandtbucher,"Maybe make this a private `classmethod`, and pass `date_start` and `as_of_date` as arguments?"
brandtbucher,"I think we usually import `get` from `uroborus.core.test_data`...  ```suggestion from ISLib.compat import slow from papyri.core.fields import (     SDKFieldDtypes,     SDKFields, ) from papyri.core.symbology_security_info import SymbologySecurityInfoReader as Reader from papyri.core.writers.symbology_security_info import (     SymbologySecurityInfoWriter as Writer, ) from uroborus.core.test_data import get ```  You do this in a few of the other test files too. It's not a huge deal, but I was confused at first why we were doing that in a non-public test."
brandtbucher,This confused me at first...  ```suggestion     assert 100_000_000 < num_rows < 150_000_000 ```
brandtbucher,"This is sort of a strange design to me, and it makes reading the *actual* resource class definitions really confusing.  Basically, it seems like you're not *actually* inheriting anything from these classes except `FN_EXT = "".txt""`. Why don't you delete these classes, just inherit the concrete resources directly from `ABCDataResource`, and add the `FN_EXT = "".txt""` to each one explicitly? Then the members defined in `BaseDatastreamMappingResource` (`COLUMNS`, `COLUMNS_REMAP`, and `DTYPES`) can just become module-level constants (which is how you're really using them anyways...).  I think that's a lot more straightforward to understand!"
brandtbucher,"(For all of the resources that follow...)  Does order matter to these fields? If not, I would reverse the order of the key-value pairs and the star unpacking, so that the star-unpacking happens *first*. That way conflicting names don't get silently overwritten with the default values."
brandtbucher,"Maybe clearer as:  ```suggestion     valid_countries = {"""", *CountryISO2}     for country in frame[         [SDKFields.COUNTRY_DOMICILE, SDKFields.COUNTRY_INCORPORATION]     ].iter_element():         assert country in valid_countries ```"
brandtbucher,"```suggestion     def co_table(self, date: datetime.date) -> sf.Frame: ```"
brandtbucher,"```suggestion     def sec_table(self, date: datetime.date) -> sf.Frame: ```"
brandtbucher,"```suggestion     def _get_table(self, date: datetime.date, prefix: str) -> sf.Frame: ```"
brandtbucher,"```suggestion     def from_as_of_date(cls, as_of_date: datetime.date, suffix: str = """") -> ""WorldscopeGEIUMonthly"": ```"
brandtbucher,"Can this be refactored? It's pretty tough to follow. Maybe:  ```suggestion         dates = []         for s in self._bus.index:             if s.startswith(self.RESOURCE.PREFIX_CO):                 s = s.replace(self.RESOURCE.PREFIX_CO, """")                 dates.append(np.datetime64(s).item())         self.dates = tuple(sorted(dates)) ```"
brandtbucher,The formatting for indentation and comments in this file is pretty wonky. Maybe clean it up a bit?
brandtbucher,"You're not really using `self` here, and you're constructing a lot of unnecessary sets. Maybe:  ```suggestion def assert_resource_valid(resource) -> None:     assert resource.COLUMN_REMAP.keys() <= set(resource.COLUMNS)     assert set(resource.COLUMN_REMAP.values()) <= resource.DTYPES   def test_resource_validity() -> None:     assert_resource_valid(DatastreamSymbologyMappingResource)     assert_resource_valid(DatastreamCompustatMappingResource)     assert_resource_valid(DatastreamWorldscopeMappingResource)     assert_resource_valid(WorldscopeCompustatMappingResource) ```"
brandtbucher,Why do both of these tests need their own readers? Can't we just reuse `reader_a`?
brandtbucher,"Copy-paste error? Shouldn't make a difference, but still...  ```suggestion     expected = expected.sort_values(expected.columns).relabel(index=sf.IndexAutoFactory) ```"
brandtbucher,Why do you do this step if you're going to compare the whole things later anyways?
brandtbucher,"```suggestion     assert comp.frames_equal(ignore_dtypes=True), comp.summary ```"
brandtbucher,"Uh, this comes across as just kind of lazy, haha. Maybe just expand the usages inline? Not a big deal, though."
brandtbucher,"Can this be cleaned up a bit? The indent/comment formatting is sort of all over the place, and there are lots of ""magic"" numbers that probably deserve symbolic constants..."
brandtbucher,"I find this easier to read without the extra parens:  ```suggestion                 for col_name, (_, values_arr) in query_result.items() ```"
brandtbucher,```suggestion             if (first != next_index).any(): ```
brandtbucher,"`iterator` isn't an iterator... it's a list. Perhaps you meant `pool.imap`?  ```suggestion             iterator = pool.imap(                 cls.query_col,                 enumerate(queries_and_dtypes_and_num_rows.values()),  # Peak ~27GB             )              d = {}             for col_name, arrays in zip(queries_and_dtypes_and_num_rows.keys(), iterator):                 arrays[0].flags.writeable = False                 arrays[1].flags.writeable = False                 d[col_name] = SeriesIngredients(*arrays) ```"
brandtbucher,"```suggestion     ) -> tp.Tuple[np.ndarray, np.ndarray]: ```"
brandtbucher,`position` is super cool! I also like your disabling mechanism.
brandtbucher,No need to pass `1` here:  ```suggestion                 pbar.update() ```
brandtbucher,"Here's a fun one:  ```suggestion                     index_arr[idx], values_arr[idx] = row ```"
chaburkland,"It is. The API is setup for it, but it's not being used anywhere. I'll update the comment to be more clear."
chaburkland,@nekobon Do you have more insight on this?
chaburkland,I will remove them
chaburkland,Good point
chaburkland,I'm not sure what you mean?
chaburkland,These are being remapped from the raw file to symbolic constants. I'm not sure what you are asking exactly?
chaburkland,"The `columns` isn't a reorder, it's to ensure the names are correct. I found that sometimes the method would give back `__index0__` for the first column.  Won't `frame.size` evaluate to True every single time the frame is non-empty, meaning the astype call never happens? I think the existing code is a bug. Unless I'm missing something?"
chaburkland,Thanks! It wasn't actually... I'll fix this.
chaburkland,I don't actually know! And I'm not able to recreate it so it might have been an artifact from working on this earlier. I'll remove the context manager.
chaburkland,~We do this in a lot of readers I think. Why is this scary?~  Ah I see. Yeah I'll remove this.
chaburkland,More information is in the documentation. I'll add some local constants though
chaburkland,"I'm not sure I like that. The `ASC`/`DESC` keywords are applicable to each element of the `ORDER_BY` clause. In the way I'm structuring this, putting `DESC` on the same level as `ORDER BY` would be inconsistent."
chaburkland,Thanks for seeing this. It was an artifact from how I was doing it before - I'll remove it
chaburkland,"The reason is because this is a **VERY** heavy writer. With peak memory usage between 50-60 GBs.  The reason for the while loop, is to allow us to pop off each series from the list so we can throw away each series as soon as we've reindexed and grabbed out its values. This approach allows me to start shedding memory as soon as possible.  Reverse-iteration is because popping off the back of an array is `O(1)`, whereas popping off the fron is `O(N)`"
chaburkland,This is an artifact. I'll remove
chaburkland,Hmm - I'm don't like how that looks. I'm going to leave it as is
chaburkland,I like that
chaburkland,"TBH I don't think it matters, but I'll go ahead and change it"
chaburkland,"The benefit of using the resource classes though is for their namespaces. Otherwise, you end up with a lot of module-level constants? ```python common_columns = (...) common_column_remap = (...) common_dtypes = (...)  ds_sym_map_columns = (...) ds_sym_map_column_remap = (...) ds_sym_map_dtypes = (...)  ds_cs_map_columns = (...) ds_cs_map_column_remap = (...) ds_cs_map_dtypes = (...)  # etc... ``` I'm not sure if that makes it better. I could be convinced though!"
chaburkland,Good catch!
chaburkland,Awesome!
chaburkland,This is a good improvement. I had copied this from Compustat so I didn't look at it too closely. Thanks
chaburkland,"Hmm. I don't really want to lol - this is copied & pasted straight from the SDK documentation. Also, I actually really like this formatting :eyes: "
chaburkland,I like this - thanks
chaburkland,Good catch
chaburkland,Haha. I'll remove
chaburkland,Haha
chaburkland,"This is almost exactly copy/pasted from the SDK documentation. I'll add a comment with a link in case the user cares more about the ""magic"" numbers. The goal here is to test the query from the documentation versus the approach the writer takes."
chaburkland,Potato potato.
chaburkland,"That's true. I think I wanted to exercise two different snapshots, but it's a bit unnecessary"
brandtbucher,Uppercase?
brandtbucher,"```suggestion     FIELDS: tp.Tuple[DSField, ...] = ( ```"
brandtbucher,One of the only cases where I like unnecessary parens:  ```suggestion         day_exists = (obs_day == day) ```
brandtbucher,Should these be `TypeError` and `ValueError`?
brandtbucher,"I'd flip the logic here:  ```suggestion         if not needs_precalculating:             return         # TODO: Update at the end!         days = tuple(needs_precalculating)         self._dates_already_precalculated.update(days) ```  Also, make sure that `TODO` happens!"
brandtbucher,"A bit cleaner this way:  ```suggestion             if not all(self._exists_in_cache(field, day) for day in days): ```"
brandtbucher,"```suggestion         # 1 <= num_workers <= 4         num_workers = max(             1, min(4, np.floor(psutil.virtual_memory().available / 1e10))         ) ```"
brandtbucher,I'd check if this usage of `maxtasksperchild`actually reduces peak memory usage?
brandtbucher,"There's a lot going on here. I'd break it up:  ```suggestion         keys = (f.name for f in self.FIELDS)         args = zip(self.FIELDS, repeat(day))         with Pool() as pool:             values = pool.imap(self._load_cache_series, args)             prices = dict(zip(keys, values)) ```"
brandtbucher,This date seems important. Maybe make it a named constant?
brandtbucher,"Don't love the name ""tmp"" here, but I can't think of anything better..."
brandtbucher,Ditto.
brandtbucher,This is a pretty big f-string. Maybe break out the calculated parts into local variables?
brandtbucher,"```suggestion         china_a_cos = frozenset(             sec.loc[sec[SDKFields.CHINA_A], SDKFields.WS_PERM_ID_CO].unique()         )         valid_unit_cos = frozenset(             sec.loc[sec[""valid_unit""], SDKFields.WS_PERM_ID_CO].unique()         )         valid_local_cos = frozenset(             sec.loc[sec[""valid_local""], SDKFields.WS_PERM_ID_CO].unique()         )         valid_dr_cos = frozenset(sec.loc[sec[""valid_dr""], SDKFields.WS_PERM_ID_CO].unique()) ```"
brandtbucher,Why is this date hardcoded?
brandtbucher,"Why do you use `__name__`? Are the names of the readers different from what you've put here?  ```suggestion         logger.info(""Loading SymbologySecurityInfoReader"")         return SymbologySecurityInfoReader(get(symbology_security_info_fp_id)).frame      @CachedProperty     def _symbology_company_info(self) -> sf.Frame:  # Indexed by ORG_PERM_ID. ~4 GBs         logger.info(""Loading SymbologyCompanyInfoReader"") ``` "
brandtbucher,"So this whole function is pretty hard to wrap my head around, since: - It includes two non-trivial closure functions. - Both of those functions have local names that conflict with the outer local names (I can't tell if they're *actually* closing over any outer names). The scoping for `co`, `missing_info`, and `fill_from_country_exchange` is a nightmare to keep track of, haha. - We're using the prefix ""co"" to mean something other than ""company""!  Can you refactor it? Ideally to choose a different prefix than ""co"" and to define these two helper functions at class level?"
chaburkland,Potato potato
chaburkland,Ah I like this a lot better - thanks!
chaburkland,I don't know what to call it! This is just straight from the documentation: http://centcon01-prd-i:5009/Technical+DocumentationSDK/data/worldscope_datastream/worldscope_datastream_geiu.html#china-a-inclusion-factor
chaburkland,`to_aggregate` > `tmp` :+1: 
chaburkland,"I do it this way to ensure that if someone renames these readers, these log messages don't go stale. They will raise a `NameError` if the programmer forgot to update them."
chaburkland,"Yeah it's not a great function. I will get rid of the `co` prefix since it's confusing. I'll also temporarily fix the name conflicts. I'm going to hold off on the core logic/design, as it's going to change here shortly once I get direction from Forrest/Xi."
chaburkland,It's related to how I was originally retrieving these files - everything was hardcoded. I can remove this however since I moved to using `test_data.get`
brandtbucher,"Hm, yeah. I guess it's fine here."
brandtbucher,"Well, we can delete the `pass` statement at least.  But if we're not going to add at least one test, I think we should just wait to create it."
brandtbucher,"I'm saying `NAT` should be added to `date_util`, and accessed here as `date_util.NAT`.  It seems like it could be useful to lots of other code!"
brandtbucher,"My bad, I got the precedence of `DESC` wrong!"
brandtbucher,A *slightly* more efficient potato! 😉
brandtbucher,"Hm, okay. I thought we were trying to stop storing data files in our repo, but maybe this falls more into the category of ""business logic"" than ""data""."
chaburkland,Oh... yeah I like that. I think the hardest part will be advertising it's there! But yeah I will put it in `date_util`
gdevanla,Is the intent of using `Enum` here where mostly these are symbolic constants to be able to iterate over the fields later?
gdevanla,Is this argument more for testing? Are there time where you will not be loading the composites?
gettodaze,"Yeah, its used in testing but also used to support revisions prior to the `MIN_COMPOSITE_VERSION`: ```python3     @classmethod     def from_revision(cls, revision: int) -> ""RapidFactory"":         ...         load_composites = revision >= cls.MIN_COMPOSITE_VERSION         return cls(fp, load_composites=load_composites) ```"
gettodaze,"I like to have these constants grouped together, but I actually never am quite sure when to add an `Enum` class for constants vs a regular class. Which do you prefer? I only really iterate over these values (if at all) in my tests."
gdevanla,"Sure, typically `Enums` are used to pick between one value or the other. Here, I think we are re-purposing them to iterate, which is a side-effect on using `Enum`. I do not have a better solution to make these fields accessible through iteration. Therefore, it is ok to leave it there. Maybe a comment would help?"
chaburkland,This typehint is incorrect. What you want is: `**audit_fields: tp.Any`. That's because by definition `**` arguments are dictionary of str to something. So you only have to typehint the value type of the dictionary
chaburkland,This applies to the other typehints in this file as well
chaburkland,"I see the suppression comments, but I think a comment/docstring would be more helpful since I don't know why these arguments are needed"
chaburkland,Are you going to inherit this class? I guess I'm not sure why you are defining this dictionary when you could just call `convert_from_pct` instead of retrieving it from this dictionary
chaburkland,Unless there's an interface the expects a dictionary that I don't know about!
chaburkland,Can you put these above all the method definitions?
chaburkland,"I think the typehint is wrong, since `data_group_attr` cannot be `None`, or this will fail."
chaburkland,`signle` -> `single` :upside_down_face: 
chaburkland,Nice!
chaburkland,"I know you're probably going to be the only user of this for awhile, but you should probably remove update this local path definition to be user-independent."
chaburkland,"I know you said this method is adhoc, but I really don't like this huge bare try-except block. I think it's worth re-factoring this before merging to default."
chaburkland,"This argument name is confusing. It says it will upload, but the branch is only downloading. Perhaps this argument should be `download_from_static`?"
chaburkland,Same note as before
gdevanla,"Interesting. I still don't get why the type hint is wrong. What we have materialized at this point is a tp.Dict[str, tp.Any], correct?"
gdevanla,"yeah, this function has been a  little pain for me as well. I plan to clean up this usage in the next PR. For now, I will leave this as is. Thanks for pointing that out!"
gdevanla,"Ha. Yeah, this method is wild. I only plan to run this once as soon as I merge this PR. I will move these pieces to sketch or another module to avoid confusion."
gdevanla,"Agreed. The name is confusing. We do all three operations!  download_from_bbg, upload_to_static and download_to_static.  I will make a note and updated the name accordingly."
gdevanla,Would `source_file_from_bbg_to_static` clarify that?
gdevanla,"Yes, the interface expects this dict to be defined and calls into the callables that are values in this dictionary."
gettodaze,Hi @nekobon this is the main function I'm hoping for feedback on.
chaburkland,"What your typehint is technically indicating is that the value of each `audit_fields` parameter _is itself_ a `tp.Dict[str, tp.Any]`.  So, for example, the expected type of `audit_fields[""some_paramter_name""]` would itself be a string-keyed dictionary with value `tp.Any`.  When you typehint `**` arguments, you only need to typehint the values themselves.  This is the same as how `*` arguments are typehinted. If you do this, `*args: tp.Tuple[float]`, what you are saying, is that each element of `args` is a tuple of floats. If each arg is itself a float, all you have to do is this: `*args: float` "
chaburkland,I think it's better! A docstring would also help too
nekobon,I think you want to use the new symbolic constant available as the methodology's class attribute
nekobon,"Do you get different results if we change this logic as ""all companies with defined pu_country""? I'm trying to see if we can remove six_regions dependency here"
nekobon,Is this used?
nekobon,"This is available as the methodology's class attribute, too"
nekobon,We can use `SubIndex.LM` here
nekobon,There is `ISLib.finance_util.BPS`. It would be nice to use it for readability
johnjhawk,Nope!  I'll remove it.
johnjhawk,good call.
johnjhawk,"that would be great, but I get 24 bps of TO"
johnjhawk,"yep, I'll use it"
johnjhawk,"that a great tip. I'll use it in the future, but this is 5 one hundredth of a BPS, so it may be just as confusing to divide BPS by 10,000."
nekobon,"How about when you use the single country `psu.country_group_prefix + psu.single_country_suffix`? pu_country is not stable, so it might cause the difference."
nekobon,How about `0.05 * BPS`? I think it's a bit easier to read than `0.000005`
johnjhawk, I like it
flexatone,I like to store my `datetime.timedelta(days=1)` as a class or module attr rather than recreating for each call. A very small optimization!
flexatone,Nice use of bisect!
flexatone,`index[0] - 1` is a little mysterious to me... a comment might help!
flexatone,"`valid_to` is inclusive here, right?"
flexatone,Can `get_series_from_rapid()` always rename the Series such that you do not have to do it after the function call?
gettodaze,"Yes, I can see how my previous comment was confusing. I'll update it to be: ```python3 # child.valid_to is specified as exclusive, valid_to is inclusive valid_to = child.valid_to - one_day ```"
gettodaze,"Yeah, sorry, I should've made that change a while ago!"
gettodaze,"Thanks for pointing that out! `index[0]` was a datetime64[D], so `index[0] - 1` gives the day prior. However, what I actually want here is the day of the first level. I updated the function to store the first day and use that as the initial label."
flexatone,I did not realize you could just subtract an integer from a datetime64!
gettodaze,Oh yeah! I think I learned that maybe from Tom's code review last week.
johnjhawk,"as we discussed please make a note about these ""__index0__""s"
johnjhawk,namedtuple?
chaburkland,I like this suggestion.
chaburkland,I'll add a comment
brandtbucher,"```suggestion     def get_column_sec_ids(self, column: str) -> tp.Tuple[int, ...]: ```"
brandtbucher,"Clearer to me as:  ```suggestion         return tuple(int(f.name) for f in Path(self._source, column).iterdir()) ```"
brandtbucher,"```suggestion                 pool.map(self._load_dates, args, chunksize=100) ```"
brandtbucher,```suggestion                 np.array(list(data_dates)) ```
brandtbucher,How much speed does this _really_ give us?  I really don't like using ints for dates if the speed improvement isn't life-changing (like 2x or something).
brandtbucher,"I believe the current implementation will fill these columns with `NaN`. I think CRSP does, too. We should keep that behavior if so."
chaburkland,Okay. I will add in handling for this
chaburkland,"Everytime I change this to use datetime arrays, everything gets slower, and my memory overhead gets a bit higher. For your sake, I'll run a few tests to get some meaningful benchmarks, but from my experience, the `int32` cast is well worth the additional layer of internal complexity"
chaburkland,"Okay I finished running some tests.  For the following extreme case (i.e. 15k dates & 150k securities): ```python reader = DSPriceLocalDailyCore.from_year_and_month(2021, 6) reader.read_wide(SDKFields.PRICE_CLOSE_ADJ) ```  Using `int32` took 15.5 minutes. Using `datetime64[D]` took 17.5 minutes. Both runs had a peak memory usage of ~28 GBs.  Granted this is not as significant of a speed improvement as I thought, but I still heavily lean towards keeping it, as anything that reduces the overhead of this function is a win worth keeping. Plus, imo, the complexity of a few extra astypes is not too burdensome."
MadisonAster,Typehint?
MadisonAster,Typehint?
MadisonAster,test for CommodityInitializer.add_commodity_attrs ?
MadisonAster,Maybe the section wrapped in this try/except block should be in a separate method? Also a more explicit exception could be nice.
MadisonAster,Typehint?
MadisonAster,Typehint?
MadisonAster,Typehint?
MadisonAster,Typehint?
MadisonAster,The first half of add_currency_attrs is the same as the first half of add_commodity_attrs. Could these share the same function which could take the seed file and label as arguments?
MadisonAster,Typehint?
MadisonAster,Could this inherit from CurrencyHistory and add the extra columns rather than repeating?
MadisonAster,Could this inherit from CommodityHistory and add the extra columns rather than repeating?
MadisonAster,Could this inherit from CurrencyHistory and add count_index_members and member_weight_history rather than repeating?
gdevanla,"Yeah, they are similar. But, these functions are one-off scripts I have been copy/pasting across modules.  We don't plan on using these functions after running it just once to load initial data."
gdevanla,"Well. We wouldn't want to tie in these two classes just because they share attributes. If there was some functionality they share, then may be we could have helper functions and then may be consider a inheritance hierarchy. At this point, Currency and Commodity are entirely different entities and tying them to a base class could lead to unnecessary coupling.  I am happy to chat with you if you would like to discuss further on this."
brandtbucher,This seems unrelated. Why?
brandtbucher,This is already a `dict`.  ```suggestion         if field in DTYPES_REQUIRED: ```
brandtbucher,"We can still check this, right?  ```suggestion             field = ""mcap_sec_adj"" ```"
brandtbucher,This test name seems incorrect to me.
brandtbucher,```suggestion         if field in DTYPES_REQUIRED: ```
brandtbucher,"```suggestion             field = ""mcap_sec_adj"" ```"
brandtbucher,"```suggestion         assert set(post.columns) == {*DTYPES_REQUIRED, field} ```"
brandtbucher,Should we add an `SDKFieldMissingValues` entry for `CURRENCY_LOCAL`?
brandtbucher,"Do we ever expect this to happen? If not, it's probably clearer as an `assert`."
chaburkland,"While I was iterating on this change, this `rmtree` bit me really hard by silently blowing away all of the work I had already pre-calculated when I encountered a SQL bug that I needed to quickly fix before re-running.  In a production context, there should never be an existing folder, so I think it's way better to raise than silently `rmtree`.   I think this is valuable, as it gives the developer more control as they're working on this, instead of silently wiping away potentially hours of computation/querying time. If you've made a change that invalidates all the existing files written, you can remove it yourself. If you've made a change that doesn't invalidate everything and you want to ""pick up where you left off"", you can do this. The default `rmtree` removes that flexibility."
chaburkland,Yeah that's a good point - I'll add.
chaburkland,"No there is more code that breaks. There some dtype lookups from dictionaries that use the SDKFields symbolic constant, so this rename won't work unless I mock a bunch of stuff, but that didn't feel worth it to me."
chaburkland,Same as above
gdevanla,"Thanks for pointing that out. Again, this function is a one off script. I use this as bolier plate code as I progress for each asset class. Keeping this course is beneficial in this case."
brandtbucher,"> In a production context, there should never be an existing folder.  There will be if we start sourcing the data and it fails for some reason, and it re-runs on the same worker. The `rmtree` ensures that we're always starting from scratch."
chaburkland,Hmm okay. I'll revert it back.
brandtbucher,"Have you used these before? They're great for debugging/logging!  ```suggestion         logger.info(f""{execution_date=}, {context=}"") ```"
brandtbucher,"Ditto:  ```suggestion                 f""{execution_date_utc=}, {execution_date=}, ""                 f""{self._imcron_date_config_cls=}, {context=}"" ```"
brandtbucher,"Ditto:  ```suggestion             f""{execution_date_utc=}, ""             f""{execution_date=}, {context=}"" ```"
gdevanla,Great. Thanks for the suggestions. I usually forget which version of Python we are on and therefore did not reach out to that feature. I like that feature as well!
brandtbucher,"Pretty sure all of these lines can just be:  ```py frame = frame_from_parquet_with_date(arg.fp, index_depth=1) series = frame.iloc[:, 0]  # Do you need an astype(arg.dtype) here? I don't think so... ```  We do this sort of move all over the place, which is why we have the helper function."
chaburkland,Good point. There's a few places I can use this to simplify the code a bit.
gettodaze,"```suggestion - **Order Requirements**: We may want to order columns in the table differently than is natural based on their data source. Simlarly, we may sometimes want to include the underlying data used for a comparison (e.g., the new and old portfolio weights below), and other times exclude it and only show the calculation result. This often leads to special cases, and a final sorting step to put the table into the desired order. ```"
gettodaze,> we once took down a test run by filling a global cache with ~100 GEIUs  I appreciate occasional asides like this!
gettodaze,A link to the SO post might be nice here.
vhquang,TODO remove
vhquang,Set `ci_ref_distribution` to None.
vhquang,Check to make sure only one of those fields exists in the build.
vhquang,reduced_prev_target
vhquang,reduced_baseline
vhquang,To think: - baseline reduction multiplier - baseline multiplier
vhquang,Put this patch into a function.
nekobon,What does MLP mean?
nekobon,Should we avoid overwriting python's `id`?
nekobon,"This is very minor point, but if date doesn't matter, should we use a fake one instead of now?"
nekobon,This inheritance and class attributes look hardcore!
flexatone,"RMS more is a type of what we call ""Multi-Factor"" strategy. A factor might be a signal (like momentum) but not all factors are signals. Also, RMS itself is not a product, but rather a collections ""sleeves"" we combine to build other products. Finally, all of our products can be distributed in many forms, of which ETF is only one. there is no RMS ETF, so I would remove it from here."
flexatone,"These can be but are not essential ETFs, so I would remove this from the definition."
flexatone,Same here regarding ETF.
flexatone,Why is this relevant to our work?
brandtbucher,"Since this test isn't in `public`, the `uroborus` import is fine.  "
brandtbucher,"Same here. Just importing the ""normal"" `get` and `slow` from `uroborus` is okay."
brandtbucher,```suggestion def test_writer_succeeds() -> None: ```
brandtbucher,```suggestion def test_reader() -> None: ```
brandtbucher,Just curious... why are we renaming this field?
brandtbucher,"```suggestion     def get_ra_field_to_vendor_map(cls) -> Dict[str, str]: ```"
brandtbucher,"```suggestion     def get_vendor_to_ra_field_map(cls) -> Dict[str, str]: ```"
brandtbucher,Should we use/add `SDKFieldDtypes.PRIMARY_INFO_CODE` and `SDKFieldDtypes.INFO_CODE`?
brandtbucher,"```suggestion         return frame.astype[self.RESOURCE.FIELD_DELISTDATE](""datetime64[D]"") ```"
brandtbucher,"Maybe just assert *something* about the returned frame (its shape, maybe)?"
chaburkland,I don't know - this query is direct from the tech doc. http://centcon01-prd-i:5009/Technical+DocumentationSDK/data/worldscope_datastream/datastream_sec_attributes.html#datastream-security-attributes
chaburkland,Good idea. Let me confirm from QAI documentation what those types are and I'll add them.
chaburkland,Good catch.
chaburkland,"Since this is running a live query, the most I can do is check columns"
chaburkland,"I don't understand why these imports need to change. They work, they're clear, and they are what is available in the SDK."
ForeverWintr,"Actually, my intent is to reference the previous paragraph under 'Motivation', which is above!"
ForeverWintr,"```suggestion """"""# Frame Factory and Recipes  This code is posted as a SO answer here: https://stackoverflow.com/c/research-affiliates/a/159/4  ```"
MadisonAster,Gotcha
MadisonAster,"It may very well not be related to our work, and happy to remove/modify. Went down a bit of a rabbit hole learning about the way depository receipts and other more obscure european assets from the security type columns are actually traded, and started reading a lot about MiFID II regulations. I still don’t completely understand it. Given this is a very recent set of changes, and the strange market conditions lately, it seemed worth noting/researching if it might help steer clear of some of the more unpredictably volatile assets.  https://www.sec.gov/spotlight/fixed-income-advisory-committee/pimco-mifid-ii-transparency-rules.pdf"
flexatone,"Very interesting that you found this, but I suspect we would never see or be involved with this aspect of trading. Are there any security attributes in any of the data that we get that would let us observe if a Systematic Internaliser is involved in that security line? If not, I would suggest we remove it; @nekobon may have input. I think this glossary is best served with topics directly relevant to our work, rather than any topic in finance.  "
nekobon,"I agree it would be more useful if all the words there are something you see at work. For anything extra, especially if some definitions difficult to get by googling or can be explained from work-related examples, can be in a separate list. "
nekobon,This says optional but with no default arg
nekobon,This seems strange to use `test_data` in production. Is this temporarily here?
nekobon,Duplicated lines
ForeverWintr,```suggestion     Convert incorrect or missing values that are expected to be an int. The value returned here is written to an int column in the database ```
ForeverWintr,"```suggestion     if data_group_attr.normalized_index_source in (index_sources.bofa,): ```"
ForeverWintr,```suggestion     # for other index_source we use the default for now! ```  Is this what you meant?
ForeverWintr,"Maybe you could make this a decorator, then use it to decorate the other convert/handle functions?"
ForeverWintr,Should `-999.99` be a symbolic constant?
ForeverWintr,Did you intend to define this function a second time here?
ForeverWintr,I notice `ATTR_FIELD_TRANSFORMERS = None` repeated quite a bit. Can you define some of these as defaults on a base class?
ForeverWintr,```suggestion     # Variety of names we may receive from Bloomberg ```
gdevanla,Ha Ha! I don't even understand how I got to that sentence structure. Thanks for fixing it!
gdevanla,"These validations are very ad-hoc right now and are in flux. That is the reason why I did not attempt any abstractions on these. Sometimes, the values itself could be different. Still, observing data and changing."
gdevanla,Good point.
gdevanla,"yes, again. These are 2 different files. The error code handling for this file could be different soon. This is just the first iteration."
gdevanla,"These attributes are part of a `LoaderInterface` which is a protocol class. I have tried to declare these attrs explicitly here to make it clear what each of these classes are using. Plus, as I pointed out in my other comments, these fields will be defined/refined as we progress (that is my expectations)"
gdevanla,Yes!
nekobon,"It says intangible sales, but `sales` is regular `avg_sales`. Does this mean something else?"
nekobon,Are these used in the methodology? I see `price_id_field = psu.price_id_field` in the default `classic_lowvol.py` methodology but is it gone?
flexatone,"It seems like the value of this parameter could be a function that returns a DID, rather than a function that returns a `Distribution`; that is more consistent with the `psu_distribution` parameter, for example."
flexatone,Same as above.
flexatone,Same as above.
vhquang,"I agree. I think it may even better to turn this into a date template base on GEU month or trade month, so that the DID would show up in the spec instead of the function object.  I want to merge this to have passed test for RMC for this rebal today. Let me handle this suggestion as future enhancement."
nekobon,The function name seems a lot more specific than the function itself. I think calling it `in_benchmark_weight` would reduce confusion.
nekobon,You can replace `~u_wt.isna()` with `u_wt.notna()`
nekobon,"If this is False, does it assume the turnover parameters are quarterly or monthly?"
vhquang,I think it is clearer to have the name of the function follows its intended goal. The fact that it uses only `field_benchmark_weight` is base on the assumption that non 0 weight implies valid constituents. That assumption should not leak to the caller of the function.
nekobon,"I agree it's the intention, but I don't think connecting intention and the function name is a good idea.  Actually I see very similar function below. It looks like the function name is the only difference. I think there should be only one?"
vhquang,"I mean this function vs `in_mcap_region_and_size` defined inside `_add_benchmark_weight`? Yes they have the same goal, of checking valid region and size. The function is in `_add_benchmark_weight` is the primary one, since it will affect normalized weight for benchmark. The one in here is secondary for defensive, I want to explicitly ignore CI not in the region and size, instead of letting them multiple with NaN weight. Otherwise, I can remove that function without effecting the result.  Yes, the 2 functions should only be one. But having them as inner function and use closure reduces the requirement of su_connector. Beside, there is a specific logic, or checking ""Em"" region, which I think not suite for it to be as class level function."
nekobon,"I'm not sure if I understand correctly. Since you multiply by the weight, both function can use `row[field_benchmark_weight] > 0` for condition and they would be identical. When two functions are identical, we should only have one"
vhquang,"You mean replacing usage in L91 and L93 with `lambda row: row[field_benchmark_weight] > 0`, and remove the named function `is_in_mcap_region_n_size`? I can go ahead and do that."
nekobon,"I mean the other `_get_baseline_ci` can be identical to this `_get_baseline_ci`. In that function,  ```python         def is_in_region_n_size(row):             return row[field_in_region_and_size] ``` can be ```python         def is_in_region_n_size(row):             return row[field_benchmark_weight] > 0 ```"
nekobon,This is what I meant in above comment
johnjhawk,"great catch, this is an error in the comment and not the code.  I'll update the comment."
vhquang,"Oh, I see what you mean now. Since `benchmark_weight` already encoded the info about valid region and size, we can use that info. Also that would make `_get_baseline_ci` identical for both LAE and LGIM. I think this is a good change.  Ted already validates the test build of this code for June: http://irv-sc101/redmine/issues/7951#note-9 Can I leave this code as is until we validate September build, then use it for refactor check?"
vhquang,I take it back. Let update the code while we are at it. I can cross check the code with the June build on my own.
nekobon,"You can change this anytime, but please use the build validated by someone in PM or IM as test input to make sure they are rebuildable. "
nekobon,"Sorry, I'm a bit confused. What do you mean by ""I can cross check the code with the June build on my own""?"
vhquang,"What I mean is i can refactor the code, and confirm my new build has the same mcap size, mcap weight, baseline CI, portfolio weight, with the mcap test build I have sent out earlier (which has mcap size, mcap weight validated by Ted). i still need to wait for Joseph to validate other parts."
gettodaze,```suggestion     ) -> None: ```
gettodaze,Typehints would be good here
ForeverWintr,"I think it assumes they are per-rebalance (`nr`), but I'm not entirely sure. "
MadisonAster,Should this be in quotes?
chaburkland,"Yeah it has to be. The class isn't finished being defined, so you will get a `NameError`. If you put in in quotes, it becomes valid Python syntax, and linters are able to understand what you mean."
MadisonAster,Very interesting! I haven't encountered this before. So theoretically you can just name any non-existent class and as long as you create it before it's used everything is fine?
chaburkland,"I think so! ```python def foo() -> ""TBD"": # pylint seems okay with this     pass  class TBD:     pass  ```"
gettodaze,"Note for @johnjhawk : I had to redefine `carve_regions` because it was being generated in `super()` using `super().carve_prototypes` instead of the current `carve_prototypes`. I know copying is smelly, so would you know of a better way to do this?"
johnjhawk,"```suggestion             size=SubIndex.LM, ```"
johnjhawk,"```suggestion             size=SubIndex.LM, ```"
johnjhawk,"```suggestion             size=SubIndex.LM, ```"
johnjhawk,I see what you mean. Let's just copy it. And also ask Ted if we can remove the analytic carves since we have kleio now. 
gettodaze,Thanks!
chaburkland,Is this supposed to be `sa.Integer?` Everywhere else it has been set as `sa.String`.
chaburkland,Maybe put this import at the top of the function?
brandtbucher,"Maybe it's worth having this ""infinity"" date as a constant in `date_util`?"
gettodaze,"```suggestion             # also, we only want to form the client aggregate for active cpids             # p.is_carve_product(cpid) is False when cpid is inactive ```"
nekobon,"This one is a common ""infinity"" date used by this data vendor (compustat). I'll make this a class constant."
flexatone,We can probably remove these now.
flexatone,You  can now do the following instead of this if you think it is cleaner: ```suggestion         f.via_fill_value('')[fields.COUNTRY_PRE_EXCEPTIONS] = c_pre ```
flexatone,Same here: ```suggestion         f.via_fill_value('')[fields.COUNTRY_EXCEPTIONS] = c_except ```
vhquang,I think it is more pythonic to use `and` for this: ```suggestion         if w.PRODUCT_ID and w.VENDOR_NAME != hd.Vendor.FTSE ```
vhquang,"Also, can you leave a comment on why we want to exclude FTSE writer?"
vhquang,"I am curious on when the `PRODUCT_ID` can be None, as I see most writers have this attribute set.  I am not familiar with the Holding Writer, but I see an `ACTIVE` attribute. How is that relate to live/non-live writer? Can we use that, instead of checking for no `PRODUCT_ID`?"
vhquang,"I think this check should happen at the beginning of the code. Ie; if we found the cache, we don't need to run the `build_daily_holdings_compare`."
MadisonAster,"These lines were actually written by John Hawk, which I've copied from daily_holdings_compare. According to him, the FTSE products are not included in our AUM calculations, which is why we exclude them from the model. I need to double check with Robert to be sure that this is what they want for this report."
vhquang,"Your `cp_ids_live` is a superset of `cp_ids_model` (one has FTSE and one does not). Just by the variable name, I have an impression this should be another way around, ie: `cp_ids_model` should be superset of `cp_ids_live`. Can you elaborate the difference between them?  (And please update that to the docstring of `build_daily_holdings_compare` as well, even though you are not the original author of that function.)"
MadisonAster,"@johnjhawk might know the answer to this as it was in his original code, I'm not 100% sure. I tried running without these lines and there are None cases, I can debug this further if you think it's necessary. Perhaps yield_all_active_portfolio_writers includes portfolios that do not yet have products attached to them? ie newly constructed custom portfolios that are still being reviewed by the client? If there's no product attached, there wouldn't be any holdings to compare after all. "
MadisonAster,Excellent suggestion. I completely overlooked that branch of the logic.
gettodaze,"This is the method that calls `from_str`, and only does it for two reasons: 1. To expand the full locator string via `str(PortfolioLocator.from_str(port_loc_str))` 1. To assert `port_loc.build_type == location.Level.LIVE`  I don't think I really need either of these steps, right?"
vhquang,This is only for QC for this period. We don't need to expose those in summary.
johnjhawk,"not all holdings writers have a product id. for example, benchmarks."
ForeverWintr,"You might need step 1, because you index into the frame with the port_loc_str. If the frame contains `'grafi-aw_lm|LIVE|RAFIGLBT'` and `port_loc` is `'grafi-aw_lm|LIVE|'`, you won't find a match without step 1.   I don't understand the context of this enough to know if that scenario can happen here. Can it?"
vhquang,Thank you for bringing this up with IM team. I will leave the reference here for that discussion: http://irv-sc101/redmine/issues/7945
vhquang,"I see, thank you for the explanation John. How should I interpret the `ACTIVE` attribute of Holding, does it mean anything for live/non-live writer?"
vhquang,"I would prefer to write it a little differently, using early return, just so we don't need to wrap the implementation inside the ""if"" statement. ```suggestion     if did in _holdings_cache:         return _holdings_cache[did]      current_geu_date = history.common_histories[""live_spec""][         DeliveryHistoryPARC.current_idx     ].geu     current_geu_date = datetime.datetime.strptime(current_geu_date, ""%Y%m%d"").date()     cp_ids_model = [         w.PRODUCT_ID         for w in holdings_live.yield_all_active_portfolio_writers()         if w.PRODUCT_ID         if w.VENDOR_NAME != hd.Vendor.FTSE     ]     cp_ids_live = [         w.PRODUCT_ID         for w in holdings_live.yield_all_active_portfolio_writers()         if w.PRODUCT_ID     ]      result = dhc.build_daily_holdings_compare(         report_date=current_geu_date,         anchor_dist_hist=history,         cp_ids_live=cp_ids_live,         cp_ids_model=cp_ids_model,     )          _holdings_cache[did] = result[""security_level""].to_pandas()     return _holdings_cache[did] ```"
MadisonAster,"This does look better, I suppose repeating the return statement is better than indenting the whole block."
gettodaze,Not yet. This function isn't currently used. We can cross that bridge if we get to it with Kleio/Factsheet regressions?
vhquang,"Nevermind my previous question. I see some writers have `PRODUCT_ID` but not active. I still don't know how to interpret them, but I think it can be considered outside of the scope for this PR. I am OK with the code change now."
vhquang,"Aesthetic is a thing. But also (for me), it is clearer to see the intention from the author, to using cache to avoid redundant work."
ForeverWintr,"Ok, sounds good!"
flexatone,"For what it is worth, I think fewer return statements is, in general, better: code is easier to reason about when there is one exit (most of the time). But in this case, we end up repeating the same line twice; I think avoiding that is more important than having an indented block."
gettodaze,"I see on line 2854: ```python3     def add_geu_date_to_co(self, new_column, date_format, condition=lambda x: True):         """"""Adds a column in country table with geu date under the given date format.""""""         date_str = self.base_date.strftime(date_format)         self.universe.co.add_column_from_function(             column=new_column,             function=lambda row: date_str,             condition=condition,         ) ``` Does this mean that this column is all just one date `self.base_date`? Does the client file then just get populated with the same `price date` for all the rows?"
nekobon,"Yes! It is strange, but useful with not too much cost in data size."
gdevanla,"Indeed, that is a bug!  Thanks for catching that. 🙏🏾 "
gdevanla,"Minor improvement opportunity (I think): Since this is static and can be determined at load time, can we have a 'class level attribute that is set to these values once and then used here:   ``` class LogCollectionHandler(logging.Handler):      LOG_NAME_SET = {*TLT_NAME_SET, ""__main__"", ""root""} ```  And then, in the condition we could have  ``` if base_name in (self.LOG_NAME_SET) or logRecord.levelno >= self.NON_TLT_LOG_LEVEL: ```  "
gdevanla,"i am curious, if you saw any issues with this check not being there."
chaburkland,"Yes! When I was running some tests that I put breakpoints in and they led to failures where somehow the `root_logger` was set to None. I figured adding this check wouldn't hurt anything, and it would address that odd behavior when debugging."
johnjhawk,how do we know that rapid_children are sorted here?
gettodaze,Note: these are all supposed to be frames and this was a series.
johnjhawk,"I know that it's beyond the scope of this project, but are we still using PrettyDate just for the .from_any() method on it?  It would be nice to be able to get rid of it."
johnjhawk,Nice. One less Optional return type.
johnjhawk,Can we add the description of the product here?
johnjhawk,adding the name here is really nice.
gdevanla,"Curious: What is the type of `res` here? Is that a pandas dataframe. If that is the case, wouldn't `weight_by_sic` by a pandas series?"
gettodaze,"Yeah, `weight_by_sic` is a series, but `detailed_results` is supposed to be a `Dict[str, DataFrame]`."
ForeverWintr,"I agree. I'm not sure though if we're only using it for `from_any`, though."
ForeverWintr,"Yeah, good call "
ForeverWintr,"```suggestion         """"""RAFI Multi-Factor Value Focus ex-Quality Developed (GBP) TR"""""" ```"
gettodaze,"By design they should be sorted, but that is a good point! I will assert that they are sorted."
flexatone,"Result should be NaN or inf, never zero..."
flexatone,"```suggestion def divide(a: sf.Series, b: sf.Series) -> sf.Series: ```"
flexatone,Nice use of the `type` attr in `argparse`! We should generalize this and use it wherever we take FPs in CLIs.
flexatone,"You might be able to just use `earnings_yield.clip(lower=floor, upper=cap)`"
flexatone,"No args for `tp.Callable`? Maybe just  ```suggestion     function: tp.Callable[[...], tp.Any] ```"
flexatone,You might be able to use `dropfalsy()` here...
flexatone,"If you just want to write to an XLSX and do not need to hold on to a ``Bus``, you can do something like this:  ```suggestion     sf.Batch.from_items((k, f.fillna("""")) for k, f in new_frames.items()).to_xlsx(outpath, config=config) ```"
ForeverWintr,Thanks for highlighting this. I think I intended to write 'nan' here. I'm also not sure if this errstate is still needed. I'll review.
ForeverWintr,"Does this add anything? From the [docs](https://docs.python.org/3/library/typing.html#typing.Callable):  >  A plain Callable is equivalent to Callable[..., Any], and in turn to collections.abc.Callable."
flexatone,I did not know that! If MyPy accepts it then that is great.
chaburkland,`point point` :upside_down_face: 
chaburkland,"This should be `url=f""{cls.PORTAL_BASE_URL}{RoutineIOCPIQueryTestLocal.END_POINT}""`  Same for all the calls below"
chaburkland,"This is a bit minor, but I think the `_class` part of the name is redundant. All routine IOs are simple namespace classes - there are no instance routine IOs. This would be more consistent across the portal-related code if it was just `routine_io`."
chaburkland,Is pylint/mypy okay with these unused arguments?
chaburkland,"I do not think this is correct. It should be: ```python from papyri.core.portal_routine_ios import RoutineIOCPIQueryTestLocal ... frame = RoutineCPIQueryTestLocal.action(RoutineIOCPIQueryTestLocal, **json) ```"
gdevanla,Good catch. Is there a way to test these functions? 
gdevanla,No issues. I don't have any strong attachments to that name!
gdevanla,"Fixed it, Thanks!"
gdevanla,"You are right. Since, we don't use this argument even my test did not fail."
chaburkland,There are two tests in `test_live_reader` that actually execute the endpoint.
ForeverWintr,"But `type object 'Batch' has no attribute 'from_items'`! In this case my frames are named, so I can do:  ```python     sf.Batch.from_frames(f.fillna("""") for f in new_frames.values()).to_xlsx(         outpath, config=config     ) ```"
chaburkland,"I think it would be good to add an `assert self.start_date is not None` here, to enforce that no one tries writing from this base class, or that no one accidentally makes a subclass without defining this."
chaburkland,Maybe put `self.failures` on the base class?
chaburkland,"Maybe `result_sec[""ID_BB_UNIQUE_geiu_co""].dropna().unique().tolist()` is clearer?"
chaburkland,I would definitely use the resource for this. ```python BBSecurityPriceWriterOneYearResource.get_fp_components(as_of_date=du.year_mo_day_str_to_date(report_date_str))`  ```
chaburkland,If you want `du.year_mo_day_str_to_date(min(price_dates))`
chaburkland,"```python prices_f = prices_f.relabel(columns=prices_f.columns.via_str.replace(""-"", """")) ```"
chaburkland,I'm confused as to the reason for `tmp_prices_f`. It seems like it could just be: ```python for pid in price_ids:     prices_f[pid] = sf.Series.from_pandas(price_data[pid].get_series()) ```
chaburkland,If you could unpack x into two meaningful names I think that would help this read a bit clearer. i.e. what are x[0] & x[1]!
chaburkland,I love newlines :heart: 
chaburkland,Should this be your email?
brandtbucher,```suggestion             res = [field for field in fields if field in attrs] ```
gettodaze,"```suggestion     def record_init_info(self, class_name: str, frame: types.FrameType) -> None: ```"
gettodaze,"Maybe a docstring like this would help:  ``` class ReportInitMixin:     '''Adds a function to store arguments to init under _init_info as a string.     Example:     >>> t = ReportInitMixinSubclass(region_field='a', region_values=['5'], size_values={'10'})                                                                                                                                                             >>> t._init_info                                                                                                                                                                                                                              ""<ReportInitMixinSubclass: region_field='a', region_values=['5'], size_values={'10'}>""     ''' ```"
gettodaze,"Why not maybe just use the repr for everything? Is there an edgecase where you want to use the `__str__` or `__format__` method instead? ```suggestion         params = "", "".join(             f""{k}={a_info.locals[k]!r}"" for k in a_info.args if k != ""self""         ) ```"
gettodaze,"```suggestion         field_benchmark_wt = f""{carve_label}_norm_mcap_w_in_mcap_region_size""         target_table.add_normalized_by_condition(             column=field_mcap,             new_column=field_benchmark_wt,             condition=lambda row: row[field_in_mcap_sel],         )          return field_benchmark_wt ```"
gettodaze,I never knew about `CSpecDeriveType`!
vhquang,It just didn't happen to me I can use raw `repr` for this case. Thanks for the suggestion.
vhquang,It's a shortcut for me to make it a little clearer and shorter to type.
vhquang,I looked for this type and couldn't find it. Thank you!
gettodaze,Brandt had just shown it to me in a pair programming!
nekobon,"These two functions are called by one-dered `_add_exclusion_selection`. Should they be one-dered, too?"
nekobon,"Can you make some of the columns more explicit? (e.g. ""inflation"" sounds like general currency inflation rate) Perhaps you can prefix all with ""cti_"" or ""cti_plugin_"""
nekobon,"I think `namespace`s in Python is generally to contain key-name pairs (like a class) and not often a function. How about to call it something else like ""get_field""?"
nekobon,"```suggestion             raise RuntimeError(""Inflation should be enabled per techdoc."") ```"
nekobon,Do we need to return `SelectionInfo` here? The function's documentation says it returns one Series.
nekobon,Same here.
nekobon,"```suggestion         """"""Add a boolean selection of companies to be excluded. True means excluded."""""" ```"
chaburkland,Typehints?
chaburkland,Unused import
chaburkland,Is this and `_setup_history` fixtures? It doesn't seem like they are being used anywhere
chaburkland,This setup is repeated alot. Would you consider using a unittest class and do this in `def setUp(self)`?
chaburkland,This method is identical to `run_query` above! Save for better typehints.
chaburkland,"We talked about this a bit in CR, but I think this should not accept json.
I think it might be good to make a new decorator called something like `@endpoint_expects_nothing`, as that more accurately communicates what this endpoint logic requires.
"
chaburkland,Can we make this a symbolic constant?
chaburkland,This is a redundant call since `create_production_app` is already adding the urls.
chaburkland,"I do not think this is correct. There is a strict dependency that the routine IOs in papyri do not import from anywhere outside the SDK.
This should be safe to import as `from papyri.core.portal_routine_ios import RoutineIO`"
chaburkland,"Super minor, but I think this should be `tp.Optional[tp.Iterable[str]]`"
chaburkland,This function is unused
chaburkland,This is breaking my brain a bit. Will this update the `PORTAL_BASE_URL` module-scope variable inside `live_reader.py`?
chaburkland,Stale comment
chaburkland,"Shouldn't this be `return routine_io.frame_from_bytes(frame_bytes)`? Also maybe update the typehint to be `routine_io: RoutineIOSingleFrame,`"
gdevanla,"Yes, I left a comment above the function why it exists. I will remove it after a couple  of iterations once the API stabilizes."
gdevanla,"It will! I thought I remove it after testing, but did not."
chaburkland,Oh sorry I missed that!
gdevanla,"Minor improvement you could consider:  ``` records = records.loc[(records[""data_group_short_name""] == data_group_short_name) &                                    (records[""fullhistory""] == fullhistory)] ```  This just works since `fullhistory` is already a `bool`.  Also, may be consider name of `fullhistory` to `full_history`. if it is not much changes.   "
gdevanla,Do we need spaces here? Can we have `_` instead?
gdevanla,Do we have symbolic constants for `daily` and `monthly`?
gdevanla,Good point. I have tried to clean that up. Please review.
AlanMLin,This will not work. I only want to get the list of tickers with full_history column set to True when I call this get_bbg_ticker() with full_history passed as a parameter (ticker SPXT Index only). Otherwise I want to get all the tickers regardless of full_history column (both SPX Index and SPXT Index).  data_group	data_group_short_name	ticker	ticker_usd	ticker_usd_hedged	ticker_foreign	active	full_history	valid_from_date	valid_to_date Test	test	SPX Index				True	False	19000101	99991231 Test	test	SPXT Index				True	True	19000101	99991231  I changed fullhistory to full_history
AlanMLin,I replaced space with _
AlanMLin,I replaced them with symbolic constants
ForeverWintr,Do you want to make this TODO an issue to address in future?
ForeverWintr,`primary_secs` is indexed by co_id?
ForeverWintr,Could you add a comment explaining what it means if this assert fails?
ForeverWintr,"Can't you just `set_index`, without `unset_index` first?"
ForeverWintr,I wrote a vectorized `map_fill` that is 32x faster than the default. If this is a big table you might be interested in something similar for `map_all`.  https://github.com/ResearchAffiliates/invsys/blob/820a6746b8034df5102511bb344aba625ce578de/portcullis/core/series_transform.py#L209
ForeverWintr,"Out of curiosity, what should we do if we see this warning?"
ForeverWintr,A comment here about what a failure means would be useful.
ForeverWintr,Why not raise an exception instead of asserting here? `RALib.core.exceptions.DataError` might fit well.
ForeverWintr,"I believe the result of `get_connection()` can be used as a context manager, and I think that would be preferable to accessing `.connection` directly. I assume the latter keeps the connection open for the life of this object (because of the `CachedProperty`). Do you need to cache the connection? ```suggestion     def connection(self):         return (             SQLServerEngine(connection_spec=self.CONNECTION_SPEC)             .get_connection()         ) ```"
ForeverWintr,"If you remove the last `.connection` above, I think you could do: ```suggestion         with self.connection as conn:             df = pd.read_sql(                 sql, con=conn, parse_dates=[self.RESOURCE.FIELD_DATE]             ) ```"
ForeverWintr,The first use of an internal `lru_cache` decorator I've seen. Nice!
chaburkland,:+1: 
chaburkland,Is the reindex here necessary/correct?
chaburkland,"I've wondered about this, but is it considered bad practice to reuse docstrings? The docstring for each of these for methods are almost identical, it seems better to isolate out the shared parts, and have the docstrings be constructed f-strings for each class."
chaburkland,Only when you're not looking
chaburkland,"I know there's a comment, but this makes me really nervous. I do not think, that even temporarily, this should be hardcoded while on default."
chaburkland,Remind me why you use a `ThreadPool` instead of a `ProcessPool`?
chaburkland,Can you add some newlines to this function?
chaburkland,"I think this would be good as a separate function. That way you can test the rate retrieval.  One really helpful test I do to ensure that I haven't accidentally inverted something is to write a test that exercises it with JPY, and assert that the rates are all less than 1."
gdevanla,Type hint?
gdevanla,"I think this has to be  ``` holdings_df = holdings_df.drop[""field""] ```  since frame are immutable. Here the applying `drop` to frame just returns a new frame. The original frame still had that value."
gdevanla,"If you are not changing the `index`, you can drop this assignment."
gdevanla,I am curious on whether the `sec_id` is guaranteed be unique at this point? 
gdevanla,This is already the default argument. Can we not pass it?
chaburkland,Thanks for the reminder - I've forgotten to make new issues in lieu of using TODOs.
chaburkland,Yeah... Let me add some better comments/names.  `primary_secs` is the primary_sec column of the CO table.
chaburkland,Good catch. I think this is a remnant of an earlier iteration where the index contained security information that I needed to retain.
chaburkland,Ooo let me take a look
chaburkland,Eventually this will raise. This exists right now since we haven't discovered what to do yet for duplicate `max_volume`s. This log is being monitored by me and I'm working with Forrest/Xi to figure out how to properly handle these.
chaburkland,I didn't know this! I will update this and use this pattern in the future
chaburkland,"Thanks! I just realized now that it's not even necessary, as I'm iterating on `set(currencies)`, so `get_rates` will only be called for each security once!"
chaburkland,"So you function doesn't quite apply to my use case, but you inspired me to re-write this section to be vectorized instead."
chaburkland,What is going on here?
brandtbucher,"The dividend conversion hook ends up creating a separate FX reader for each process, and the aggressive caching that happens under-the-hood quickly blows up our memory.  I'll add a comment to clarify."
brandtbucher,See the formula at the bottom of [this section](http://centcon01-prd-i:5009/Technical+DocumentationSDK/data/worldscope_datastream/datastream_pricing.html#fx-rates). I'll add a comment that links there and explains a bit.
brandtbucher,"At the time, I didn't really have a choice; the only snapshot for that reader was `20210731`, and it doesn't have a `from_latest` constructor.  I see now that a `20210831` snapshot has been added, so I'll go ahead and fix this."
brandtbucher,"Yep. Currently the columns are out-of-order.  Before: `[SDKFields.DATA_DATE, *columns, SDKFields.DS_SEC_CODE]` After: `[SDKFields.DS_SEC_CODE, SDKFields.DATA_DATE, *columns]`"
brandtbucher,"f-docstrings aren't a thing. Docstrings are built at compile-time, so only constant string literals work:  ```py >>> s = ""Spam Spam Spam"" >>> def f() -> None: ...     f""{s}"" ...  >>> f.__doc__ is None True ```  Plus, these particular docstrings have lots of subtle differences (they just share the same basic structure because they all have identical interfaces). So even a hack like assigning to `f.__doc__` would be complicated in this case (not to mention pretty much unreadable for anyone reading the actual source, like us)."
chaburkland,"Yeah - that shouldn't be a reindex, just a column selection.  What I meant was, why not `return f[self._REQUIRED_COLUMNS + columns]`"
brandtbucher,"Hm, I hadn't thought of that. Conceptually (at least for me) this is a reindexing operation, since I'm just changing the order of the columns, not actually making a selection.  Is there any real difference between the two?"
chaburkland,"I am pretty sure that regular selection is always faster than reindexing. Plus, reindexing can add new columns, and I think this function would want to raise if any of the columns are not in the frame."
brandtbucher,Great point.
brandtbucher,"Actually, making this its own (testable) function is pretty hard, since the first few lines handle copying files and returning `True` in the special case of `currency_local == FX_ISO.USD`. The rest is just a `try`/`except` that, again, returns.  So really all I could break out cleanly would be the call to `self._fx._cached_history`. I don't see much value in testing a separate function that does only that."
brandtbucher,"Ah, wait, the reindex actually _is_ needed. If one of the columns is missing for a security, we need to create it."
MadisonAster,"I wouldn't think so since get_holdings_for_carve_products is able to retrieve sec_id's from multiple carve products. Presumably there will always be some overlap of the securities in each product. Indexing on a concatenation of carve_product_id and sec_id does seem inelegant here though, do you think there is a significant performance cost to this?"
johnjhawk,is this being used?
johnjhawk,"Since these are pretty standard definitions, what do you think about moving these definitions to another module? Right now we are putting stuff like this in subindex, but I dont think that's a great place for such things either. These definitions are fine here but let's think about where stuff like this would be best.  maybe in a hallway."
johnjhawk,We had a chat about this and determined that I will create an issue to create a module to define constants like this.
ForeverWintr,"Oh no. I meant to use it, but the code below is still using `CG_AW`. I will fix. Thanks for catching this. "
vhquang,"`SelectionInfo` is what I plan to return for all the exclusion in the future. It's better because it shows which data is used during that process. Right now, those info is exposed by outputting everything is ISS data, which I don't like.   I will update the docstring to reflect the returned info."
brandtbucher,"Is this safe? Leap years, etc..."
brandtbucher,"```suggestion         if (df_dvd_cash[""CP_DVD_CRNCY""] == ""BRL"").any(): ```"
brandtbucher,"```suggestion         df_dvd_cash = df_dvd_cash.loc[df_dvd_cash[""CP_DVD_CRNCY""].notna()] ```"
nekobon,Thank you for this comment! What does `old: None?` mean?
gettodaze,"Oh, I wanted to ask! Originally there was no `--auto_test_did some_did`, just `--date 201803`. Which did is used in that case? "
ForeverWintr,"Could you use `mapping[""ra_account_num""].values.astype(int)`?"
ForeverWintr,"I would favor try: except: here, which eliminates the potential of a race condition between the `exists` check and opening the file. Also, I think `json.load(f)` will fail if the file is empty, won't it?  ```suggestion         try:             with open(ra_pimco_account_num_fp) as f:                 data = json.load(f)         except (FileNotFoundError, JSONDecodeError):             pass         else:             ra_pimco_account_num_map = {int(k): int(v) for k, v in data.items()}     ```  "
gettodaze,I just got rid of the `old: None?`
nekobon,"Oh, really? That is very interesting! I wonder what it was testing against"
ForeverWintr,"I think I understand the motivation for this check; You're making sure that if the writer class is marked inactive, then the carve is marked inactive in live holdings too? That's useful to know, but rather than raising here, can you just include that information in the `self.fail` message?"
ForeverWintr,"Can you change the error message to something like ```suggestion             return self.fail(f""No live holdings found: {e}"") ```  They should know to verify if none are expected. :smiley: "
ForeverWintr,"This isn't quite what I had in mind. I think we should `self.fail` for _all_ cases where we can't get live holdings. It's useful to know if the writer is inactive, but in all cases I think it's appropriate to fail here. Can we catch `MissingRemoteMirrorFileException` instead?"
gettodaze,"Ah, I see! It makes sense to fail instead of error on `MissingRemoteMirrorFileException`. I'll make these changes!"
vhquang,"It seems like you expect the values of the dict to have specific type. In that case, a type hint would be nice: ```suggestion     INFO_COLUMNS: tp.Dict[str, tp.Tuple[config_objects.ColumnConfigRow, ...]] = { ```"
gdevanla,"Thanks, those are nice suggestions!"
gdevanla,"Actually, now I remember. I want a python int here, but the `astype(int)` returns a `np.int64`. The python `int` is useful for writing to/from json without a need for a decoder.  Do you have other thoughts on how else this could be achieved?"
ForeverWintr,"Yeah, I've been frustrated by `np.int64` too, and I don't understand the rules for when you get a numpy int vs a python one. In the ad-hoc testing I just did, doing `.astype(int).tolist()` gives me python ints, but I understand not wanting to rely on that.  Your current approach seems reasonable to me. :+1: "
ForeverWintr,"```suggestion def nominal_commodity_term_structure(*, fspec) -> tp.Dict[str, pd.Dataframe]: ``` I think?"
ForeverWintr,"```suggestion def ln_real_commodity_term_structure(*, fspec) -> tp.Dict[str, pd.Dataframe]: ```"
ForeverWintr,```suggestion     return num_contracts_db.fillna(0).astype(int)[list(records)] ```  Personally I prefer this.
ForeverWintr,```suggestion     return slope_df[list(records)] ```
ForeverWintr,"I instinctively avoid iterating over `ts.keys()` because in python 2 dict.keys() returned a list. I know that isn't a concern anymore, and some people think using `keys` is clearer. What do you think? ```suggestion         (c, _get_trend_and_median_df(trend[c], num_contracts[c])) for c in ts ```"
ForeverWintr,```suggestion     inf_countries = [c for c in countries if c not in p] ```
ForeverWintr,Is `transpose()` the same as `.T`?
ForeverWintr,Should these `keep`s still be here?
brandtbucher,I don't think this step happens (`default` should always be at or ahead of `stable` with this workflow). ```suggestion ```
brandtbucher,"```suggestion         """"""Return scheduler jobs."""""" ```"
brandtbucher,You should probably remove me. I think sending *could* fail once my account is deactivated? ```suggestion ```
brandtbucher,I think this actually may apply to intermediate files/directories they use during their process as well. Not sure.
ForeverWintr,"```suggestion def commodity_trends(*, fspec) -> tp.Dict[str, pd.DataFrame]:     """"""Returns a dict of DataFrames of commodity trend and trend median, where keys are commodity code, minor axis is ['trend', 'trend_median'] and row is data month. ``` "
nekobon,"Since we already assume Python 3.<when dict became sorted>, so I don't think we need to worry about python 2 behavior. I like .keys() here to be explicit."
nekobon,"Oh, I should remove them"
nekobon,```suggestion     # 1. make new branch from default     # 2. work on the new branch     # 3. merge branch to default     # 4. run test on default     # 5. merge default to stable ```
nekobon,"It would be redirected to me, so it's fine to keep it for a while"
gettodaze,"Hah, by *this* I meant this ^"
nekobon,"```suggestion             # AA team's logs, intermediate files, etc, that they don't want to upload ```"
ForeverWintr,"```suggestion         try:             live = self._get_live(cpid, frame_factory)         except MissingRemoteMirrorFileException as e:             msg = f""{cpid} live holdings not found""              cp = CarveProduct.from_latest()             # if product in carve product table, verify that it has live_index==FALSE             if (                 cpid                 and cpid in cp.name_to_id.keys()                 and cp.get_attribute_by_name(cpid, ""live_index"") != ""FALSE""             ):                 msg = f""{msg}, but 'live_index'=True in product.carve.ids.txt:  ""             return self.fail(f""{msg}{e}"") ```  How about this? So that we print the carve in all cases. "
gettodaze,"Oh yeah, I like that! I was thinking it was redundant because the carve is printed in the output file, but I think extra context never hurts if we ever see the message outside that output."
ForeverWintr,Good point about it already being printed! I'd forgotten that. But I agree the extra context doesn't hurt.
ForeverWintr,"```suggestion     """"""Return entries from the first series where the second series is greater than zero"""""" ```"
MadisonAster,assertion failure in description here 
gdevanla,"If  you agree,  you can just  isolate the try/except block to just the `attr` getter. ```     try:         include_spec = spec_parts.cls_psu_client_include     except AttributeError:         # Old include specs define the geu connector here.         include_spec = spec_parts.cls_include     # and then get the geu_connector     geiu_connector = include_spec.geu_connector ``` "
ForeverWintr,"Actually, the issue isn't that `spec_parts.cls_psu_client_include` sometimes doesn't exist, it's that `cls_psu_client_include.geu_connector` sometimes doesn't. So I have to put the `cls_psu_client_include.geu_connector` in the try: block.   "
ForeverWintr,I assume this is abstract? Should you `raise` something if this is called directly?
chaburkland,"Yeah it's a `tp.Protocol` and that prohibits instantiation. I also like the simplicity of the pattern. If you want to add in `raise NotImplementedError` feel free to  Technically you could do `DataStoreInterface.get_date_range(self=...)` and you'd get `None`, but at that you'd kinda deserve it."
nekobon,```suggestion - Add portfolio's volume coverage over benchmark to ``finance_util.market_impact`` ```
ForeverWintr,"Much better wording, thanks!"
chaburkland,"I think a DSPrice comment would be good here, since we want to fail if there are duplicate date observations. I believe this is just a temporary fix to get something out for an alpha release."
chaburkland,"This filter should be done in the local writer. Otherwise the local reader will fail when it has to read that column since one of its parquet files will not be readable.  Also, I think it would be better to have something like: `if frame[SDKFields.DATA_DATE].duplicated().any(): ...`, instead of hardcoding the specific sec id."
chaburkland,The field name should still be `FREE_FLOAT_SEC`
flexatone,Can this just be:  ```suggestion     HISTORY_FIELD_TRANSFORMERS = {fld: convert_from_pct for fld in PCT_FIELDS} ```
flexatone,```suggestion     ) -> str: ```
flexatone,"To these need to be hinted as `List`? ```suggestion         instrument_ids: tp.Iterable[int],         as_of_date: datetime.date,     ) -> tp.Iterable[EquityAttr]: ```"
flexatone,This seems unfortunate!
brandtbucher,"No, this is correct. It's common to have multiple dividends with the same date, and we need to be able to handle that."
brandtbucher,```suggestion             ):  # successful or pending run ```
brandtbucher,```suggestion             if rerunning:  # finishing up the last changeset (after restart or error) ```
brandtbucher,```suggestion             else:  # picking up a new changeset ```
brandtbucher,Maybe leave this comment? It's a way to get AutoTestMeta to work with pytest-style function tests (instead of unittest-style classes). It might be handy in the future.
brandtbucher,"```suggestion         # ""--dist loadscope"" makes all tests in same scope (module or class) run in the same process ```"
brandtbucher,"```suggestion     , agent TEXT NOT NULL -- agent that submitted the run (AgentA, AgentQ, etc) ```"
brandtbucher,"```suggestion     , status_code INTEGER NOT NULL -- uroborus.core.util.StatusResult ```"
nekobon,"Sounds good, I will put it back"
gdevanla,"yeah, currently, it is due to my own making. Once, the API stabilizes, I will have to open up all asset classes and invert the definition of the dict. I will create a ticket for that."
gettodaze,Is there a more specific exception you can catch here?
gettodaze,"I think it might be more readable to have something like ``` expected = sf.Frame.from_dict({     ""a_calculation"": [5, 10, 15],     ""a_number"": [5, 5, 5]     }, index=range(3)) assert frame.equals(expected) ``` or even ``` expected = """"""__index0__\ta_calculation\ta_number 0\t5\t5 1\t10\t5 2\t15\t5 """""" ``` Was there a reason to have these be string comparisons aside from ease to write?"
gettodaze,Why did you choose `Missing` instead of `Element` here?
gettodaze,Very nice docstring!
gettodaze,"Is this only used for calculations? What do I use if I want to add a column of all `False`, for example, to my frame?"
flexatone,"Is it too potentially confusing that that the FN_STUB here is not the final FN_STUB? I see we extend it below, but perhaps a comment will help: ```suggestion     FN_STUB = ""INDEX_LEVELS"" # will become INDEX_LEVELS_USD_HEDGED ``` "
flexatone,I think I recently made this same enhancement on one of my branches!
flexatone,"Will not `rate` be undefined, or worse, use a value from a previous iteration, if `FXConversionError` is raised?  ```suggestion                 except FXConversionError:                     rate = np.nan                  if fx_attr.src_iso == fx_attr.iso:                     yield str(fx_attr.iso), rate ```"
chaburkland,Oh geez. I think I meant to type `continue` instead of `pass`. Let me go back to recall what the intended behavior was.
johnjhawk,"Adding a dated spec here isn't how we would normally add a new include spec, but since the include spec is already in the gen spec folder, it makes sense to change it here. Take a look at grafi at how a dated spec is handled in a production product.  Since poly factor isn't a production product and it's easy to see what's going on with the spec, I like this way.  Let's rename the class though ```suggestion class pf2021(pf): ```"
johnjhawk,"```suggestion     pf2021, ```"
johnjhawk,"```suggestion         return (pf2021, include202101) ```"
johnjhawk,"I think that you'll need to revalidate this after making the 202101 to 2021 change. Could you build the new validation build on the default branch?  This build was built on your feature branch which is probably okay, but we favor having validation builds be built on default. "
nekobon,:+1: 
nekobon,"How about below just in case we refactor to have multiple classes with the same names. (We don't want to use the same names, but just in case as cache is scary).  ```suggestion             f""{self.price_reader.__class__.__module__}.{self.price_reader.__class__.__name__}_{self.as_of_date}"", ```"
nekobon,Cool idea! :+1: 
nekobon,(Not for this release) I think eventually we want to make all `self.<attr>` assignment in `__init__` for easier discovery of the state
chaburkland,Nice idea
chaburkland,"I'm mainly doing it this way (outside of init), to allow for easier testing/mocking. It becomes very tricky to test, or requires lots of repeated code in the test module in order to mock this out.  I'm open to a better way since you're right, `self.<attr>` assignment outside of `__init__` is not good! I just couldn't figure it out and I gave up"
nekobon,"This won't affect the public interface, so we can refactor after updating from alpha/beta feedback and completing the official release!"
flexatone,"I know this was old code, while we are here we should raise a less general `Exception`, at least a `RuntimeError`... ```suggestion                     raise RuntimeError(""cannot get unique date index"", cls) ```"
flexatone,"```suggestion             raise RuntimeError(""cannot get unique date index"", cls) ```"
flexatone,Does this import need to be in the function?
chaburkland,"Ah that's true. This is an artifact of when `fx_data.py` and `index_data.py` were really tightly coupled, and so the nested imports were necessary. I'll put this at module level."
gdevanla,"Can these vales be empty in the excel sheet. Can we make sure if they are empty, then they are set to NULL in the database?"
gdevanla,"Can you add tests for `CUSIP`, `ISIN` and `ticker` here similar to `SEDOL`.  I am wondering why you removed `SEDOL` and `ticker` from the test list."
kocharR,Sure. should I set value to None or nan for those empty values?
vhquang,"You can use `from __futures__ import annotations` and remove the quote. In future version of Python, all type evaluation would be lazy by default. So it will make our code more future-ready."
vhquang,"I think we can drop this param, and just raise when we have duplication. That will force the user to choose to ignore the issue or handle it."
vhquang,I think this can be dropped as well.
vhquang,"I think the reader is the subclass of `_Reader`, not the actual base class. ```suggestion         reader: tp.Type[_Reader], ```"
vhquang,"Let drop the optional `ignore_duplicates`, and always raise: ```suggestion             some_duplicate_sec_ids = duplicates.index.unique()[:5].tolist()             raise ISSDuplicateSecIDError(                 f""Duplicate {from_col} include: {some_duplicate_sec_ids} ...""             ) ```"
vhquang,"Here we only have partial of the original `full_frame` in L76. Let save the duplication `[from_col, to_col]` into a selection and not drop that frame, so that we can return the full view for user to analyze. For example:  ``` dup_1 = full_frame[[from_col, to_col]].duplicated(exclude_first=True) dup_2 = full_frame[from_col].duplicated()  if (dup_2 & ~dup_1).any():     duplicates = full_frame.loc[dup_2] ```"
vhquang,```suggestion ```
vhquang,```suggestion ```
vhquang,```suggestion ```
vhquang,```suggestion ```
vhquang,```suggestion ```
vhquang,```suggestion ```
vhquang,```suggestion ```
vhquang,"I would prefer to have a docstring describe the test case, and what the expectation or the invariance of that test. That would help to know when the test case gets out of date, ie: not applicable anymore."
vhquang,Nice usage of MagicMock! :+1: 
vhquang,"I don't know if there is other use case for retrieving all securities mapping. For ISS usage, let require the selection and reduce `not None` checking."
gettodaze,"I think `tp.Type` refers to a class (https://docs.python.org/3/library/typing.html#typing.Type), but I want `reader` to be an instance of a subtype of `_Reader`, so like ``` (Pdb) pp reader <papyri.core.datastream_security_mappings.SEDOLReader object at 0x7fd060209910> (Pdb) pp isinstance(reader, _Reader) True ``` Should I use `Type` here?"
vhquang,"One request for change. Would you mind change this param to more generic name, for example ""sec"" or ""securities"", so that the interfaces are consistent across `sedol_to_ws_perm_id_co`, `isin_to_ws_perm_id_co`, `cusip_to_ws_perm_id_co`? It will make it easier for me to call them."
gettodaze,"I see. So if there are duplicates, you never want a return value at all?"
gettodaze,"Oh cool! I like using `(dup_2 & ~dup_1)` to save further remove another `drop` step, but shouldn't duplicates be `duplicates = full_frame.loc[dup_2 & ~dup_1]`? Why just `full_frame.loc[dup_2]`?"
gettodaze,"Sure! What kind of docstring are you looking for? I added a docstring and some comments, but I was intending this specific test to be more of a catch-all integration test, so I just added this and some more comments: ``` """"""Integration test with large dataset"""""" ``` Is that sufficient or should I add more?"
vhquang,"`Type` is appropriate for checking subclass (ie: instance of) as you describe. Further in the document you reference, they mention that usage:  > The fact that Type[C] is covariant implies that all subclasses of C should implement the same constructor signature and class method signatures as C.  Doing `x : Type[Y]` instructs type checker to make sure `x` has all  signatures and classmethod as `Y`. Not an equivalent of `x` is instance of `Y`, but I think that is a closest thing type checking can get to. In another hand, `x: Y` tells type checker that `x` needs to be instance of `Y`, which we don't want in this case."
vhquang,"Little more specific would be better. For example, are you testing a happy path (everything successfully run), or a sad path (all issues are correctly catch and raise)?  What I think of good docstring for testcase, would be a description of the passing scenario of that test. So that when a test satisfies that scenario, but fails, it could a signal that the test goal may be out of date (due to requirement change, for example)."
vhquang,"We will still want to return the ""clean"" values. Raising exception is to force the user to explicitly handle the issue. So if they do: ``` try:     res = sedol_to_ws_perm_id_co(...) catch ISSDuplicateSecIDError:     ... # res will contain non-duplicate mapping here assert res is not None ```"
vhquang,"`dup_1` marks all the identical (SEDOL, WS_ID) pair, and ignore where SEDOL can have multi DS, but end up with same WS_ID:  SEDOL A -> [DS_1, DS_2] -> WS_ID_X.  So, filtering with only `dup_2` (WS_ID duplication) would allow a full view of how the duplication happens: ``` SEDOL    DS    WS -------------------------- A            1         X A            2         X ``` But this is just me anticipating what user would want to see. Maybe we don't need that level of sophitication."
ForeverWintr,Did you mean to remove this class?
gettodaze,"@vhquang How about: ```         """"""Integration test with large dataset to check behavior in a wide range of cases and make sure it stays consistent.         In this case, resultant WS_PERM_ID_COs mapped from ISIN, SEDOL, and CUSIP should all match, and match test output.         Change in test output might signal an unwanted change in the underlying implementation."""""" ```"
gettodaze,Hmm I don't think our toy example works: ``` |SEDOL | DS | WS | dup1  | dup2  | ~dup1 & dup2 | |------|----|----|-------|-------|--------------| |A     | 1  |   X| FALSE | TRUE  |     TRUE     | |A     | 2  |   X| TRUE  | TRUE  |     FALSE    | ``` I'll think about how to improve it.
gettodaze,"Oh, nvmd, it should work if we don't pass `exclude_first=True`"
gettodaze,"Oh, but then I still need to do 3 dup calls, and still one loc inside the if statement and one outside. Am I missing something?"
chaburkland,It seems like there are a lot of repeated/duplicated dtype specifications. I think it would be good to try to get some definition reuse.
chaburkland,This is a redundant sort.
chaburkland,This is a redundant sort.
chaburkland,"You should be able to use `apply_iter`.  ```python frame = sf.Frame.from_concat(     frame.iter_group(""instrument_id"").apply_iter(handle_instrument_by_id),     axis=1, ) ```"
chaburkland,I think `frame.drop[frame.columns.isin(columns_to_drop)]` might be faster & clearer!
chaburkland,I think it's best to immediately set `frame = frame.to_frame()` as  soon as the grow-only part of the code has finished.
chaburkland,`apply_iter` applies here too.
gdevanla,"I would like to keep these attributes isolated from each other asset classes and hence the duplication. Maybe I can visit this later. For now, these just reflect the shape in which they are defined in the database tables."
ForeverWintr,Can we use `select_positive` or `select_nonzero` instead of this?
ForeverWintr,"Why does this take `*args`? Also, because it's not selecting, can we just call it `effective_count`?"
ForeverWintr,"You can decorator syntax for `apply_to_result` here: ```suggestion @apply_to_result def make_series(result):     return sf.Series((result,))   sum_result = apply_to_result(sf.Series.sum) normalize_result = apply_to_result(series_transform.normalize)  ```"
ForeverWintr,"These lines can be removed, right?"
ForeverWintr,"Can we replace this (and `sum_to_series` above) using `apply_to_result` , `make_series`, and a `median` calculation? np.median is the same as np.average when no weights are specified, I think."
ForeverWintr,"Did you get an answer to this? If not, what wasn't working?"
vhquang,"For `date` type, let keep them as `numpy.datetime64`, since I think that will be majority usage. My shift for `DateDate` is probably not done frequently."
ForeverWintr,This was a bad replace-all! I'll fix.
ForeverWintr,Good question! You can use either `Element` or `Missing` for that; the only difference is how intermediate calculations are handled. `Missing` may skip those intermediate calculations; `Element` is passed to them. 
ForeverWintr,"This is an example of catching and re-raising the exception with some more context, so I actually want to catch all exceptions here. Put differently, this doesn't actually suppress any exceptions, it just adds context to them as they are raised. "
ForeverWintr,"I agree that would be more readable, but I chose this approach for its ease of writing/revalidating. It's nice to have an easy mechanism to hardcode an expected frame; Chris often uses `frame.to_pairs()` for this, but I found `to_str` to be a compromise between readability and revalidation overhead. "
gettodaze,"Gotcha, thanks for the context!"
nekobon,I didn't know about ndarray.item!
MadisonAster,Yeah that name makes more sense. I added an *args argument because the majority of these functions also required a signal input. Accepting extra args makes it possible to test all these all with the same test
vhquang,"I think we can safely ignore this. Inside the ESG database, there are also other data vendors: - EQL: Equileap - SA: SustainAnalytic - TC: TruCost  We don't need to worry about EQL, as we don't use them anymore."
gettodaze,Oh good to know! Thanks for following up Quang!
chaburkland,"I think this section could be much simpler with a few `date_util` calls. I'm thinking: ```python assert len(options.run_date_range) == 2  data_dates = du.date_range(*map(du.date_str_to_date, options.run_date_range)) # this is end inclusive by default!  run_dates = [d for d in data_dates if USMarketCalendar.is_working_day(d)] ```"
chaburkland,"From what I can tell, this change essentially moves the current logic inside a loop of `run_dates`. I think it might be better to have a helper function that does the core work, and then have `run_dates` go through that. Something like:  ```python for run_date in run_dates:     cls._process_run_date(....) ```  It's just a suggestion, as I feel that the level of nesting is pushing the boundaries for how long functions should typically be."
vhquang,"Maybe we can remove comment in L206, as it is not applicable anymore."
vhquang,Thanks for catching this. It slipped off my review as well...
vhquang,I see the index is aligned. Maybe this comment gets out of date?
vhquang,I would think the index is unaligned in this test.
gettodaze,"Yeah, luckily I remembered Yu saying ""cusips are expensive, so we don't want to use them"", and realized I needed to triple-check the order."
gettodaze,"This is actually for my `co_id` series, not the input `sedol` `cusip` `isin`. I'll update the comment to be `# if no nan, we have mapped everything and can stop looping`"
gettodaze,"Yeah, maybe I am misusing the term `align`. I'll change it to `different_index`, the point being that sedol has index `[1, 2, 4]`, cusip has index `[1, 4]`, and isin has index `[3, 4]`."
gettodaze,"I see. I'll change the previous ones and leave this as ""empty"" because I think that's more descriptive."
nekobon,```suggestion # These CG_ sets are based on 6-region country groups ```
nekobon,"Country group fields (e.g. _cg_rafi_six_region_field), values (e.g. CG_AW), and names (e.g. ""aw"") seems to be used together. How about to have a tuple or namedtuple to pack these three together?"
gettodaze,"Just so I understand correctly, this method is being deprecated?"
gettodaze,"For 198 `f = original[cols].to_frame_go()`, is there a reason to do a column selection instead of a `drop`?"
gettodaze,What's the reason to have two separate `from_concat`s on the same axis?
chaburkland,Yeah no one was using it except a test!
chaburkland,Haha I didn't see that. I'll combine these.
chaburkland,Oh I didn't see that - yeah it would read better to use a `.drop`. I'll update
flexatone,Nice. I am surprised we have not made this change yet!
flexatone,Nice dynamic regex formation!
ForeverWintr,Good idea! That might simplify this. I will try it. 
gdevanla,nitpick: Do you want to make these names symmetric? ``` get_ra_to_vendor_field_map get vento_to_ra_field_map ``` 
gdevanla,"I wonder if avoiding this loop, with the following statement would work and if that would be efficient given that we may not have that many duplicates. Maybe creating these extra frames is expensive?  ``` for subframe in possible_dups.iter_group(field_sec):     indices = (subframe.loc[sf.ILoc[:-1], 'ulinkenddt'] <= subframe['ulinkdt'].shift(-1)).any()     if indices:         dup_indices.update(subframe.index) ```"
kocharR,"As I showed you, if no values are set in excel, it will inert null in DB"
nekobon,"`EODFlagSet` is used as default `data_available_group`, so every data sourcer that doesn't have explicit `data_available_group` (such as aasite-related) would also depend on FX data.  Instead, can you make a new class (something like `ReutersFXAvailableWithEODFlag` to use it for `get_bb_daily`?"
chaburkland,Thanks for catching this - yeah I'll push this now 
chaburkland,"I think I'm missing something because I don't understand the suggestion.  The other quick point is that this is a naming convention we use on many different papyri readers, and so I wouldn't want to change this because then it wouldn't align with our public readers, and I can't change those due to backwards incompatibility concerns."
chaburkland,"This is a great suggestion. I'll have to tweak this a little bit to get it to work, but I like this alot better - thanks Guru!"
ForeverWintr,"```suggestion         component_histories: tp.Dict[str, ComponentHistory], ```  There is a base class for all the values of this dict. :slightly_smiling_face: "
gettodaze,"Note to reviewer: This is the reason for the PR, to handle `MissingRemoteMirrorFileException` for `DailyPerformance._portfolio_aum_from_rows` if `allow_missing=True`"
nekobon,How about to assert these values are the same before dropping? Just in case.
chaburkland,"Is that necessary? This is just column selection by boolean array, so if the values are different, then reality itself is falling apart."
nekobon,Oh sorry I thought it was the FX data itself. 
gettodaze,"Cool, I didn't know you could do this! `.type` for strings always going to be a reference to the same `str_` singleton? If not, maybe `==` is more appropriate."
gettodaze,"I think maybe we want to just use `np.dtype(int64)` here, if I'm remembering correctly from code review."
gettodaze,Did you intend to change this function?
vhquang,"I am not familiar with Solative Corporate Action, but I have some questions: - Why do we want to get `max(_SECURITY_NAME)`? Is it intended to get latest security name per effective date? - Is it meaningful to have `''` for treatment. What is an example of such row that we want to keep?"
vhquang,"Let wrap this up in context manager, so that we close the transaction properly: https://docs.sqlalchemy.org/en/14/core/connections.html#basic-usage"
vhquang,"```suggestion             Solactive corporate actions frame, indexed by sedol. ```"
vhquang,"Will this expect to run with `latest_effective_only=False`? If we don't anticipate it, I think it is better to check for duplication when it is `False`, so we can raise error in a better context. (And make it clearer we expect that to be an error)"
vhquang,What is our intention for having the attributes as private?
vhquang,Can these columns be referenced directly to `CALive.COLUMNS`? ie: ``` columns = CALive.COLUMNS ```
ForeverWintr,:smile: 
vhquang,"I think in code review, we want to convert all `None` in `IssuerID` to -1. I am still thinking whether we need to do that. At the point we write out sourced file, I already merge new and old SEDOL/ISIN/CUSIP. Moving on forward, we would use that triplet, and there is no need of IssuerID anymore. I might as well drop that column. I just keep it for now in case we may discover needing it later.  To your question, the intention is to keep it as Python `int` rather than numpy `int64`, since there is no casting available for `None` to `int`. Python `int` will preserve the `None`."
vhquang,"Yes John. It is in the reader, that whole class will need to be re-written. Sorry, I should have mentioned that."
vhquang,"Same object identify is my interpretation of checking `dtype.type`: ``` ipdb> sr.dtype.type                                                                                                     >>> <class 'numpy.str_'> ``` It is an actually class, not an instance nor a derive of that class."
nekobon,Oh! I forgot to push my local default :joy: 
MadisonAster,great point! cleaned this up now.
MadisonAster,turns out I just needed to dropna on the signal before passing to np.average. This only affected comparisons.weighted_average.
gettodaze,"What is this used for? If static frame, does static frame accept `datetime.date` as a dtype?"
gettodaze,Do you foresee the strong possibility of reusing this code soon? I personally prefer deleting old code like this otherwise. You can always capture it from git history.
gettodaze,"Did you want to commit this `/tmp` path to default? I think it might be better to have fp at least be something like ``` Path(papyri.get_tlt_temp_dir(), 'iss_parquet_{as_of_date}.zip') ``` because its more expected."
gettodaze,"I think this is personal preference, but I usually like having my class constants in CAPS to distinguish them from other variables."
gettodaze,I like the context manager :smile: Is there a reason to use `ISSWriter.get_connection` instead of `cls.get_connection`?
gettodaze,"I think breaking this comment up might help flow a bit better, because the first sentence refers to each if-else block, and the second only refers to the first block. ```suggestion     # All tables need to join with Issuer table, to get reliable SEDOL/ISIN/CUSIP (after 12/2020).         if table is ISS_Issuers:             # Issuers can be sourced by itself.             smt = f""SELECT * FROM ESG.stg.ISS_Issuers WHERE {ISS_Issuers.AsOfDate} <= '{as_of_date}'"" ```"
gettodaze,I like the table names `tb` and `comp`! But I wonder if it might be better to decouple the names of each of the table classes from the name used in the query. That might make the code more easier to refactor if any names change.
gettodaze,"I think it might be good to leave a note of why we join on as_of_date and overall what the query is doing. Also, maybe I just forgot, but I thought that we wanted to select the `max(data_date)` for each `as_of_date`?"
gettodaze,"There might be a way to standardize this so we make sure that it exactly matches the query.  Maybe your query could be more like: ``` issuer.{ISS_Issuers.SEDOL} AS {cls.ISSUER_SEDOL}, issuer.{ISS_Issuers.ISIN} AS {cls.ISSUER_ISIN}, issuer.{ISS_Issuers.CUSIP} AS {cls.ISSUER_CUSIP}, ``` Then you could have ``` sec_cols = [ISS_Issuers.SEDOL, ISS_Issuers.ISIN, ISS_Issuers.CUSIP] issuer_sec_cols = [cls.ISSUER_SEDOL, cls.ISSUER_ISIN, cls.ISSUER_CUSIP] ```"
gettodaze,"I think it might be good to have a class constant for `np.datetime64(""2020-12-31"", ""D"")`."
gettodaze,What is `dropfalsy` doing?
gettodaze,"Nvmd, I was trying out this query ```                SELECT                     *                 FROM                     ESG.stg.ISS_ClimateImpact AS tb                     LEFT JOIN (                     	SELECT                      		max(AsOfDate) as SelMaxAsOfDate,                     		DataDate as SelDataDate                     	FROM ESG.stg.ISS_ClimateImpact AS sub_tb                      	GROUP BY sub_tb.DataDate , sub_tb.AsOfDate                      	) as sel                     		ON tb.DataDate = sel.SelDataDate                     		                     LEFT JOIN ESG.stg.ISS_Issuers AS issuer                         ON (                             tb.AsOfDate = issuer.AsOfDate                             AND tb.IssuerID = issuer.IssuerID                         )                 WHERE tb.AsOfDate <= '2021-10-05'                 LIMIT 1 ``` but its not only complicated, it also seems slow too."
gettodaze,"(I misunderstood SQL grouping; I thought it would be a lot simpler than it was haha. You were right, it does need a subquery and that considerably complicates things)"
gettodaze,"I might just be mistaken, but is dirty the right word here?"
gettodaze,"Maybe I forgot, but why not call `process_table` here?"
vhquang,It will be completely re-written. I am doing that on separate PR for the reader. Hence it is all comment out here. The other PR will do the clean up.
vhquang,I can't remember the context for adding this. It may belong to the out-of-date reader. I will take this out.
vhquang,"Ah right, this function previously was static. I change it to classmethod to break the query into separate function, but forget to update this. Thanks for catching!"
vhquang,You are right. I miss this that step. Thanks for catching this.
vhquang,"I am completely open for suggestion. ""Dirty"" is the first word comes to mind, when I try to find the opposite of ""clean"" as the function is doing clean up. What word comes to your mind?"
vhquang,"In the old data, not all rows are filled with identifiers. Some of the will have `None` for SEDOL/ISIN/CUSIP. The `None` will be converted into empty string, which is falsy. The end result of this drop is the same, whether we drop or not drop those empty string, since the securities from `Issuers` are all empty string prior to 12/2020. However, doing this is a bit easier for me in case I need to drop in for debug, to see how many meaningful data I am copying to the result."
vhquang,That's a good suggestion. Thank you!
vhquang,"I agree on the point of decoupling. And in fact when I first writing this query, I need to check if the table names all match their database tables. However, having this convention saves us from making a separate mapping to database tables.   And also, having the mapping to database tables adds one more layer to tracing usage. With it as currently, it is more obvious to see which query that the class and its columns are being used in. With the mapping, we will need to trace its target mapping, then find the usage of the target mapping.  I agree on your point. But I would like to defer it a bit further, until we actually see the problem that will give us benefit."
vhquang,"It also makes it unpleasant to look at in the code, since I would need to templating all the inner sub-query as well."
vhquang,"It is solely for you (aka: John McCloskey). I don't intend to have this to live on `default`. Since I won't upload file onto static, until the sourcer is stabilized and no more change on the sourcer, this serves as generating input for the reader till then.   I have slight preference not to make temporary code looks like it is well-intended feature. (But I will agree there is no harm in doing so)"
vhquang,I takes it back. It creates a bug for me. `dropfalsy()` will result in an unaligned series from the original index. Using it to fill in value will undo all my effort in cleaning up numpy string.
flexatone,Do you want to log this instead of print?
flexatone,"If this ever runs on a worker, `today()` will be relative to UTC timezone: should this always be a in a PT context?"
flexatone,"If you are going to test this interface, you might want the CLI to optionally take an `input_data_revision` rather than always getting the latest."
flexatone,Here too we might consider if timezone matters.
gettodaze,"@flexatone Both of these changed files are intended to be run locally only (this one is in sketch, but the other is not); should I safeguard against someone trying to run this on a worker? I also haven't written tests for these for that same purpose. Should they perhaps both be sketches?"
nekobon,I see `methodology_other` in Robert's table. Is this requested?
chaburkland,What is the reason you are using a `nullcontext` manager? It doesn't appear to be doing anything.
chaburkland,This argument only exists for a sketch. Maybe remove this?
chaburkland,"Minor nitpick, but maybe rename `i` -> `series` or `s`? The name choice made me stare at this longer than needed cause I thought I was missing something"
chaburkland,"Out of curiosity, what is the reason to use `MutableMapping` instead of `Dict`?"
chaburkland,"Is this decorator correct? `forward_missing`'s inner method accepts `*series, **kwargs`, but this function has it's first positional argument as a `FrameFactory` instance"
chaburkland,Can you rename this from `pd` -> `pdata`? `pd` should probably only ever be used as an alias for pandas
chaburkland,"I don't think you need to make this `d` object. I'm pretty sure series have a `.items` method on them, so that should work"
chaburkland,Is the `ValueError` to handle NANs?
chaburkland,This seems like a non-standard column name? Plus it also seems a bit buried away in the implementation. Can you give me a bit of context for this? (Unless that's too difficult lol)
chaburkland,Is it possible for these iterators to be different lengths? It might be good to do some form of handling
chaburkland,I had a feeling that `test_spec.1632810886.1628832289_20210927_233222` wasn't going to cut it anymore. `test_spec.1633573111.1632380861_20211006_19091` is definitely the way to go.
chaburkland,"It might be good to delete this commented-out code, or comment why it's not deleted."
chaburkland,"A minor suggestion, but I typically like to name my expected frames `""expected""`. That way, if the comparison fails, the summary report you get back will clearly show which frame is the expected one. Otherwise you'll get the default `f1` and `f2` frame names."
chaburkland,Why is all this code in a `__init__.py`?
vhquang,I didn't see Robert's email. It makes sense now what need to be updated.
nekobon,I think you forgot to remove this
vhquang,```suggestion ```
flexatone,"well, it is easy to ensure this is in pacific, so maybe better to just do that."
ForeverWintr,"If `launch_args.upgrade_spec` is `False`, the `nullcontext` simply returns its inputs (the original spec files) unaltered. It's allows me to differ the behaviour without writing two with statements. "
ForeverWintr,Good point. I'll look into either removing this or adding a test that exercises it. 
gettodaze,"One time Brandt told me he didn't like `all` with a short tuple, and instead preferred `and and`. But personally I don't mind haha. Just putting that out there in case someone else mentions it."
gettodaze,"Again, I prefer not having old commented out code on default unless you will use it again soon, but maybe its just my preference."
gettodaze,Did you intend to have this? ```suggestion         self.security_mapper_class = security_mapper_class ```
gettodaze,"This could be private, no?"
gettodaze,I think you could do `du.year_mo_day_str_to_date`
gettodaze,"Here, you could do maybe `.item()` to convert to date."
gettodaze,"If you did something like: ```suggestion         sec_mapping = sf.Series.from_concat(             (map_per_date(iss_as_of_date, f) for iss_as_of_date, f in sec_fr.iter_group_items(ISS_Table.AsOfDate))         ) ``` You wouldn't need to get the `iss_as_of_date` from the frame."
gettodaze,I didn't know you could do that! I had always been doing `.to_frame()`
gettodaze,"I think `sf.FrameGO` is a subclass of `Frame`, right? I don't think this func needs a `FrameGO` instance, so you could just do: ```suggestion         self, sec_data_date: datetime.date, frame: sf.Frame ```"
gettodaze,"This is fine, but I think it might be safer to do something like (and then either removing the `shift_lag_date` default arg, or changing it to false): ```suggestion         # TODO to implement later.         if shift_lag_date:             raise NotImplementedError(""Not yet implemented lag date shifting."") ```"
chaburkland,"I guess what I mean, is that it seems to me this could have been a simple if-statement: ```python portfolio, report = launch_args.portfolio_spec, launch_args.report_spec  if launch_args.upgrade_spec:     portfolio, report = spec_upgrade.updated_specs(         portfolio_path=launch_args.portfolio_spec,         report_path=launch_args.report_spec,     ) ```  Granted the return value of `updated_specs` would need to change, but hopefully this shows you what I'm not understanding."
johnjhawk,"I know this is not part of the pull request, but I was recently reading that checking the length of the index is super fast. ```python if len(morining_trades_df.index) > 0: ``` per SO: https://stackoverflow.com/questions/19828822/how-to-check-whether-a-pandas-dataframe-is-empty "
johnjhawk,"Can we get IT to create a morning_trades (or some better name) email group, so we dont need to have a new release just for an email update?  Also, Jim's team could manage it and we could be out of the email to individuals game."
gettodaze,Are these changes used anywhere?
gettodaze,"It feels strange to me to have the `suffix` argument where it has no use, but I can't immediately think of better alternatives. Maybe raise a value error if it is passed?"
gettodaze,Is this `NOTE` relevant to you?
gettodaze,"Maybe this constant could belong at class or module level? Here is fine too. ```         weekend_codes = {122, 289, 1001}  # WEEKEND, WEEKENDS, ALL-WEEKENDS ```"
gettodaze,"What if one of these days is a holiday? Could you leave a comment/docstring maybe like: ``` Extract EXCHANGE_CODE_DS with thu_fri weekends and fri_sat weekends, respectively.  Look at the first available Thursday, Friday, and Saturday and extract exchanges with weekends on those days. ``` Also `dt.date(2007, 1, 4)` seems like it might belong as a class/module level constant."
gettodaze,Do public methods need docstrings here?
gettodaze,Is there a reason not to combine these two lines?
gettodaze,Why does the empty series need an index date and not the empty frame?
gettodaze,"Good idea, I have no idea why `nat` isn't a numpy module attribute."
gettodaze,Could you leave a comment on how you decided chunk size?
gettodaze,Could you leave a comment explaining the file structure? Is this an unzipped parquet?
gettodaze,Why give the same index as the first column?
gettodaze,"I think this docstring is more applicable as a comment in the calling function; this function is indifferent to what its inputs contain, right?"
gettodaze,"I really like this class structure and timing comments you have here. One minor suggestion for your own sake, is maybe to just comment when you did the timing (so that it makes sense 2-3 years down the road)? Or maybe 148k securities gives you all the info you need."
gettodaze,maybe combine to one line
gettodaze,"I see you do this move twice, I would vote to move it to a static method somewhere. It's simple code, but it also looks a little ""magic"" to me."
gettodaze,"This might be a silly question, but why is the chunk size different here?"
gettodaze,"I think ""_yearmo"" and ""eom"" could be constants."
gettodaze,"Oh, I see it is. Could this go in a different utility module? I'm not clear on how it belongs in `crsp_price` other than maybe a historical reason."
gettodaze,"Ah, I see, this is the docstring for the base class."
gettodaze,"maybe `dt.date(1960, 1, 1)` could be a module or class level constant? Or just leave a comment as to why that date?"
gettodaze,"Oh, huh, somehow I always thought that `group_items().apply` only gave one argument to the function, not two. Good to know."
gettodaze,Where do you get it back?
gettodaze,Do you just get the unique ones back in _sum_dividends?
gettodaze,Oh nvmd I see it is just one ds_sec_code.
gettodaze,Nice comment
vhquang,"It was back when I didn't know WorldScope have full security history. Now that I know we only need latest WorldScope snapshot, I don't think I need to keep mapper class after I instantiate its instance."
vhquang,"I have same preference. This will be refactor soon in next PR, once I start working on features of the reader. But now that I have a sketch, I can dump this into sketch and keep the main code clean."
vhquang,"I see. However, this is pretty lightweight. I would wait until I have a second usage for `date_util` to start importing it."
vhquang,"Cool, I didn't know about this. Thank you!"
vhquang,This is exactly what I need. Thank you!
vhquang,"I like `.to_frame` better, so that we can track usage and more explicit on transform direction."
vhquang,"Right, this function used to modified the frame and returned the modified frame, before I realize returning Series is simpler (and faster, as I think concat Series is more lightweight than concat frames). Thanks for catching this!"
chaburkland,"It was more of a convenience utility method, as opposed to a full blown utility method. It feels a bit weird to put a partialed `sf.Frame.from_parquet` with some hardcoded constructor kwargs in `sf_util.py`. Since this method is widely used throughout the crsp & ds price reader/writers, it went here.  I'lll give it some more thought though - it might have outgrown it's current placement"
chaburkland,"Hmm good catch. I did it for interface consistency, but looking back at it I see this isn't even on the public API, so there's no reason for it. I'll remove the argument :+1:"
chaburkland,"To me, yes. To this PR, no. Haha"
chaburkland,"The only client of this reader is the datastream price writer, but adding docstring doesn't hurt."
chaburkland,"All of these days are holidays. The code is saying, find all codes that have these days market as holidays, and collect them into a set.  I'm not sure these would be good class-level constants, since they are only used once (i.e. here), and are not prone to change."
chaburkland,"The `EMPTY_SERIES` is used to concatenate rates, and so we need to ensure it concats nicely, even when empty, and so the index is needed. The `EMPTY_FRAME` is used to signal missing data, and callers will call `if frame.size` to determine whether or not to proceed, so the index is irrelevant."
chaburkland,"I will add a module-level docstring explaining in general how the writers work and how their are structured, as it will be too verbose to explain in every helper function what they are doing."
chaburkland,"The documentation says so haha. I asked Forrest/Xi about this, and they confirmed they wanted this behavior."
chaburkland,Oh I really like the idea of time-stamping the performance benchmarks! :+1:
chaburkland,Good catch! It doesn't need to be - I will make it deterministic based on the incoming tuple size.
chaburkland,"Hmmm. I'm not sure I agree. They are only used in this one place, so I think it's fine to let them be local to this function only."
chaburkland,Good point - it's not clear why I chose this. Let me make a comment.
chaburkland,"This is from Brandt! And yeah, it's a good comment :)"
chaburkland,"It's minor preference, but if you like the other way I can change it."
ForeverWintr,"I guess the question is why is `updated_specs` a context manager.  `portfolio` and `report` are file paths, and `updated_specs` creates temporary files containing updated versions of the spec. I used a context manager because I don't want to leave those temporary files laying around. The context manager deletes them when it exits.  "
ForeverWintr,"I believe best practice is to make input types as generic as possible, and output types as specific as possible. I think this was an attempt to do that. "
ForeverWintr,"You're right! I think it works, but I will update the decorator to reflect that `*args` is no longer just series. "
ForeverWintr,"Repurposing `pd` was my celebration of not having pandas imported in this project! Why you gotta kill my joy?  I agree pdata (or even `price_data`) is more descriptive, and will update it. "
ForeverWintr,"Yes (or other 'missing' values, like `''`)"
ForeverWintr,"Thanks for pointing this out. I should use a symbolic constant for this!  This name is used for display in the config file, which is the 'ui' for kleio at the moment. That's why it has the `' (y)'` component. Is that what you mean by non-standard?"
ForeverWintr,"Mostly for convenience of importing. If I don't put it here I need something like a `main` module within `spec_upgrade`, and that felt redundant.   ``` from portcullis.core.portfolio import spec_upgrade  spec_upgrade.update_portfolio_spec ```  reads better to me than    ``` from portcullis.core.portfolio.spec_upgrade import main  main.update_portfolio_spec ```"
ForeverWintr,"Yes it is, but in this case that's ok. What I'm doing here is copying existing formatting in the old sheet to the new sheet I've created, so if I've added columns to the new sheet, I won't have formatting to copy. "
ForeverWintr,I'm glad we're on the same page!
ForeverWintr,I didn't know `compare_frames` looked at the frame name! Thanks!
ForeverWintr,"Yeah we're discussing this with AAIM right now. I think we'll use an input file for this. I thought of having IT create an email group, but it wasn't clear to me how that would work. As all the emails here are pimco emails, it seems confusing to have the group be something like `trade_plan@rallc.com`. "
ForeverWintr,"I think that SO answer is wrong! It's possible for the df to be empty and have an index with length, e.g. if it has no columns. Probably using `morning_trades.empty` would be better here."
johnjhawk,"Great, either way is fine. I like the email group because it adds some verification when adding emails. It would be really nice if we could get pimco to create and manage the group."
johnjhawk,"yep, good point!"
ForeverWintr,I suggested that too! Jim wants us to maintain the list so we know who at pimco is getting the emails. I should've included imdev in the email discussion!
gettodaze,But this method is an override of a parent method right? So shouldn't it have the same arguments?
gettodaze,"I slightly prefer the other way, but I have a tendency to write too many things in one line."
chaburkland,"It is an override, but Python doesn't required that overridden methods have the same signature as their parent.  I still lean towards removing suffix, since this subclass is already breaking some object-oriented principles (it's `_source` attribute is a table name - the parent attribute is a file path) and really acts more like an internal helper class for one of the writers. I think I will add a doc string that highlights how strange this class is."
gettodaze,"o.O wow haha, I see! Sounds good!"
gettodaze,"@vhquang, I am so glad you bring up these comments. I think I will take a page from our ISS SDK book and do all the heavy query lifting in python."
gettodaze,"I was originally hoping to keep them private, but Robert wanted them used in a report, so they are no longer private. I'll make that change."
gettodaze,"Like this? ```         try:             return f.set_index(cls.SECURITY_SEDOL)         except ErrorInitIndexNonUnique as e:             raise ValueError(                 f""Duplicate SEDOL found and {latest_effective_only=}. Try latest_effective_only=True.""             ) from e ```"
vhquang,"I feel I need to ask, why are we removing the typehint?"
vhquang,"Patching global object done in this function really makes me feel uncomfortable. And I don't think the benefit worth the cost.  If we need separate sets of query, we can pull out the making of `query_spec` in `DSPriceLocalDailyCoreWriter`, and make a derive of that class with new sets of query. That will leave the original query intact, while trim down the data size for your testing writer."
vhquang,"I am missing the context of why these writers are needed. Our process is typically for preparing the data we need for our operation. I don't think we intend to source data for testing. Couple questions I have: - What will the sourced file be used for? - For testing/iterating, can this be done as one off? "
chaburkland,"I removed them for style purposes. No other `get_writer` in this module has typehints, and I don't see how they add anything, since the technical proper typehint is `get_writer() -> ABCDataWriter:`, but that is the same for every single method, making the typehint extremely redundant."
chaburkland,"The sourcing will be used to create test files that have the exact same structure as the normal datastream price readers, except with a fraction of the size.  This will typically only need to be run ad-hoc (that's why I didn't add a schedule to the writing configs), but I added the writers to make it easy to source these again in the future.  For example, if we later want to change the Worldscope methodology, or even the datastream pricing methdology, these writers will provide a good path for more quickly iterating on the change.  So basically, I forsee this being run in an ad-hoc basis."
gettodaze,```suggestion             as_of_date: ISS data as_of_date ```
gettodaze,"Maybe consider `from_as_of_date` constructor with the same arguments (but taking a `datetime.date` `as_of_date`.) Then, the `__init__` can maybe take in  an `fp`, a `security_mapper` instance, and the `shift_lag_date` flag. "
gettodaze,"Then if the `from_as_of_date` takes a `datetime.date`, then this method might just return its argument."
gettodaze,"Or, I wonder if `as_of_date` arguments dont usually get docstrings."
gettodaze,"I see. If the performance difference isn't too noticeable, I think though that using common utilities helps prevent errors due to typos etc."
gettodaze,So did you want to change the typehint?
gettodaze,"Oh, did you find sometimes the `_sec_mapping` is a different type?"
gettodaze,Why not just `fgo[field_co_id] = sec_mapping`?
gettodaze,Cool way to find errors!
gettodaze,```suggestion             security_mapper_class: mapping class of Company ID vendor that we want to translate ISS Security ID to.                     WorldscopeSecurityMapping is currently the only implemented mapping class. ```
vhquang,"This is updated in next PR, since I need to import `date_util` for other purpose."
vhquang,I do. And I thought I already did... :(
vhquang,Not from your ID mapping result. And I shouldn't need to do that conversion. It was a left over from debug. The reason for different type is in below comment.
vhquang,"The length of `sec_mapping` is different than length of frame, due to the exclusion of the bad ISIN GB0005405286. It results in the new column in Frame GO revert to Python string, because of the missing index. Since I will need to create new array anyway, I choose to do that in the frame, then fill value in. I tried to look for a `reindex` with `fill_value`, but that doesn't seem to be available for Series yet."
vhquang,I wonder if previous authors wondered the same thing.
gettodaze,"Wow, that's interesting!"
vhquang,"I was thinking of: ``` if latest_effective_only: # given duplicates, grab the first entry only (greatest effective date)     f = f.loc[~f[cls.SECURITY_SEDOL].duplicated(exclude_first=True)] elif f[cls.SECURITY_SEDOL].duplicated.any():     raise ValueError(f""Duplicate SEDOL found and {latest_effective_only=}.) return f.set_index(cls.SECURITY_SEDOL) ``` It is just a minor preference though."
gettodaze,"I know that the ```         try:             return f.set_index(some_col)         except ErrorInitIndexNonUnique as e: ``` is a standard move we do because the set_index checks for duplicates anyways, so it saves the extra duplicate check.   But, update from yesterday's code review, I will be getting rid of this branching anyways because I don't even use the `latest_effective_only=False`, so there's no reason to support it."
flexatone,"If we want to replace space with None it would be something like: ``` frame = frame.assign[""SEDOL""].apply(lambda s: s.fillfalsy(None)) ``` Actually, this would cover both NaN and spaces, so it could replace line 118 too...   "
flexatone,"Since the new ""context"" recreates the interface of the whole module, would it be better to redefine the module, and draw all objects from that one new module? Something like:  ```python >>> import multiprocessing as mp                                                                                                                                                                                                                                                >>> mp = mp.get_context('spawn')  ``` Without doing this, `cpu_count` is actually coming from a different context, which may not matter, but could lead others to inadvertently import objects from a different context."
flexatone,Should this whole module be put in the test directory?
gettodaze,"Just curious, why a dataclass and not a namedtuple?"
gettodaze,"I still think that using `__name__` is a bit of a smell. If `ISS_Table` classes all implemented `.NAME`, then you wouldn't have to use `__name__`. If the bus uses `__name__`, then we can't read previous files correctly if we change class names. With just `.NAME`, we can decouple the class name and the stored frame name."
gettodaze,I like the docstring/comments!
gettodaze,Could this maybe be `raw_bus.iter_element().apply(change_index)`?
gettodaze,"Does this work? ``` lag = cls.TABLE_TIME_LAG[frame.name] return frame.relabel(lambda d: du.shift_months((d + lag.day).item(), lag.month)) ```"
gettodaze,I really like these changes :D
gettodaze,I really like using `as_of_date_str` to distinguish date objects and date strings!
gettodaze,"But I wonder if you can take a date here and convert it to a string yourself, then the caller doesn't have to worry about correct formatting. But I could see it either way."
gettodaze,"```suggestion         shift_date: bool, ```"
gettodaze,Just also a note of what I said earlier that we might want this to take an fp.
chaburkland,I really like this idea! It's a much more appropriate place to put these readers/writers.
chaburkland,Wow that is really subtle behavior. I will update this (and in the other places I am using this same pattern!).
vhquang,"I see your point, and agree with it. But let me address it in separate PR, since many places are using the `__name__` convention now. And I would need to do comprehensive check for thorough refactor. Feel free to take a stab on this though, as now we both agree on it."
vhquang,"That is what I tried originally, thinking it should work. However, the result of the `apply` turns into a list of name of the frames, instead of the frames: ``` m = list(raw_bus.iter_element().apply(change_index)) >>> ['ISS_ClimateImpact', 'ISS_NBR'] ``` I may tag Chris to see if he has any insight."
chaburkland,Maybe `du.date_str_to_date(previous_spec.geu)`?
chaburkland,This should probably be all caps to signal it's constant-ness
chaburkland,"I think there should be an `assert geus` at the beginning of the of `_map_sedol_to_sec_id` otherwise you could get a `NameError` here, which wouldn't be as helpful as an assert I think"
chaburkland,"Just a thought, the nested function I think adds a bit more code than is necessary. I think `sedol_to_sec_id` could just be a `staticmethod` on the class, and then the caller is responsible to apply the map using `iter_element().apply`. You'd need to partial `geus` into it, so that would be the only aesthetic downside."
chaburkland,"If you take my next suggestion, this assert could go where `geus` is defined directly."
chaburkland,"Out of curiosity, why is the `str` value of `Events.ADDITION` and `Events.DELETION` not desired?"
chaburkland,I think all of these constants should be prefixed with `FIELD_` to indicate their use as column field names.
chaburkland,"I'd remove this print, or change it to a `logger.debug`"
chaburkland,"Super minor nitpick, but can you rename this from `p` -> `fp`?"
chaburkland,"I am really confused by this. It seems like the test workflow goes like this: 1. Get `CALive.get_raw_addition_deletion_frame` 2. Write to a temporary tsv file 3. Read in the temporary tsv file as a frame 4. Mock `CALive.get_raw_addition_deletion_frame` with the frame we read from tsv  Unless I'm missing something, there's no reason to mock anything here"
chaburkland,Cool test!
vhquang,"@flexatone The unittest you can run to trigger this is: ``` uroborus  augur/augur/test/test_iss_reader.py --names ""test_shift*"" ```"
vhquang,"Currently in the implementation, the date object only used in the initialization, afterward it is used as a string (for query purpose). So I convert date to string as high up in the call chain, when string is needed for the first time."
vhquang,I take it back. Not need to think about formatting is a good reason to keep it as date. I will update it.
vhquang,"I think it would. However, there are couple points I am thinking: - The result of the lambda will be python dates. I would prefer to keep numpy dates, while also not relying on static-frame to do that implicitly. - Using the helper `_shift_numpy_date`, I can test that function separately for corner case. One mistake I got originally is thinking `du.shift_months(d, lag.month) + lag.day)` is the same as `du.shift_monts(d + lag.day, lag.month)`. That mistake is added in the unittest to make sure it is now covered."
vhquang,"I slightly prefer `dataclass` for this case (aka: defining shape), to put typehint for its attributes."
gettodaze,"> That is what I tried originally, thinking it should work. However, the result of the `apply` turns into a list of name of the frames, instead of the frames:  Yeah, that's confusing! But I think it is just a standard behavior of `sf`; the `__iter__` iterates the index, not the values. ``` In [1]: s = sf.Series(list('abcd'))                                               In [2]: s                                                                        Out[2]:  <Series> <Index> 0        a 1        b 2        c 3        d <int64>  <<U1>  In [3]: list(s)                                                                  Out[3]: [0, 1, 2, 3] ```  Can you try just displaying `raw_bus.iter_element().apply(change_index)`?"
gettodaze,What do you mean by defining shape?
nekobon,Is it still possible to have `file_path` file half written if it fails in the middle?
chaburkland,"Nope!  `file_path` doesn't actually exist until the context manager is exited! `atomic_write` provides you with a handle to a temporary file `tmp_fp`, and you do all your work on that file. When you are finished and the context manager is exited, it will perform an atomic rename from `tmp_fp` -> `file_path`.  If anything fails inside the context manager (i.e. where the file writing happens), then the `replace` call never happens"
flexatone,How do you determine the best chunk size? A comment might help.
gettodaze,"Wow, what a change! Thanks!"
gettodaze,"In code review Tom actually explained how I can bypass the need to assert anyways, so that become moot, but thanks!"
gettodaze,"Not exactly sure, but the database has action types `Member addition` `Member deletion` which are the `Events.ADDITION` and `Events.DELETION`, respectively. The mockup for this report instead had values `addition` and `deletion` so I just remapped them. I could've suggested to use the raw values, but I didn't think it was very important either way.  Would you have suggested to use the raw `Member addition` `Member deletion`  values?"
gettodaze,"Yeah, I will just delete this file output. It was for QC."
gettodaze,"Sorry, this was a mistake I forgot to change before you reviewed. I meant to have it like this: ```python         # to revalidaste:         # p = ""/tmp/sca_frame.tsv""         # CALive._get_raw_addition_deletion_frame().to_tsv(p)         # print(p)         sca_path = test_data.get(""sca_frame.1634265741.tsv"")         sca_frame = (             sf.Frame.from_tsv(sca_path, index_depth=1).fillna("""").astype(CALive.DTYPES)         ) ``` It should just be two steps: 1. Read in the test data sca file as a frame 1. Mock CALive.get_raw_addition_deletion_frame with the frame we read from tsv"
chaburkland,Not really - it was just something I found a bit odd
nekobon,This is an interesting move! 
nekobon,"This is great, thank you!"
MadisonAster,Beautiful!
MadisonAster,I still think this might have a better name. But I haven't been able to come up with a great one.
MadisonAster,Could you add the term revalidate or revalidation to this comment to make it searchable?
MadisonAster,Some cleanup left to do.
MadisonAster,"This is suprising to me, what is this doing?"
gettodaze,"Oh, it just adds a console streamhandler to the logger in that module so that I can see the logs as they happen. There might be a better way to do this, but I'm not an expert in logging."
gettodaze,"Oh, that's just my comment for if I ever want to view the result as I'm testing. I added a comment to indicate that. "
gettodaze,"I went through and reorganized the module and left a docstring at the top, so hopefully that helps!"
nekobon,"Since we have not released 2.6.2, we can still use the number `2.6.2.dev2` ```suggestion __version__ = ""2.6.2.dev2""  # This must stay here to avoid import cycles. ```"
nekobon,Maybe a typo?  ```suggestion .. automodule:: ISLib.api.static ```
nekobon,"I think we can apply this until 202202 (just like 2021)  ```suggestion     elif ""202110"" <= date <= ""202202"":  # mcap usd from mcap local #7896 ```"
nekobon,How about to inherit from 202101 as this is a modification of 202101 version? I do like breaking the inheritance at the recon (fresh 202201)
nekobon,Did you mean to use include202110?  ```suggestion class include_psu_202110(include202110): ```
nekobon,Maybe? ```suggestion from RAPC.cspec.include.include202110 import include202110 ```
nekobon,```suggestion from RAPC.cspec.include.include_psu_202110 import include_psu_202110   class include_psu_client_202110(include_psu_202110): ```
nekobon,```suggestion     su_connector = psur_to_client2020 ```
nekobon,```suggestion     su_connector = psuc_or_psur_to_psur2020   ```
nekobon,```suggestion from RAPC.cspec.include.include_psu_202110 import include_psu_202110   class include_psur_202110(include_psu_202110): ```
nekobon,"Since this is repeated in more gen spec files, how about to put in centralized location? Such as `generator_spec.get_include_rae_spec(date; str) -> tp.Type[cascade_spec.CascadeSpec]`?"
johnjhawk,okay
johnjhawk,"yeah, that is better. the only thing that changed was the geu_connector and that's defined in the this module; it makes it cleaner though."
johnjhawk,I did mean for this to be 202110. thanks.
johnjhawk,I felt weird about deleting these todos since I didn't write them and I didn't confirm anything ;)  
johnjhawk,"okay, I'm not sure how that would work of the top of my head though. Lining up the dates may be tricky  and this function also just returns a class that is created inside the module so it seems strange (i'm probably missing something) to import this module to a centralized location and return a class from it back. I'll work on it though. "
nekobon,"I meant to make a similar function as `get_include_psu_spec` for rae. This could reduce future manual updates and would avoid forgetting to update one of three.  Example in grafi ```python def include_spec_selector(date, study_param_keys):     return grafi, get_include_psu_spec(date) ```"
johnjhawk,"I pretty sure that understand what you're asking for, I'm just not sure how to safely implement it. creating a common rae include spec is attractive, but I will just need to work through the logic. "
chaburkland,"I don't know if there's already a test for this method, but I think there should be one, namely, one that verifies the results from JPY -> USD. If you give it a time series of all 1s, then the resulting USD series should all be less than 1.  I've found this is a crucial sanity test given how easy it is to accidentally invert rates."
gettodaze,"Charles, I love it! You always have the best suggestions :smile: "
nekobon,:+1: 
ForeverWintr,"This will result in us returning `series[0]` if a function decorated with this receives multiple input types. I don't think that's what we want. Do you remember what caused us to need this change? I was imagining changing the behavior to only union indexes of `Series`, but I don't remember why we need that. "
ForeverWintr,Nice! I forgot that `column_grouping` came from parameters. :)
ForeverWintr,I think this docstring needs updating.
ForeverWintr,"Are you asserting that the value you just set was actually set? Also, should we set the output currency to USD by default?"
ForeverWintr,Nice approach! 
ForeverWintr,This looks the same as the test in `test_kleio` above. You could make it a fast version of the same thing by `assert`ing on the recipe itself (`assert recipe == ...`) rather than actually building it!
MadisonAster,"This is the fix for the 2 broken % ADV calculations. They return a single element series that's an int, so when it was getting passed to the decorator it would cause a failure. I agree this logic could be better, and probably deserves some lengthy comments."
MadisonAster,"Ahh, thanks! Overlooked this. Fixed now."
MadisonAster,I forgot to delete this while I was testing. Should have reviewed these modules more carefully. Sorry about that. Fixed now.
vhquang,"I mean, defining a structure of a variable, like its properties and its properties' type. Like a `struct` in C."
gettodaze,Doesn't a `nametuple` do the same thing but without the `dataclass` overhead?   ```python class TimeShift(tp.NamedTuple):     month: int     day: int ``` When would you use a namedtuple instead of a dataclass?
vhquang,"Ah, I see your point now. I thought you mean: ```python TimeShift = namedtuple('TimeShift', ['month', 'day']) ```"
gettodaze,Oh yeah haha I definitely prefer dataclasses over that!
vhquang,"That works. So we have: 1) `sf.Bus.from_frames((change_index(frame) for _, frame in raw_bus.items()))`, vs: 2) `sf.Bus.from_frames(raw_bus.iter_element().apply(change_index).values)` (since the result of `apply` is a Series)  If the two have equivalent performance, I would prefer (1), for shorter stack trace in case I would need to drop into `change_index` to debug. Also, I favor not doing multiple data transformation steps in the same line.  But if there is performance benefit, even potentially, I am happy to switch to (2)."
gettodaze,Oh wow! I don't know if that is intended. I will post in slack.
gettodaze,"But yeah, in this case I agree the first one is better!"
vhquang,I think we also want to have this as private. Users wouldn't need to know about our underhood storage. They would only access the data through our `@property`.
vhquang,"What do you envision for the clean frame? Ie: should we not allow any duplication, and raise if any, or should we remove all duplication? If the latter, should we have `duplicated(exclude_first=True)`?"
vhquang,```suggestion         # NOTE: should not allow duplicate DataDate ws_perm_id_co! ```
vhquang,"I think it is OK with us doing this to finish this iteration, while waiting for Chris to make `Frame.pivot`. But I think he will likely maintain the order of the old columns (ie: the new index). So we may not need to do this."
vhquang,"Along with my previous comment for `_bus`. If you agree with that idea, I think we can also keep `TABLE` as private for internal implementation too, since it is not used for any purpose other than pivoting our data."
vhquang,"There is a more concise way to do make these properties, that Yu pointed me to: https://github.com/ResearchAffiliates/invsys/blob/e8220be8172a69c1979fac93f0f75d705bc45189/augur/augur/core/sdk/measures.py#L167  I meant to send that to you, but forgot. Sorry for mention that now, after you have typed out all the code.   Also, I don't think we need to maintain our own layer of isolation here. `ISS_SBS.APMinesOverallFlag` is within our code to change, we can update it if we need. So instead of proxy through `self._AP_MINES_OVERALL_FLAG`, we can do: ``` ap_mines_overall_flag = lookup_bus(ISS_SBS.APMinesOverallFlag) ``` for less repeated code. The same goes for `ISSReader.TABLES`, we can refer to those columns directly too, as we assume they are uniquely named.  Since you already typed out all the code, I can do the refactor if we agree on the approach."
gettodaze,"I would prefer that as well. I know Forrest/Naveen said they just wanted the whole bus, so I left the access public, but we can privatize this until they ask for it."
gettodaze,"Well, I think this is the whole thing about ""deciding which to use in the case of duplicates"" that we had been going back and forth on. Currently that isn't implemented, so I have just been dropping all duplicates. I can add the function to choose the one with the least NaN in this PR, if you think that would be appropriate."
gettodaze,Sounds good. Is the frame already sorted by `DataDate`?
gettodaze,"Haha no I generate this code, I didn't type it! It's no worry! Thanks for the pointer to `lookup`!   But on the topic of `ISS_SBS.APMinesOverallFlag` vs `self._AP_MINES_OVERALL_FLAG`, I think having the proxy helps future-proof against an instance where our assumption of uniqueness, but we can talk about that in our meeting later."
vhquang,"Is this come from your change, or did I miss this with my fix for the bad merge? I recall we favor initialization up front vs passing class around: https://github.com/ResearchAffiliates/invsys/pull/1900/files#diff-e18732530b2955e9031179b03f25f19005581b75ee14d4e2c300734d20a4801cR285-R290"
gettodaze,"Yeah, you can change it if you like it the other way! Since we needed the as_of_date for the protocol anyways, and its easier to cache on a class than an instance (not that we are caching now), I decided to make that change. But you can totally change it back if you would like!"
vhquang,"I just see your comment about the change in `__init__`. I think it's fine. I don't see any pro/cons in changing it back. So let keep it that way. I just want to make sure I didn't miss it while I fixed the bad merge, since I respect the suggestion you gave back then."
vhquang,"I wish have a good suggestion for this cryptic typehint. Unfortunately, I don't have anything better than you had. The closest thing I can think of is: ```python FP_Component = tp.Tuple[str, str]  def get_readers_avilability(         cls, data_date: date     ) -> tp.Tuple[tp.Tuple[FP_Component, bool], ...]: ``` But its improvement is very minor, so please feel to keep it the way it currently is."
vhquang,"I assume the last 2 frames (`DailyPerformance`, and `SpeRow`) always have data, and `missing_data` only has data occasionally. I usually find it is useful to keep the data that potentially empty at the end of the list. So in case we don't want that data anymore, it will less impact on downstream. Or you could always return list of 3 frames (with 1 empty) for consistency, and ignore empty frame when process the metadata.  I don't see how metadata is processed, so please take this suggestion with a grain of salt."
ForeverWintr,"```suggestion     pid_to_spids_for_aum: tp.Dict[str, tp.List[int]] = {} ```"
ForeverWintr,"```suggestion                 portfolio_benchmark_map.get(spid, ()), ```"
ForeverWintr,Is this where a list gets inserted into the frame?
ForeverWintr,"Also: ```suggestion         .map_fill(pid_to_spids_for_aum, fill_value=()) ```  :smiley: "
nekobon,worksheet.Worksheet -> worksheet.worksheet.Worksheet! :joy: 
nekobon,"I think this file wants to stay. Instead, can you change in 999999?  ```suggestion   - conda-forge::openpyxl==2.5.4 ```"
flexatone,sad but `True`!
flexatone,"oh, that files is gone; let me merge and make sure it is not there."
ForeverWintr,"We know we have at least one series because of the check on line 47, right? So you should be able to just do: ```suggestion         new_index = portcullis_util.union_indexes(s.index for s in real_series)  ```"
ForeverWintr,"How about this? ```suggestion         reindexable_types = (sf.Series, recipe_objects.MissingSeriesPlaceholder)         reindexed = [             s.reindex(new_index) if isinstance(s, reindexable_types) else s             for s in series         ] ``` "
ForeverWintr,"This isn't doing anything anymore, so I think we can get rid of it.  ```suggestion ```"
ForeverWintr,"```suggestion         return func(*reindexed, **kwargs) ```"
ForeverWintr,Can you create an issue for this TODO?
ForeverWintr,Don't we want to add `USD` as the output currency here?
ForeverWintr,Is this a remnant of something?
gettodaze,Did you intend for this change to be in your PR? It might just be an artifact of github.
chaburkland,"Yeah this was the original point of the PR. As I was doing some discovery work, I found that `compare_frames` was raising some warnings, and I found some places I could clean up the IndexHierachy code. So this PR grew a bit haha"
gettodaze,"Oh, good catch!"
gettodaze,"Oh, but maybe `ISSResource.column_missing_value_map.get(series_name, """")`. Does this function get used on any of the columns with undefined missing values?"
vhquang,"This function gets called for all the columns. However, it only takes action on string column at the moment. I see it gets applied most often on the SEDOL/ISIN/CUSIP. I don't remember how often it applies for other columns.  Giving that this is in the writer and not the reader, I would favor being strict over being forgiving. So, if we forget to define missing value for a column, the writer will throw error and we can fix it, without affecting the users."
MadisonAster,https://github.com/ResearchAffiliates/invsys/issues/1940
MadisonAster,"Yes, cleaned up now."
MadisonAster,Good point! Added!
gettodaze,"Yeah, its really cryptic! If I could reuse the `FP_Component` typehint, I think it would be fine. Without reuse, I think it might be more readable without `FP_Component`. I did add a note in my docstring describing ```         Returns:             A tuple of file path components, availability pairs: i.e.             (((static_dir, filename), available), ...) ```"
gettodaze,"I had the same thought process! I might take your second suggestion, to always return it, even if empty. I want the `missing_data` at the beginning of the list for easy visibility."
MadisonAster,This could probably use a comment explaining what it does. This is the only use of it so far and the only documentation is in the release notes: ` Added trim_nadir parameter to StoreConfig and Frame.from_xlsx: permits removing all-None trailing rows and columns resulting from XLSX styles being applied to empty cells.`
ForeverWintr,Good idea!
nekobon,Do you repeat the cache_hash in both dir name and the filename? If we don't we can make two separate functions (e.g. `_prepare_cache_dir` and `_get_cache_template`) which allows us to define `self.*` attributes within `__init__`.
nekobon,"```suggestion     ) -> tp.Tuple[tp.List[int], tp.Tuple[dt.date]]: ``` to be more concrete on return type when possible"
nekobon,"How about to combine the second and the forth return  ```suggestion         # Infinite forward-fill! Just extract the last observation         if date > frame.index.iloc[-1] and np.isposinf(field.fill_window):             return frame.iloc[-1].reindex(sec_ids, fill_value=field.fill_value)          # We already forward-filled from the last observation to the fill_window,         # so if we are outside the frame (before or after), it is missing         return sf.Series.from_element(field.fill_value, index=sec_ids) ```"
nekobon,"`date` in `_exists_in_cache(..., date)` is not np.datetime64 yet (it's casted in line 266), but we call `_store_cache_series` after casting to np.datetime64. Is it expected?"
nekobon,TODO here
nekobon,I don't think `s` and `screen` need to share the same index. How about ```suggestion             return s.assign[delisted_dates <= date](fill_value) ```
nekobon,"I think tech doc wants to say ```suggestion         return 0.0 if date <= dt.date(2021, 2, 28) else 0.2 ``` because it says 0.2 **on and after** 3/1"
nekobon,:+1: 
nekobon,How about ```suggestion         return aggregated.clip(upper=co[fields.MCAP]) ```
nekobon,Is this the same as ```suggestion             sel = (sec[fields.MAX_VOLUME] != 0).loc[duplicates] ``` ?
nekobon,Is this the same as ```suggestion                 if (dr_sec_val / local_sec_val) > 4: ``` ?
nekobon,TODO here
nekobon,A symbolic constant with a self-explaining name for `5` would be nice here
nekobon,TODO
nekobon,Thank you for the comments!
chaburkland,Good catch!!
chaburkland,Haha it is
chaburkland,I will make a ticket for this
chaburkland,https://github.com/ResearchAffiliates/invsys/issues/1956
chaburkland,"Oh interesting. No this not expected, but it's been working. I'll update this to cast back to Python date for safety"
chaburkland,"I don't want to make a symbolic constant since it's only used here and has no relevance anywhere else, although I will make a descriptive comment."
vhquang,"Just curious, is there a benefit from this, versus `len(rt)`?"
chaburkland,No reason - I just felt like using it haha
gettodaze,Is there a reason you chose this over `sf.Frame.from_tsv(fp)`?
gettodaze,I really like this!
gettodaze,"The `try except StopIteration` is cool, but I wonder if something like this might be more readable (because I think you just want the first row if any rows, else return None): ``` sel_config = config.loc[sel] if not len(sel_config):     logger.info(f""No related config found for {source_portfolio_id}"")     return None sel_config = sel_config.iloc[0] ```"
gettodaze,"I learned recently that I think you can just do  ``` >>> Path(tlt.get_input_dir(), ""holdings"", ""holdings_pimco_mapping.txt"") PosixPath('/home/mccloskey/src/rapc/kozuchi/input/holdings/holdings_pimco_mapping.txt') ```"
chaburkland,"I think it might be good to add a unit test for this method specifically, testing the rate application and the unique `.upper()` behavior. ``` CUR_MKT_CAP_LOCAL CURRENCY 1.0               USD       # This should be 1 1.0               JPY       # This should be far below 0 1.0               jPy       # This should be far below 0 AND equal to the JPY record 1.0               GBp       # This should be equal to GBP 1.0               GBP       # This should be equal to GBp ```"
chaburkland,Delete this?
flexatone,These are pretty forgiving tolerances; did you get these values through experimentation? Can we make the tolerances less forgiving?
flexatone,"If this is not needed, can it be fully removed?"
flexatone,"This comment seems out of date, as we use this function with `ddof=1` just a few lines below."
flexatone,Maybe just to match the default argument?  ```suggestion     if threshold != 1.0: ```
chaburkland,"Thanks - I added this to see if anything in AgentQ broke, but nothing did. I'll remove this."
chaburkland,"It's actually not! We use this function with `ddof=1`, and we use `np.std` with `ddof=0`"
chaburkland,"These are the default `np.isclose` values. I will update them to be less forgiving.  These are also the defaults for `compare_frames.py`, so we might need to discuss updating those default parameters."
nekobon,:+1: 
nekobon,How about to put this in default and `False` version in the older connectors?
nekobon,Sorry I'm a bit confused. Do we want to use include_psu_202101 for `include_psur_202110`?
nekobon,I wonder if we can add more value to this line. Can we have a quick chat in a Hallway?
nekobon,"This only checks for one. For example, if the first one raises `ValueError`, it doesn't fail even if the second one doesn't raise."
nekobon,"Maybe black shifted your comments?  ```suggestion                     or (field == fields.MARKET_CAP_USD)  # old, pre calculated                     or (field == fields.MCAP_CO_LEVEL_LOCAL)   # new, local mcap                 ):  ```"
nekobon,"Should we always use `[sf.ILoc[0]]` instead of `.iloc[:, 0]`? I'm confused about how to use ILoc."
nekobon,"What does `sorted` here mean? Each are sorted in asciending/deciending order separately, or they have the same order? Also ""Reindex a sorted series"" makes me think it might return an reindexed Series. Maybe we can say it returns the values of the (virtually) reindexed Series?"
chaburkland,"I don't think it really matters, I just think that `[sf.ILoc[0]]` is prettier than `.iloc[:, 0]`.  `sf.ILoc` is a wrapper that static frame provides that allows you to use the normal `loc` or `__getitem__` interfaces with integer indexing.  So, for example:  ```python series[""my_label""] == series[sf.ILoc[3]] # If ""my_label"" is at index 0 # or frame.loc[""row_14"", ""col_15""] == frame.loc[sf.ILoc[13], sf.ILoc[14]] # If ""row_14"" is index 13, and ""col_15"" is index 14 ```"
chaburkland,"It means that the `series` has an ascending sorted index (by dates), and the `index_arr` date array is ascending sorted.  And good point on the docstring - I'll make it more clear"
johnjhawk,"notes for others. We had a nice chat about this in hallway and agreed that some type of yearmo type would be a good idea here.  Maybe a class that treats a yearmo as a tuple?  that would be a system wide change. for now, since a DateStr type only gets us part way there, I'll remove them and use ""str"". "
johnjhawk,"great point, thanks"
johnjhawk,there is in the bloomberg connector
johnjhawk,I agree! test added.
nekobon,"How about to make True as default as this will be used for all the future builds, and False in older dated versions?"
johnjhawk,I think that it what this is doing. It's set to false in bloomerg.py and true in bloomberg202110.  
johnjhawk,"or are you saying to reverse it, where we start with true in bloomberg.py and then set it to false for past builds?"
nekobon,I mean to use True in default (bloomberg.py) and explicit overrides (False) in older versions.
nekobon,Sorry I missed the second message! 
nekobon,"I think it would be easier to refactor later, once we no longer need to support older connectors. "
johnjhawk,okay
gettodaze,What was the reason for the change from 1 month 1 day to 0 month 0 day?
gettodaze,"Is this module `papyri/papyri/core/iss_data_calculator.py` being used in your other PR? Otherwise, it looks maybe more like a sketch to me"
vhquang,"There is no shift for this table in the techdoc. When I made that change, I just want to avoid mis-leading. In subsequent PR, I decide to remove this comment to clean it up."
vhquang,"Yea, this PR is branched off from a work-in-progress for my score. They are all updated in my branch for calculating score, but I leave them untouched here to avoid merge conflict in other branch."
nekobon,```suggestion         country_field = self.spec.su_connector.country_field ```
nekobon,"How about to remove ""at"" from this, or add ""at"" on others?"
nekobon,This comment is in winsorize std as well. Do we use both in current builds? 
chaburkland,Yeah - our specs define both behaviors
chaburkland,Are we wanting to enforce month-precision only for this API? I'd imagine there would be use cases for individual day retrievals? Plus Alan's example used day-precison: https://github.com/ResearchAffiliates/invsys/issues/1734#issuecomment-904309335
chaburkland,"I think the construction here of partials of partials of partials is a bit heavy. Maybe for the required parameters, uses `kwargs.pop`, and then you can do:  ```python history = reuters.history(currency_from, to=currency_to, **kwargs) ```  (Plus, you have to specifically specify `to=` when using `reuters.history`, or it will be equivalent to saying ""give me the fx rates of currency_from AND currency_to -> USD, since `to` defaults to USD.)"
chaburkland,Leftover comment :)
chaburkland,"You don't need to define these dtypes. They are only used by endpoints that delegate through disque, or have a endpoint client in papyri "
chaburkland,"I wouldn't place this endpoint in the comment section specifying mats db endpoints. This should probably go in it's own group, or with the group above the mats endpoints."
chaburkland,Forgot to undo?
chaburkland,"The connection spec is not necessary here, since you are using a papyri reader, which always uses static snapshots, not live DB queries.  Thus, I think this could be one line: ```python return routine.action(routine_io=routine.io, **json) ```"
chaburkland,"This function deserves an isolated test to ensure you are getting back what you think. I would recommend calling it from JPY -> to USD, and then verifying that all non-na values are greater than 1 (assuming I got the direction correct :sweat_smile: )"
chaburkland,"Once the other changes are finished, I think this test should verify a frame can be constructed from the string-representation of a TSV file using `sf.Frame.from_tsv`."
chaburkland,"The typehint here doesn't match the actual return type (you are call `str` on the frame).  Plus, I think Alan wanted to get data in tsv format (https://github.com/ResearchAffiliates/invsys/issues/1734#issuecomment-904309335), so you'll need to export the frame in memory to an IO object using `to_tsv`, and then send that over the endpoint.  (The current return value looks something like this: `'\x1b[38;5;243m<Frame: USD (spot)>\x1b[0m\n\x1b[38;5;243m<Index>\x1b[0m             JPY       USD       \x1b[38;5;239m<<U3>\x1b[0m\n\x1b[38;5;243m<IndexDate>\x1b[0m\n2020-01-01          nan       1.0\n\x1b[38;5;239m<datetime64[D]>\x1b[0m     \x1b[38;5;239m<float64>\x1b[0m \x1b[38;5;239m<float64>\x1b[0m'`)"
vhquang,"The old code is a work-in-progress, that is branched off for time-lag update. I find it is easier to ignore the diff of the old code, and just read the new code."
gettodaze,"Cool! I like this. And I agree, the `col` argument for `cache_wrapper` doesn't seem to need to be a column name at all, just a unique hashable."
gettodaze,"this `lambda frame: (frame[col] > 0.1).astype(int)` move seems to be duplicated a lot, maybe it could be a separate function?"
gettodaze,Could it be `.astype(float)` instead? I think this will use `NaN` as a fillvalue anyways.
gettodaze,"I think if we are using the `._NAME`s outside the module they are defined in, it makes sense to just call it `.NAME`, without privitizing, right?"
gettodaze,"It's strange they would call a boolean array a score `NBSOverallScore`, but I'm assuming this is right?"
gettodaze,"Oh, was there not a util for this in ISLib?"
MadisonAster,Ahhh! Sorry I've been dealing with yearmo's so much I didn't see this. Thanks!
vhquang,"Good point on being consistent with `NaN`. The type is one thing I want to confirm on the meeting tomorrow. For scoring, we have numeric type where higher is better. For flagging, we convert boolean to int, where higher (ie: 1) is worse. I think we can avoid this if we keep the type as boolean instead of int."
vhquang,"Originally the table class (`ISS_SBS`, `ISS_Ratings`...) are meant as symbolic reference for the database tables, where their attributes are the columns in database. I hope to make it more distinguishable that the `_NAME` attribute is not the column name. I don't feel strongly whether it should be private or public attribute. What would you think about `TABLE_NAME` / `_TABLE_NAME` instead?"
vhquang,"The docstring is out of date. In the portfolio, we flag companies with score >= 10. In this SDK, we just return raw data. I will update the docstring. Thanks for the catch!"
vhquang,"Yu said we had, and she would let me know once she finds it. But I haven't received anything from Yu yet..."
johnjhawk,"Hi @yu,  Thank you for checking this.  I remember what happened here. I tried to use the batch commit to accept your change and I thought that it worked.  I guess it didn't. I should have verified before resolving!  Here is the changeset that should resolve this: https://github.com/ResearchAffiliates/invsys/commit/9792decd4f8b00d4d66024234bfd773576f23920"
MadisonAster,"Hey charles, I've added a test for this, and integrated the other changes you pointed out, as well as some small things from IS CR yesterday. Thank you for all the help! "
chaburkland,I think `**kwargs` should be removed. This should fail if it gets unexpected parameters.
chaburkland,And you can set as_of_date to default to the empty_string as a way to determine if it was provided or not.
chaburkland,Great!
chaburkland,"In general we prefer `isinstance` checks over `type()` checks. Plus, line 80 is redundant if line 79 succeeds, since it will always be a frame. I think mabye this a bit clearer: ```python # Ensure the result can be parsed into a frame sf.Frame.from_tsv(lines) ```"
chaburkland,"One really minor note -> can we change the name to not say `query`? There isn't any live query happening here, and I think it's best to use the word only when DBs are interacted with."
chaburkland,"> Hey charles, I've added a test for this, and integrated the other changes you pointed out, as well as some small things from IS CR yesterday. Thank you for all the help!  I don't see a test for the values. Can you add a few lines to one of the tests ensuring that JPY -> USD gives back a frame where all values are less than 1?"
MadisonAster,I was leaving kwargs in because this allows the user to optionally specify ffill or rate_type when reuters.history is called without having to add extra defaults here that would need to be maintained. This would have the additional benefit of exposing any additional parameters were they to be added in the future.
MadisonAster,I also covered this behavior in the test I added here:  https://github.com/ResearchAffiliates/invsys/pull/1974/files#diff-ee85ab411cba508bb64f68f053a512ad024b9c0f05eee8879e9b9307370491f9R70-R77 
MadisonAster,"``` And you can set as_of_date to default to the empty_string as a way to determine if it was provided or not. ```  Fixed as_of_date now, thanks for the suggestion."
chaburkland,"That makes sense, although I strongly disagree. I think using `**kwargs`, especially for a public interface, is almost always an antipattern. Especially in this case, because we absolutely are going to maintain this feature, and want the restrict the usage of it to a very explicitly defined set of parameters. If we add something later, we can make it optional to preserve backwards compatibility"
flexatone,"I wonder if there are other reasons we might get this exception that we should let raise. One idea is to, after catching this exception, check for `nan` in `x` and `y`; if we find NaNs there, we return the `np.full`, but if not, we let `LinAlgError` raise. What do you think?"
chaburkland,Good idea!
flexatone,Nice!
gettodaze,Is this similar to the new `sf.Frame` to/from `npz`? (I've never seen `np.save` before) 
gettodaze,"Oh! We can use the bar `|` in typehints if we do `from futures import __annotations__`? Then, I think the appropriate typehint would be `int | float | None`, right?"
gettodaze,Useless suppression?
gettodaze,Why do you overwrite `end` in the `else` block but not the `if` block?
gettodaze,Nice edge-case optimization!
gettodaze,"Did you find this is faster as an inner function as opposed to a separate method? I'm always curious about the overhead of having a separate method, but I usually prefer it for testability."
gettodaze,`df.rolling` is pretty cool!
gettodaze,Nice comment!
gettodaze,But do you even need rolling here? Why not just `sf.Frame.median()`?
gettodaze,I'm assuming you have a test for this? It just seems a little unintuitive/tricky.
gettodaze,I think you save some indentation space if you flip the if/else clauses. ```python3 if frame.size <= self._MAX_MEDIAN_SIZE_HEURISTIC:     return get_max_of_two(slice(None)) ``` 
gettodaze,"And also, why does it need to be handled in two chunks? Is it for performance?"
gettodaze,Do you only cache `inf` window `DSPrice` frames?
gettodaze,"`is_valid` seems a confusing name, maybe `exists_and_valid`?"
gettodaze,What's the reason to have exists and valid in the same function?
gettodaze,"This isn't in the PR, but I would like to ask about your fill move here."
gettodaze,"I'm not 100% sure what is happening, but might you want `if len(i)` instead? ```python3 In [2]: np.array([]).shape                                                                                                                                                                                               Out[2]: (0,)  In [3]: bool(np.array([]).shape)                                                                                                                                                                                         Out[3]: True ```"
gettodaze,maybe `i` could be `indices`?
gettodaze,Might you want to move  ``` field.fill_window is not None and np.isposinf(field.fill_window) ``` to its own function? But I'm not sure how many times I've seen it.
gettodaze,Why do you just want the first date that matched?
gettodaze,"""Free float is the only price field that needs to handle leading NaNs."""
chaburkland,"It's similar, but there are some important (albeit subtle) differences. I don't think I can use `sf.Frame.to/from_npz` for this, but I will talk with Chris more to see if it would work here"
chaburkland,"They are the same, but I like the `tp.Optional[int | float]` better for style preferences"
chaburkland,Thanks!
chaburkland,I do that to maximize cache reuse - I'll make a comment.
chaburkland,I could use `sf.Frame.iter_window(size=30).apply`.... although pandas is faster.
chaburkland,I'll move this as a private `staticmethod` :+1: 
chaburkland,I do! But I'll add an extra assert just to be even more clear
chaburkland,Good suggestion! And it's for memory concerns. I can't do frames that are too large all in memory
chaburkland,"Yeah! They are handled separately to maximize their cache reuse between different instances with the same `as_of_date`, but different `date_min` and `date_max` arguments."
chaburkland,"I'll move the `is_valid` code here and make a better comment.  Also, thanks for helping me find the bug with free_float!"
chaburkland,`bool(np.array([]).size) is False`!
chaburkland,"I'll rename it to `iloc`, since that what this really is"
chaburkland,"It's only appeared twice, so I feel comfortable leaving it as is"
chaburkland,"`index` is unique by date, so if we found a match, there can only be one! I'll update the code to be a little bit more self-documenting though :)"
nekobon,How about to call `missing_value` something like `to_value` to align with the input parameter (`to_class`)?
chaburkland,Good catch - thanks Yu
nekobon,A comment would be nice here to describe when we set skip.
nekobon,Filling int column with empty string would not keep int dtype. Is this intentional?
vhquang,"@gettodaze @nekobon These are the new fields needed by score calculation. I think it is better to wait until this PR is merged, before I make sourced file to static server. Or I can source the file on this branch. I prefer to wait for the merge, since there is no urgency to have static file."
ForeverWintr,"Actually, I don't expect any nans in the edition column, and overlooked the possibility of them being there! It looks like `Frame.from_pandas` fails if there are `nan`s in a column I've set to `int`. I will fix the code to handle `nan` in that column sooner. Thanks!"
nekobon,Please update dev id (I know it's painful!) because compustat GEIU/PSU are officially released and users might be caching in downstream using `cache.py`.
vhquang,"Let do this in the controller (ie: `api_get_fx_history`), so that we will have cleaner interface (tp.List[str]). We can also be a bit defensive, to convert all currencies to upper case, too."
vhquang,Is `Response` still a correct return type? I only see str-type is returned by `fx_data`.
vhquang,"Not particular to this diff, but this type production test will keep failing, until we deploy code into production. And vice versa, it will keep passing even if we have breaking change, until we deploy the code to production. Is Flask mock test not sufficient as our coverage?"
chaburkland,"I don't think we should convert currencies to upper case, since some currencies have lower case values. For example: `GBP` and `GBp` are different currencies.  I would also add a check here to ensure the currencies are all valid though. Something like: ```python currencies_from = [FX_ISO[currency] for currency in currencies_from.split("","")] ```"
MadisonAster,"Yes I realized this would fail until we updated the changeset and redeployed the app, but that's one of the purposes of this test coverage and I think it's appropriate for this test to fail in this case. If we were to forget to update the deployment, this test would be what warns us that we forgot something. "
MadisonAster,Great suggestion! I'll do this. I was shooting for fewer lines here but I realize now that it's not actually simpler.
chaburkland,"Out of curiosity, would it be possible (or necessary) to do checksum validation on this image?"
chaburkland,what's the reason for this change?
ForeverWintr,"I found 5 retries a bit excessive here. I think this was originally added to handle network issues, but it took a long time to iterate on this because it would try to install packages that don't exist 5 times before failing. "
ForeverWintr,"That's a good idea. I'm not sure if it's possible, but I'll look into it when I work on this in the future. "
johnjhawk,I'm surprised that we don't have a method on the product class that does this. I looked and didn't see it.  I can create an issue.
ForeverWintr,"As we discussed, I'll update this to only use the second method!"
gdevanla,"Can you explain why you need to catch this exception here? I don't see the inner calls returning such an exception.  Edit: Maybe this is related to the changes you made to date_util to throw an exception. But, should we be suppressing that expression here and return False? That seems incorrect to me."
gdevanla,Is this Union type equivalent to `os.PathLike`?
gdevanla,"Um, isnt this just an `int` or `str`?"
gdevanla,Is this os.PathLike?
gdevanla,You are missing other type hints here. Is that intentional?
gdevanla,"To be accurate, we pass a ConnectionSpec class.  Is there a way to represent that?"
vhquang,"As you are collecting data, if you turn `args` to a dictionary to pass into `fx_data`, you will defend yourself again positional change in `fx_data` arguments. However, I would prefer explicitly type of the name:  ```python data = fx_data(     currency_from=request.args[""currency_from""],     currency_to=request.args[""currency_to""],     fx_start_date=request.args[""fx_start_date""],     fx_end_date=request.args[""fx_end_date""],     rate_type=request.args.get(""rate_type"", ""spot""), ) ``` to take advantage of static checker. Ex: if `fx_data` argument is changed and we forget to update this, we will get linter error. "
chaburkland,"Yeah. This is in RAPC, and I wasn't doing a deep pylinting dive into RAPC. This was just a side effect where one of my pylinting silences led me to this function, and so I added a typehint for this only, since that's all I confidently knew at the time."
chaburkland,"I'm not sure. I've always been confused by `os.PathLike`, since mypy strict will complain that it's missing a defined subtype. I think it expects something like `os.PathLike[str]`. I will research this more to have a correct understanding. Thanks for the suggestion"
vhquang,I still think splitting the string is better done in the controller. And I prefer your original interface (ie: tp.List[str]). Is there any motivation for you to split the string here?
vhquang,"I would prefer have description on what this API does.  Beside, there is popular convention for API: https://oai.github.io/Documentation/specification-paths.html  For example, we can document our URL params like:  ``` parameters:     currencies_from: ....     currency_to: ... ``` Even though we haven't adapted this form of documentation yet. This API has more public exposure than the `fx_data`. So we should be mindful on its documentation as well."
vhquang,"What you describe is basically turns this test into a periodically production test. And I think that will depend on how critical this endpoint is. If this is something we want to be working properly all time, and want test agents to frequently tests it, then let keep it. If we only want it as a reminder, then there isn't enough motivation from my perspective. More on this on my following point.  My previous comment isn't just about false positive lag (ie: test is failed until we deploy), it is also about false negative lag (ie: test is passing, but _will_ fail once we deploy), which is more concerning for me. Hence I asked about unittest. Ideally, if unittest pass, code will work on production. And vice versa, if it fails then code will fail on production. If the unittest is that good as an indication, then production test is redundant. If the unittest is not that efficient, then it is better to spend our effort improving our unittest. From what I see so far, I think there is enough guarantee in our current unittest. That's why I think we wouldn't need this production test. But as in previous comment, I want to double-check with you, in case I miss some context, or if you think the unittest is not good enough."
MadisonAster,"I agree with your point about the unittest coverage. I do believe it is enough to guarantee it's working in production. I guess what really lacks coverage here is that the currently deployed production changeset is in line with the current code. This could probably be written in a more general way to exercise all of the endpoints in a single test, then call them again from the current code, and assert the outputs are the same."
nekobon,Do you need to inherit from `dict`? It seems like there is necessary methods defined here.
nekobon,"Also, since this is not recursively nested, perhaps the better name is ""DictParam""?"
nekobon,"`spec_val` is only used inside the if  ```suggestion             if issubclass(spec_val.__class__, NestedParam):                 spec_val = getattr(spec, key) ```"
nekobon,"same ```suggestion             if issubclass(spec_val.__class__, NestedParam):                 spec_val = getattr(spec, key) ```"
nekobon,What kind of override does this mean?
nekobon,Non-trivial calculation in the builds just for QC might not be ideal. Let's discuss with @johnjhawk and IM team to find the best process.
nekobon,I prefer not to put this in the main methodology as this is plugin specific. Can we move it to the plugins? Or even better to move it out from the builds and let analytics to take care of such calculations.   Looping in @johnjhawk 
nekobon,"What do you see by simply yielding `k, v` here? I prefer to report as is instead of extra cleaning. It might be more difficult to find where spec rows are defined. "
nekobon,"This is also similar. If the actual calculation is different, it's not ideal to QC this output only added for QC purpose"
vhquang,"And regarding to the conversation on Slack about ISO for date string, I also want to note that once we give this API to other people to use, it is harder to ask them to update their code. I would prefer to use ISO standard externally, and keep the no dash convention internal in our team."
MadisonAster,"A list can't be passed as a url param without escaping characters and parsing the input. Separating by comma makes the url syntax simpler, as well as the logic."
MadisonAster,"Ok, this seems like a good reason to go with ISO formats. I'll make the change, and add the extra details to the docstring for this function."
vhquang,Both of them are good point. I wouldn't need to inherit from `dict` as other dict interface wouldn't work anyway.
vhquang,"It suppose to mean weight override. However, so far no one has mention they need weight override for GRAFI-C yet. (commented L358). Maybe I just take out this comment for less confusion."
vhquang,"Since we don't have IM meeting until next week, I will bring this up with IM team in email. I hope to have this merged before I make Dec rebal."
vhquang,"> Can we move it to the plugins?  I don't know the best way to do that, as I would need to final weight after override, which is calculated outside of the plugin."
vhquang,"I would need to communicate this with Robert. The calculation is expected to be the same from my perspective.  CI = greenhouse_gas / EVIC (1) universe CI = CI * benchmark weight (2) universe GHG = greenhouse_gas * benchmark weight (3) unverse EVIC = EVIC * benchmark weight  So, if Robert want to have universe GHG (2) and  universe EVIC (3) to verify my universe CI (1), he should come up to the same number. From my perspective, I am providing him alternative to verify my calculation. (1) and (3) are already in the summary, he is requesting (2). I don't see any harm in doing so."
vhquang,"I can remove L186, I was trying to be explicit in determine what to print.   But for L184, the original output would be: `<RAPC.core.methodology_plugins.plugin_climate_transition.CIBaselineSourcePortfolio at 0x7f694d706040>` depend on how we import it, as oppose to `CIBaselineSourcePortfolio`."
vhquang,It is use by the `if` itself as well: `if issubclass(spec_val...)`. So we would need to get that attribute anyway.
vhquang,"What I meant is doing this early on in your `api_get_fx_history`, instead of in your `fx_data`. The url params can still be a string separated by comma."
nekobon,"Oh, sorry I missed it!"
nekobon,Let's have a quick chat with IM team tomorrow
nekobon,I think printing the class is more explicit and better in this case. The class name is still readable in the long string.
nekobon,"The harm I see is that if we introduce any bug in the extra calculation (in this case 1036 to 1039), it would look confusing and incorrect, while the final weight seems to depend on it but it doesn't. Ideally shouldn't do any calculation in the build that is not needed for the output. Such steps should go to analytics."
vhquang,"If that is the case, then I will also remove L184. That long class name only happens with `CIBaselineSourcePortfolio`. For other calculation, such as `CIBaselineRcap`, `CIBaselineMcap`, they show more internal info:  ``` <CIBaselineRcap: region_field='country_group', region_values={'US', 'DevOther', 'UK', 'JP', 'DevEuropeExUK'}, size_field='size', size_values={'large'}> ```  which I want to print out nicely, since I rely on Robert to eye ball it to spot any mistake. That mistake happened before when I inherit LAE for Cheshire."
chaburkland,"Yeah. The old implementation of `USMarketCalendar.get_next_business_day` would return a None if the business day was not found. However, the typehint didn't say the return was optional, and it made linting very difficult to update every single client of this function to have the following code.  Specifically, most clients of this function expect to get a date, which means that a `TypeError` would get raised when they tried to do datetime things to the `None` singleton. I figured I would give a more meaningful error and just raise at the source if the function cannot determine the `next_business_day` from some input.  This was the only client that had `None` compatible behavior, so the change to wrap it in a try-except block felt like the best choice to me."
chaburkland,I'll look into this (see my later comment).
chaburkland,Whoops - thanks for catching this. I will put it back.
chaburkland,Ah yes. A `tp.Type[ConnectionSpec]` would be a more accurate typehint. Thanks Guru.
chaburkland,"It's technically `str | os.PathLike`. I will create a new ticket to address this seperately, as I have an idea for standardizing some of our typehints"
MadisonAster,"Ohhhhh, I see, make fx_data take a list, but api_get_fx_history take a comma separated string. That makes a lot of sense! I'll add this."
MadisonAster,"Hi Quang, I went ahead and changed this into a parametrized test last night. I also added a data_format argument to the function and parametrized the test as well to exercise all of the possible conversion methods. Unfortunately I wasn't able to get sf.Frame.to_parquet to take a BytesIO object, but once static-frame has this available it should work nicely. Let me know what you think of the changes."
chaburkland,"Does ```python import io  b = io.BytesIO() frame.to_parquet(b, **export_kwargs) return b.getvalue() ```  not work?"
vhquang,"I want to note that I revert the removal on L187 that you originally suggested. Visually they will report the same value. However without convert to `str`, it is tricky for me to unittest it, since I don't intent to implement equality check for my `baseline_calculator` spec:  ```python assert (         report_b[f""{carve_id}{CICarveSpec.DELIMITER}baseline_calculator""]         == str(mcap_calculator)     ) ```"
vhquang,"This is a bit cryptic to me what you are trying to accomplish. Here are couple thought that I have:  - Is there a list of file format that you want to support? - Are those format have the same function signature? If they do, we should typehint the `conversion_method`. Having a `Callable` without its signature will be hard to see its usage. If they don't have same signature, then may be we should reduce the formats that we want to support. - Are you trying to get the `fp` as `arg1`? If so, you can do that in a more expressive way: `fp_arg = str(sig['fp'])`  Beside, is this a new feature? If you are trying to support multiple file formats, then it would be better to do in separate PR, so that we discuss it separately from what we have been discuss so far. (Also, will help you merge your current PR faster. Avoid expanding the scope of what needs to be reviewed will help me as well.)"
vhquang,"```suggestion         currencies_from: list of currency codes, ex: ['CAD', 'AUD', 'JPY'] ``` Do you expect empty list to be a valid value? If not, may be we can guarantee that with a check."
vhquang,"This seems like you are second guessing the capacity of `sf.Frame.to_xxx`. While I think there is a better way of inspect that, rather than checking substring, I also think that approach should be avoid if we can. Would that work if we explicitly define convert type, base on file format? For example: ```python { 'tsv': io.StringIO, 'parquet': io.BytesIO } ```"
MadisonAster,"Hi Charles, from_parquet can't currently take a bytes object, this makes the round trip testing in test_fx_data challenging. The to_parquet method does work though so it would be immediately usable in theory, just not easily testable.   Also using getvalue() is a fantastic idea! Seeking to the head of the file felt awkward here since we aren't decoding anything."
MadisonAster,"Hey Quang, sorry for adding so many changes, I got a bit carried away last night. Chris suggested the other day during our OOOCR that it would be a good idea to support to_parquet because that's what most of our enpoints return now. Alan's usecase for tsv's is relatively new. So in the spirit of getting things right from the start I thought it would make sense to include this argument right away.   The reason for generalizing this function into to_file_in_memory is to allow other endpoints to take advantage of the same logic, specifically the delivery returns endpoint I am working on now.   To answer your bullet points:   `* Is there a list of file format that you want to support?` There is a list of supported formats in test_routines.format_list. Most of these are commented out currently. Getting most of the formats to work in this general way would involve some static-frame work, but my motivation with this is to offer whatever formats static-frame can conveniently support. `* Are those format have the same function signature? If they do, we should typehint the conversion_method. Having a Callable without its signature will be hard to see its usage. If they don't have same signature, then may be we should reduce the formats that we want to support.`     All of the formats that I currently have working work with the same signature, however there could be value in passing kwargs to the sf method to support customizing the output format. In that scenario I think the typehints from that staticframe methods themselves should cover things. The challenging trick to getting this to work would be figuring out which kwargs should be passsed to the conversion function, and which should be passed to the business function. I think the easy answer to that might be to make the business args explicit, and only allow the conversion kwargs to be optional. `* Are you trying to get the fp as arg1? If so, you can do that in a less cryptic way: fp_arg = str(sig['fp'])` Yes that's correct, however since some conversion functions take nothing at all, like to_msgpack, I was avoiding simply calling it 'fp', and used the ambiguous 'arg1' to reflect the fact that we don't know what argument, if any, the conversion function might take. "
MadisonAster,Yes I suppose we aren't actually getting as much out of inspect here as I had initially hoped. A mapping would be much easier to read and understand.
MadisonAster,"Hi Quang, I went ahead and moved the check for this into routines to cover this."
MadisonAster,"Hi Quang, I've updated this with a map of the different types, let me know if this is what you were looking for."
MadisonAster,"Hi Quang, I went ahead and removed the kwargs being passed to reuters.history, and added kwargs to the conversion_method call to make the signatures more flexible."
chaburkland,"Ah, I see the issue. You have to wrap the bytes input in `BytesIO` in order from `from_parquet` to accept here. Here is an example: ```python import frame_fixtures as ff import io  frame = ff.parse(""s(3,3)|c(I, str)"") b = io.BytesIO() frame.to_parquet(b, include_index=False) frame_bytes = b.getvalue()  frame2 = sf.Frame.from_parquet(io.BytesIO(frame_bytes))  assert frame2.equals(frame) ```"
vhquang,"The `endpoint_input` is depend on `inputtype`. Since we are not using JSON body, let just test with query string only. This will simplify what we need to test.  Beside, I saw 3 different types of `inputtype` being used: `json`, `query_string`, `params`, without document their valid values. I think testing multiple types will make the testing logic more fragile.  I think the motivation as you unify those 2 types, is to refactor the old tests that is extracting JSON body. As I mention in Slack, I think that is a weird thing to do with GET request. I would prefer us to change that. But let leave the old tests for now, and stay in scope of your PR."
vhquang,"If we use what is already provide with Flask, testing your endpoint can be: ```python endpoint, data= endpoint_fx_params() with app.test_client() as client:     result = client.get(endpoint, query_string=data) ``` Wrapping that inside the `from_test_client` doesn't provide better abstraction, with the cost of being less explicit about the type of testing data (ie: query_string)."
vhquang,"If you agree on testing different types individually, we wouldn't need these grouping."
MadisonAster,"I was actually thinking it would make sense to reformat local_query_cpi_json in the furture to be a params endpoint, since it would be more functional. In my delivery_endpoints api, I've added to the grouping like this:  ``` json_endpoints = [     local_query_cpi_json, ] params_endpoints = [     endpoint_fx_params,     endpoint_delivery_returns_params, ] ```  I'm hoping to get to just this:  ``` params_endpoints = [     endpoint_fx_params,     endpoint_delivery_returns_params,     local_query_cpi_json, ] ```"
gettodaze,"Do you need need this typehint? Because `TYPE` is a constant with the same type as `Type.PORTFOLIO`.  If you do, could you rename the `Type` class? I originally misread it as `tp.Type`."
gettodaze,Are there constants anywhere for these values?
gettodaze,"Same with these typehints. Also, are these constants? If so, maybe they could be caps."
gettodaze,"Just a side comment, I see `weights` is added from `holdings_asof_data.get_weights` on 1945. Could you add a return type on that function so we see the typehint? I think its just `pd.DataFrame` but I also see `if weights is None`, on 1959; is that block getting hit? Does the function return `pd.DataFrame | None`? "
gettodaze,"Maybe I am a bit confused, but I would assume you would want: ```suggestion                 if len(sub[co_id_field].unique()) > 1:                     raise ValueError(                         f""multiple companies have the same sec_id: \n{sub}""                     ) ```"
gettodaze,```suggestion     consolidate: tp.List[sf.Frame] = [] ```
gettodaze,"Based on your below comment, >         # doing a second groupby here because I didnt want to create a large list of sub frames >         # and then concat them on every run. The need to consolidate is extremely rare.  Instead of checking `len(sub) > 1` inside the loop, maybe it would be faster to do something like: ```suggestion         for _, sub in weights.loc[weights[sec_id_field].duplicated()].groupby(sec_id_field): ``` Then you wouldn't have to create subframes for the unique sec_id_fields."
gettodaze,"I wonder if `alerts` needs to be optional because `total=False`, but I think its fine."
gettodaze,"I wonder if there is a better way too because now you need to have magic strings ""hmcs"" and ""alerts"" all over your code."
gettodaze,"Could you change this (L1867) ``` HoldingsMappedCarveCo = collections.namedtuple(     ""HoldingsMappedCarveCo"",     (""sec_id"", ""co_id"", ""RAPID"", ""field"", ""value"", ""carve_product_id""), ) ``` into a typed namedtuple?"
gettodaze,These strings also look a bit magic to me.
MadisonAster,"Hi quang, the reason for the differences in the inputypes is because there are differences between client.get() and request.get(). They both take parameters that do functionally the same thing, just with different names. In order to cross check the results against the local test we need to test both. I agree it will be simpler to replace the json functions with params functions, which would allow us to eliminate this kwarg. I think attempting to remove it now though would be a net reduction in our test coverage."
MadisonAster,"Once we get rid of the json inputtype, these functions will be simpler. I still believe though that from_test_client, and from_production are useful as they also take care of abstracting the creation of the test app, and calling of the endpoint_input function. In my delivery returns branch which is based on this branch, from_test_client is called in 4 places. Getting rid of this function would add extra lines to each of those spots and make things like this less readable:  ``` @pytest.mark.parametrize((""endpoint""), list(params_endpoints + json_endpoints)) def test_api_client_vs_production(endpoint: tp.Callable):     client_result = from_test_client(endpoint)     production_result = from_production(endpoint)     assert client_result.data == production_result.content     assert client_result.data == production_result.content     assert client_result.status_code == 200     assert production_result.status_code == 200 ```  ``` @pytest.mark.parametrize((""endpoint""), list(params_endpoints + json_endpoints)) def test_api_client_vs_production(endpoint: tp.Callable):     endpoint_url, params = endpoint()     app = create_testing_app()     with app.test_client() as client:         client_result = client.get(endpoint_url, query_string=params)     servername = ""http://portal01-prd-i:5005""     production_result = requests.get(servername + endpoint_url, params=params)     assert client_result.data == production_result.content     assert client_result.status_code == 200     assert production_result.status_code == 200 ```"
vhquang,"I am just curious. In the `loader_base.py`, we already have these 2 TypeVar. Are these different than in `loader_base`? Is there benefit in referencing same type? (You mention this is just temporary code, so I guess keeping them separate is fine. I am just curious.)"
vhquang,I am surprise that this passes `isort`
vhquang,"I just want to double-check, we are converting from percentage to decimal, right? (ie: 65% -> 0.65)"
vhquang,"Just want to make sure we didn't slip ""this"" through, as I don't know what ""this"" is."
vhquang,Same note about TODO.
vhquang,"I am confused by this. We want to get active instrument. But their name can be None. Why is that? (ie: can active instrument has no name, or is this just dirty data?)"
vhquang,"You mention this is temporary. But is it safe to hard code the date here? If so, can you leave comment on what is significant about 2021-11-1?"
vhquang,Same as above.
vhquang,Same as above.
vhquang,"Can you leave comment on why this step is needed? Also, why can't we set it to `1` instead of `nan`?"
vhquang,Same as above.
vhquang,:+1: 
vhquang,"Minor suggestion, instead of putting the info into the error message, we can require the exception to take both effective_dates. Maybe the `instrument_id` can also be required, but I don't know how specific/generic you want this Exception to be."
vhquang,"This upgrade is not idempotent, so maybe we can raise on the downgrade, or leave note on how to downgrade. (ie: whether it is safe to remove those columns if we need to revert this migration)."
nekobon,Do you want to keep this print?
nekobon,```suggestion def cached_parser(fp; os.PathLike) -> sf.Frame: ```
nekobon,breakpoint here
nekobon,"Maybe you don't need the first condition? (It seems the same but yours could be faster) ```suggestion             identifier not in history[""IDENTIFIER""].values ```"
nekobon,TODO here
nekobon,"Are you expecting to have more elements in `ticker_func_map` later? If so, maybe a comment can help. Otherwise it seems strange to loop over one element"
nekobon,Would we like noop when `len(sel_history) == 0`? Maybe a comment here about the unhandled case would be useful.
nekobon,I'm curious how it works. Where do we send the `db_session` from?
nekobon,"Can you remove `dates` and replace `min(dates)` and `max(dates)` by below `date`? ```suggestion         date = datetime.date(2020, 9, 30)         [co] = list(psur_history.co_tables(dates=[date])) ```"
nekobon,"```suggestion         date = datetime.date(2020, 9, 30)         as_of_date = datetime.date(2021, 10, 31)          psur_history = worldscope.PSU.from_as_of_date(             as_of_date=as_of_date,             date_min=date,             date_max=date,         )          [co] = list(psur_history.co_tables(dates=[date])) ```"
gdevanla,"```suggestion             elif day_state == hw.HoldingsDayState.CLS:                 day_state_str = """"             else:                raise ValueError(f'{day_state} not supported') ```"
gdevanla,"```suggestion                     elif day_state == hw.HoldingsDayState.CLS:                         day_state_flag = ""--CLS""                     else:                         raise ValueError('f{day_state} not supported) ```"
AlanMLin,done
AlanMLin,done
vhquang,"I think the point I am trying to make is not related to the difference between client.get() and request.get(). The code that we reference to is flask unittest in your utility `from_test_client`. You are planning for this utility to be a common utility, to be used by your new endpoint (with query string) and existing point `query_cpi_data` (which extracts JSON body).  What I meant, and referenced on Slack, is that we shouldn't have implemented get JSON body on GET request like in `cpi_data` and may be other endpoints. And thus, you shouldn't aim to provide that feature on your utility. Let just focus on the endpoint you are working on. For existing endpoints, let leave them for separated PR. I don't know if we will break anyone code if we those endpoint, or if it worths to update them."
vhquang,"I can put my opinion on cost of lines of code, but more importantly I hope you re-consider combining unit test with production test. What you wrote here is an over-simplified test scenario, where we only check status code. The benefit of unit test is that we can fabricate any scenario in order to exercise our code. That is not always applicable for production. I would prefer to separate unit tests from production tests, rather than combining them."
vhquang,"I see your motivation now. I have different opinion about this, but it becomes personal preference at this point. i would like to leave this to your decision."
nekobon,Please put a comment (or change the variable name) to indicate they are only ignored at duplicates
johnjhawk,"I agree, that's a bit confusing.  "
johnjhawk,"I think they are constants, but in that case I would use the ""Final"" declaration, but I'm not confident enough to (for this PR) change this writer class with a mypy enforced change.  "
johnjhawk,"Good thought! But, I don't want to include that change in this PR. I think, we'll have to have a focused PR for type hinting modules in our code base.  I just type hint the stuff that I change or read from.  This module could use A LOT of type hinting help, but I feel it's beyond the scope of this PR."
johnjhawk,"alerts is optional.  hmcs is not optional but the total=Final does not enforce that.  I made total=False so I could build up the dictionary as I go (as the old code did). I really didn't want to refactor this function for type hinting. I would have reached for a typed  namedtupe if I was willing to refactor more.  I'm not sure if dictionary the keys ( ""hmcs""  and ""alerts"") qualify as magic, but point taken. I think a typed named tuple fits better here."
johnjhawk,I see why you're asking and I originally was hoping that pandas supplied them. But I don't think it's worth creating constants for these as I'm not sure there would be much benefit. Let's chat if I'm missing something.
johnjhawk,"Great, idea! But, I don't think that will work as is.  duplicated() only return True for the first item, not both.  So the sub_df would only be one item.  I'll think if there is a way to do something similar though."
johnjhawk,"I'm not sure why you are confused. If you're saying that you think the latter reads a bit better, I agree.  If you're confused as in, you don't think the code works as intended then we should talk."
johnjhawk,I disagree that they are magical. They are names that describe a column.  Maybe you mean that the list is magical? 
johnjhawk,"as we discussed, since this is pandas, I'll use this:         for _, sub in weights.loc[weights[sec_id_field].duplicated(keep=False)].groupby(sec_id_field): Thanks!"
gettodaze,"Just a small suggestion; I think its simpler to just get the frame. ```suggestion         target_table.add_columns_from_df(             frame[[iss_data.ISS_Ratings.ESGRatingOverallNumeric]].relabel(                 columns=[f""(QC_ONLY)_ESGRatingOverallNumeric""]             ),             condition=condition,         ) ```"
vhquang,I agree. Thank you for the suggestion.
MadisonAster,"Ok, I've removed the production test now."
MadisonAster,"Ok, I have removed this extra testing."
MadisonAster,Removed now.
chaburkland,"```suggestion     export_kwargs = {k: v for (k, v) in request.args.items() if k not in fx_args} ```"
chaburkland,This line will never get hit
chaburkland,"Since you updated the typehints on `def fx_data` for these four arguments to `tp.Optional`, and set them to have certain defaults, you shouldn't repeat yourself here. ```suggestion         as_of_date=request.args.get(""as_of_date""),         data_format=request.args.get(""data_format""),         ffill=request.args.get(""ffill""),         rate_type=request.args.get(""rate_type""), ```"
MadisonAster,Woops! Not sure how that got in there. Removed now.
MadisonAster,Wouldn't it make more sense to use RapidFactory.MIN_REVISION everywhere instead of repeating this revision number?
MadisonAster,I'm curious to know in what instances provider might be different? Maybe FTSE products?
MadisonAster,"I feel like there could be a way to do this without the lambda, but otherwise it's very clear."
gettodaze,"I think this might have to be `tp.Union[float, object]` to satisfy `mypy`."
gettodaze,"There's actually a bunch of providers [class Provider(str, Enum):](https://github.com/ResearchAffiliates/invsys/blob/b30f48b2697996ff91ce829b4a3eebea5dd25630/RALib/core/rapid.py#L15-L28). I honestly am not entirely sure what it means. I think you're right though, that we hold data for FTSE products and other products, and this is to help differentiate that."
gettodaze,"I have a separate test case in `test_rapid.py` for the min revision in cases where that's especially important, this is supposed to be for pinned revisions. It might be personal preference, but I prefer to have things fail due to a ""min revision"" error when the revision changes, as opposed to a variety of harder-to-diagnose errors."
gettodaze,"Yeah, me too! I'll merge as-is for now, but I'll keep thinking about it, thanks!"
gettodaze,"Oh I'm sorry, `CI_SPEC_NO_REDUCTION` is just None, so I think `tp.Optional[float]` would make more sense. `CI_SPEC_NO_REDUCTION.__class__` is just `<class 'NoneType'>`."
chaburkland,fyi unused import
chaburkland,"Can we save `field_map[return_type]` into a variable, something like `field_dtype`? It's called 3 different times"
chaburkland,"I think a clearer (and faster!) iteration would look like this:  ```python for data_date, quote in loaded_return[[""date"", ""level""]].iter_array(axis=1):     ... ```"
vhquang,"I was on the verge of giving up on typing, and just use `tp.Optional`. I use `None` just so it can show in the reported spec. The value of `None` is just an artifact that we need to a special value, that is non-float, to signal different calculation. For me, `tp.Optional` seems a bit missing leading, as the parameter requires either float or non-float to determine its behavior."
MadisonAster,"If you wrapped this block in a test function, couldn't you inspect the logger and make some assertions about what's there?  Also, are you sure that Brandt isn't working on any kind of optimize functions like this to return immediately? Might cause timing issues."
chaburkland,"Sounds good - I'll make these tests a bit more robust.  What do you mean by this? > Also, are you sure that Brandt isn't working on any kind of optimize functions like this to return immediately? Might cause timing issues."
vhquang,"Just curious, would it be better to `set_index` and `reindex` on `tall` instead of on the groupby? In that case `values` should not be empty, and need to be instantiate with correct missing values. So I am not sure if that worth the effort. I just curious on your consideration."
vhquang,"Definitely micro optimization, but I am tempted... ```suggestion             (len(data_dates), len(sec_ids), ```"
chaburkland,"Ah! I wanted to do this, but I can't. `sec_ids` is an argument from the user, and can potentially contain sec_ids not in the tall frame. As such, I am forced to do this unique move."
chaburkland,"Tall is a a tall frame, where the index is made up of two columns: `permno` and `data_date`. Thus, I can't set the index to date, since it's not unique :/ Plus, any attempt to operate on `tall` would be too slow, as it would require using an index hierarachy. I will try it though to confirm my intution!"
MadisonAster,"Well I was thinking a natural assertion to make would be to make sure the measured time was greater than 0. If some of the fancy new optimizations they're working on make things like an empty function with only a pass statement return instantly (at least from the timer's perspective). Then this might cause a weird failure down the line. Highly speculative, and I probably shouldn't have mentioned it, but the thought occurred to me."
chaburkland,"Oh I see now what you're saying. Haha. Um, I think it's highly unlikely that an empty function in the future will take literally no seconds, but even if it did, that wouldn't count as a failure. It just means the output would look like this: ``` run_timer<start>: func run_timer<stop>: func 0:00:00:00:00 ``` which would be accurate in that theoretical case!"
vhquang,Got it. Thanks for the explanation!
vhquang,"I would prefer to make more explicit that `emc` is a product with unusual regions. ```suggestion             expected_regions = {""Euro"", None} ```"
vhquang,"Now that we have a working build, and can think more about this approach. This will fail validation test, since we cannot build EMC 2021-09 anymore.  An approach that I can think of is just a workaround, that we build the CarbonTransition carve first, to save the values.  ```python CarveSpec(     carve_product_id=EURO_VAL_LC_ID,     ...     ),     **{         plugin_carve.ATTRIBUTE_MULTI_PLUGIN: ClimateTransitionPlugin,     }, ), CarveSpec(     carve_product_id=""emc-euro_val_ff"",     ...     **{         plugin_carve.ATTRIBUTE_MULTI_PLUGIN: rm_multi_plugins.FFReductionPlugin,         ...     }, ), ``` Then check if the return `carbon_pre_carve` is an empty namespace (already called), or hasattr `field_carbon_intensity` (first called). This will support past builds and future builds.  Having the methodology depends on the order of carves is very usual, along with doing hasattr. Let talk more if we can find a better approach before settle with this."
gettodaze,I see! Thanks!
gettodaze,"I see! I'll make this change in the interim. I still wonder if it might be useful to have the field name as a class attribute, but maybe not."
vhquang,Thank you! :heart: 
vhquang,"I don't remember if John and I provided a complete coverage for `column_missing_value_map`. Let pretend to be strict, so we will realize what we missed.  ```suggestion         fill_value = self.RESOURCE.column_missing_value_map[col] ```"
vhquang,"As I recall from my stand up with John, we don't plan to use the name of the series. Its only purpose is for pivoting, which doesn't care about the name.  ```suggestion         sr = func(table_frame) ```"
vhquang,"I am not really update-to-date with the development of static-frame. I am curious, what is the benefit of `insert_after` vs `FrameGO`?"
vhquang,Thank you! :rocket: 
vhquang,"Good point. I don't remember why we didn't exclude first, if we have duplicate ws_perm_id_co. @gettodaze "
vhquang,"This is a thought that we haven't yet verified, nor have unit test to cover for future iteration. I would rather be safe with the assumption at the cost of the performance. We can make performance enhancement after first release, and feature requests are more stable."
vhquang,"Can you elaborate on why the `key_cols` added to the selection, but we will ignore it? Those 2 columns can be safely assumed to exist in each table/frame. I don't see any harm in enforcing, but I also don't see addition benefit for adding it."
vhquang,"Does Chris know we mutate a static-frame? FYI, I am fine with not letting him know. :slightly_smiling_face: "
chaburkland,:joy: 
chaburkland,"The `.rename` calls have virtually no overhead, and so there's no harm to leaving it. I want to keep it since imo it helps the code to be a bit more self-documenting"
chaburkland,My guess is the they're the same (but let me ask Chris!) I think I used it cause it's a fancy new toy with static-frame I recently learned. I can put it back if you'd like  The only other point might be that it's less lines of code :shrug:  
chaburkland,"Oh! The other reason was to take advantage of the `fill_value` when adding a frame. Using a FrameGO will force the fill_value to always be `np.nan`, since there's no way of setting that without doing an explicit `.assign` move afterwards."
chaburkland,"In every test I ran, I was able to confirm the `df.pivot` always sorts the data. I do think the performance here matters, but if it makes you nervous, I can add a unit test."
chaburkland,"I was trying to optimize your loop and the number of indents. In the old code, you were looping through every single df column, although you only cared about the `cls._TABLES` fields. However, the call to `cls._clean_frame`, expects a frame to contain the key cols.  So what my code does, is initially filter down the frame to only include key_columns & fields from `cls._TABLES`. Then, my loop only has to skip the key cols, since every other field in the `df` is guaranteed to exist in the `frame`.  Maybe it's too confusing though :eyes: "
ForeverWintr,"Sorry to nitpick, but could you name this 'xlsx_file' to adhere to our coding style?  ```suggestion         xlsx_file = cls.get_filename(as_of_date, filename)         aum_data, currencies, year_mos = cls.parse_aum_file(xlsx_file) ```"
ForeverWintr,"```suggestion             choices=inventory.AMSDBConnectionSpecMap.keys(), ```"
vhquang,"If we simply combine all the outputs, it will remove the dependency on carve order. The assumption left is we are assuming `field_size` is the same for both carves. Let me work on that. ```suggestion                         ret = PluginReturnPostCarve.combine(                 PluginReturnPostCarve(is_ff_field_pre_ci=is_ff_field_pre_ci),                 carbon_pre_carve,             ) ```"
nekobon,Please comment here why we have size screen here while ff doesn't. 
nekobon,"Please either (1) remove this max weight here, or (2) write a comment about why this is needed here."
gettodaze,"Ah, is this assuming that files are `npz` files and folders are `tsv` folders?"
gettodaze,"I personally think `DEFAULT_OUTPUT_FORMATS` makes more sense, but I could see it both ways."
gettodaze,What's the benefit of having this in help vs choices here?
gettodaze,"Maybe ```suggestion     def from_tsvs(cls, path: Path) -> KleioOutput: ```"
vhquang,"We need it here, since ClimateTransitionPlugin reads the carve max_weight in the carve plugin kwargs, as CTI RMC may set max weight different per carve. On another hand, FFReductionPlugin reads max_weight from build spec, not carve spec."
vhquang,"In techdoc, they specify L/M for this portfolio. I think in FF, it is implicit, as all ""Euro"" companies are either `large` or `nan`. And `nan` size would be filter out by rafi screen: https://github.com/ResearchAffiliates/invsys/blob/18ca215151d0da5382447b727bdd1508877e242d/RAPC/core/methodology/rm_base.py#L218-L224  I would prefer to explicit set FF screen by size, than have it implicitly filter by rafi screen as we have done so far."
gettodaze,@vhquang Thank you! I was looking for where the size filtering was happening :smile: 
ForeverWintr,"Not exactly. If there is a `'kleio.zip'` present, I assume it's an `npz`. Otherwise I assume it contains folders with `tsv`s in them. Is that what you meant?"
ForeverWintr,"I went back and forth about this. It's the default value for the `--output_format` flag, which happens to be able to take more than one argument. I'm ok with calling it `DEFAULT_OUTPUT_FORMATS`, too."
gettodaze,Ah I see; I didn't catch that 208 uses `npz_path` and 209 uses `path`. Thanks!
nekobon,"I don't think Euro companies are necessarily always large. They can fall out to small but still in Eurozone due to QSR. In ff, we are keeping these companies in. For cn, we're removing them explicitly."
gettodaze,"Oh no! Then maybe that makes more sense. I was going off the launch args variable below: ``` output_formats: tp.Tuple[OutputFormat, ...] = DEFAULT_OUTPUT_FORMAT ```"
nekobon,"QSR combines the last 4 builds (including current) with some percentage weight on each to sum to 100%. For example, when a company A was in the Eurozone sleeve last year (which implies Eurozone large in PSU last year), but it became small between then and now (in Eurozone small this year), we end up with some nonzero weight on A although it is a small company. I hope this helps. I'm happy to chat on zoom more."
gettodaze,"@nekobon Can I ask, (1) how is this carve rule applied in QSR? Is the spec being regenerated and rerun in blender?   (2) And how would small companies come back in during QSR? Is it that we keep the companies from all the recent 4 tranches and update their data with the new PSU's data?   (3) And then we apply a subset of the screens (i.e. the carve rule but not the `RMBase._add_rafi_u_screen_and_size` valid_cg_and_size screen)?"
gettodaze,"That helps for my second question, but I'm still curious about (1) and (3). I am available on zoom if that works better! Or in hallway later this week etc."
nekobon,(1) there is no carver rule applied in QSR. It simply takes the tranche constituents.
nekobon,(3) yes
vhquang,> I don't think Euro companies are necessarily always large. They can fall out to small but still in Eurozone due to QSR.  I forgot about the fall out. That's a good point. I think it would be good to confirm with Ted and Research that they indeed want to remove the fall out.
MadisonAster,"Maybe it would be more clear to just write ""deprecated"" in the docstring? If the plan is to remove this, I would consider it already deprecated. Waiting to call it deprecated until other uses of it have been cleaned up doesn't seem very useful. A docstring would offer a clear warning to other users, where they might not see this comment."
MadisonAster,I feel like this should be a function in date_util
MadisonAster,"I'm a bit confused by the logic of calculating returns by subtracting the starting_levels. Shouldn't we be subtracting the cost basis? This would only show the difference in price between the start and the end for a given portfolio, not the returns."
gettodaze,"Meeting recap: This build is post-QSR and the tech doc here > Begin with Parent Starting Universe, Developed Europe ex UK Large/Mid constituents. Then remove all companies outside of the Developed Eurozone.  actually refers to EMS pre-QSR build.   Also, while not written in the tech doc, FF is unique case that does not filter large/mid post-QSR. But CN does filter only large/mid post-QSR. I will add comments to the code."
gettodaze,"@vhquang From what Yu said, Ted and team does want to remove the fall out for this new carve, but not for FF. Apparently it is the normal strategy but FF is just unique. I added some comments and you as a reviewer here #2075 "
gettodaze,It actually is! It's just casting the `date_util.eom_range` function to a list.   I don't know if there's a need to have another function that takes two dates and returns a list.
gettodaze,"Oh, haha, woops! I always think ""deprecate"" means to remove, but it just is staging to remove. I will adjust the comment to just say ""deprecated""."
gettodaze,What's a cost basis? I was told that the returns between two dates are defined as `(ending_levels - starting_levels) / starting_levels`.
MadisonAster,"Ah, I see. Yeah looking at usages of this now, looks like it's usually cast as either a tuple or a list when it's called, but it seems like there are a few cases of it being used as a generator."
MadisonAster,"A cost basis is the price that was actually paid for current holdings. If I buy 1 share at $100, and the next day I buy another at $300, then my cost basis for that position is $200. If a position was added in the middle of the month, but we're subtracting ending_levels from starting_levels, then we're reporting inaccurate data.   To be fair though, almost all platforms I've seen calculate this incorrectly anyway, so we aren't alone. Try buying a share of an etf that had a big gain/loss intraday and look at what your brokerage says your personal gain/loss was for that position, it will calculate this incorrectly as well and tell you that there was a big loss or gain on that position even though you just opened it."
flexatone,"Hi @MadisonAster : your comments on this are interesting, but we are most certainly not calculating this incorrectly. We do not have a cost basis in this sort of return calculation. We are not modelling an investor holding shares and accumulating shares intra-month. We are simply calculating the return of a single stock's price, independent of any consideration of how many shares are held and when they are bought. If a stock is $100 on 2/28 and $150 on 3/31, the return is (150 - 100) / 100, or 50%. This is exactly how all of our index calculators (S&P, Solactive) calculate our index returns, both at the constituent and portfolio level. Again, this is different than consideration for an individual investor holdings shares, but that is not our concern.     "
gettodaze,Thanks for the conversation Chris and Maddie!
ForeverWintr,"Haha, that suggests this should be called `DEFAULT_OUTPUT_FORMATS`, as I do always store the result in a tuple even if there's only one. I'll update it. "
ForeverWintr,"Using choices doesn't work with my `type` argument below, because `type` is evaluated first. if I set `choices=OutputFormat._member_names_`, this happens:  ``` $ kleio.py --output_format xlsx  kleio.py: error: argument --output_format: invalid choice: <OutputFormat.xlsx: 1> (choose from 'xlsx', 'npz', 'tsv') ```  Or if I set `choices=list(OutputFormat)`, argparse works, but the help isn't very helpful:  ``` $ kleio.py -h ...   --output_format {OutputFormat.xlsx,OutputFormat.npz,OutputFormat.tsv} [{OutputFormat.xlsx,OutputFormat.npz,OutputFormat.tsv} ...] ... ```  It seemed easiest to just write my own help message (which I've updated to clarify that you can specify more than one!). "
gettodaze,"This will be updated in my next PR, was just temporary for now. The next PR handles overrides appropriately."
gettodaze,I like this!
gettodaze,"What kind of unittest would you add? I don't see this behavior explained in the pivot documentation so I'm worried even if it is sorted output, that could just be an implementation detail? I defer to you though if you think that risk is low."
gettodaze,"I think that reducing the number of columns passed into clean_frame and pivot could potentially help performance, but this still has to loop through all of cls._TABLES anyways to find the intersection with the columns (right?), so I don't know if we get any benefit there. "
chaburkland,Oh that's true I didn't really think of that. I could revert this change then
chaburkland,"Since you both are extremely apprehensive about this, I'll just go ahead and put it back, even though I think it's not necessary"
vhquang,"If you can think of a meaningful description for this args, let add it to the docstring as well. If not, it is also fine not having it."
vhquang,"It's a minor point, but I hope it makes clearer that this column is available on all tables. ```suggestion                 data_date_col=ISS_Table.DataDate, ```"
vhquang,"```suggestion             raise ValueError(f""(DataDate, COID) is not unique for {dup_f.values.tolist()}"") ```"
vhquang,"As I understand, we are reading the override file. And these names are identical to ISS columns is just a choice of the author of the file. If so, let add comment that these names are independent to ISS data, but are chosen to be alike by us."
vhquang,"Small suggestion for considering, alternative name that I can think of for this is `IterNameFrame`. When I first read `FrameItem`, I think of item in the frame."
vhquang,"```suggestion             yield name, frame.loc[sel, list(fields)] ```"
vhquang,"If we expect this file is available, maybe we can set `resolve(strict=True)` for fail fast."
vhquang,"Just curious, and sorry if I forget, but do we have ISIN with multiple IssuerID, or vice versa IssuerID with multiple ISIN, on same day?"
vhquang,It seems this can also be staticmethod.
vhquang,"This is a big list. Do you think it is better to have it as set, or having unittest, to prevent me or someone else adding existed Key to the tuple? This is not an issue, just a thought from me."
vhquang,"Does this assert too strict? If ISS accidentally has multiple rows of same ISIN, IssuerID that in our drop list, it may trigger this assertion.  Besides, check then raise ValueException/RuntimeException would be more preferable than assert this way, IMHO."
vhquang,"A small suggestion, maybe we can typehint this? Also, if child class is expect to set this value, then we shouldn't initiate this with value. ie: ```python DEFAULT_FP_FLAG: PosixPath ```"
vhquang,"I don't fully understand the motivation for creating new override from the mapped_bus. If for duplication checking, can we have an utility from `MappingOverrides` instead of initiation? We can chat in our standup if it is easier to explain that way. "
vhquang,These seems to be more like comment. Would it better to have them out of the docstring?
gettodaze,"```suggestion             # NOTE: json.load will convert all keys to strings, so we convert back to integers.             acct_num_map_inv = {v: int(k) for k, v in json.load(f).items()} ```"
gettodaze,"Or well, maybe `json keys are strings, so we need to convert back to integers`"
ForeverWintr,I think it's actually json.dump that converts to strings! But good point about the comment.
ForeverWintr,"Huh, your second comment hadn't appeared on my screen yet when I wrote mine. I like `json keys are strings, so we need to convert back to integers`."
gettodaze,"Haha no worries, I figured!"
gettodaze,"Hi @nekobon (not urgent), I asked in slack as well, but I'm wondering if we need to consider `nan` when mixing weights? If so, is there a convenience function that does this somewhere in the codebase?"
nekobon,"I usually use `np.nansum` for this type of sum. How about ```python np.nansum([row[c] * mix for c, mix in mix_ratio.items()]) ```"
gettodaze,Works like a dream! Thanks Yu!
nekobon,"`field.fill_window` is ignored in this case. How about to assert just in case? ```suggestion             assert df.shape == frame.shape, df.shape             assert df.fill_window is None ```"
chaburkland,@nekobon This was updated slightly from your last review to manage the memory-map finalizer
chaburkland,@nekobon The whole `CRSPPriceWide` class changed to accomodate the SF api that returns a finalizer
gettodaze,I see. Let's omit it for now then.
gettodaze,"I was going to use this flag, but forgot to remove it when I decided not to."
gettodaze,"Oh cool, thanks!"
gettodaze,ISIN with multiple IssuerID
gettodaze,Changed to a set!
gettodaze,"Yeah, I should change this to a ValueException. I want it to be this strict so that we know we are not dropping more than we intended. This is writer-side, so if we need to remove the exception in the future, it should be relatively simple."
gettodaze,"I don't use it much, so I will just remove."
gettodaze,I pushed some changes for you to look at!
gettodaze,"@vhquang After thinking about this comment, I went ahead and added a subclass of our ISSReader to automatically use the WS overrides and mapping. Then in the base class, the override class and mapping class can be provided. Let me know what you think."
vhquang,"Given that we didn't make any validation test for the 2 carves build (FF and CN) that you send to Ted, this change is fine. But if we want to use that build (bid8049b) as validation, it is better to rebuild. Otherwise the bid8049b has different carve id, and won't compare the diff."
vhquang,"Just a note that the only place we need `plugin_carve.ATTRIBUTE_CARVE_MAX_WEIGHT` is in `process_in_carve`, and currently we didn't implement anything with it. So if Ted doesn't need that constraint, we can remove this. If he does, we would need to implement it."
chaburkland,This was a formatting only change.
chaburkland,```suggestion             frame = frame.assign.loc[sel].apply(lambda s: s.fillfalsy_forward()) ```
chaburkland,```suggestion             frame = frame.assign.loc[sel].apply(lambda s: s.fillfalsy_backward()) ```
gettodaze,Thanks Charles!
vhquang,"I think it would be simpler, if our workflow is: raw_bus --> mapped_bus --> pivot_bus --> fill_bus --> shift_bus. That way, if shifting, we will always shift forward. And this branching can be reduced, since we will need to fill regardless shift or not."
vhquang,"I think with your change for the override merged, we are good to produce the static file. I will upload it, so we can remove this ""if"" for good."
vhquang,I think there should be a simpler way to build this reverse look up. Let me explore couple things first.
gettodaze,"I like the name `shape`. It originally confused me because `shape` typically refers to `Frame.shape`, but I think it actually is quite intuitive. Maybe we could use a synonym like `structure`."
gettodaze,What's the purpose of this function?
gettodaze,```suggestion def _sum_not_all_nan(*frames: tp.Sequence[sf.Frame]) -> sf.Frame: ```
gettodaze,```suggestion     if len(frames) == 1:         return frames[0] ```
gettodaze,I like this!
gettodaze,Why do we need `union=True` here?
gettodaze,"This seems a bit overcomplicated to me, but I guess its fine for now."
gettodaze,"@nekobon @vhquang  I realized `np.nansum` doesn't quite behave as I expected: ``` In [26]: np.nansum([np.nan, np.nan])                                                                                   Out[26]: 0.0 ``` (Note: I did see `In NumPy versions <= 1.9.0 Nan is returned for slices that are all-NaN or empty. In later versions zero is returned.`)  Is this okay? Do we want to have `nan+nan=0` for weights? "
MadisonAster,Did you mean to leave this date hardcoded? Is this a similar situation to barclay's bonds where we plan to discontinue usage after this?
MadisonAster,I've been doing imports inside my functions and moving them to the top of the module towards the end of my PR's to help cut down on linting errors when I'm wrapping up a PR. Were you doing something similar here? Or is this part of another practice you've been following?
chaburkland,"In general, we only put imports inside functions to avoid circular imports (if/when they arise), to prevent having imports at the module-level that are not guaranteed to exist (the SDK is a good example of this), or to more explicilty show that a certain function/class is completely self-contained.  Basically, if I was to delete the `HigherMomentInitializer` class, I don't also have to remove unused imports at the top, since there will be done. All imports needed only for that class are contained insided it.  Since Guru wrote  this, I assume he had a good reason for it, although I'm not exactly sure why. But also, since this is a one-off script only, I'm not really concerned about it"
chaburkland,"Yeah this is a one-off script written by Guru to initialize the attr table for higher_moment. I think that date was chosen deliberately, and since it's only used here, hardcoding it seems appropriate to me."
flexatone,Does this unsized dtype work? Can you provide the proper size?
flexatone,"It might be a little cheaper to use `index_depth=0` and form the dict by zipping the first two columns. You would miss out, however, on the uniqueness check of that first column."
flexatone,"Assuming `sel` is not contiguous, you likely do not need the `deepcopy` here. But I am not sure if it is worth the potential risk."
flexatone,Nice!
chaburkland,"These mapping files are very small (<2Kb), so there isn't a real need to optimize this, since they are already really fast.  I did check though, and zipping it is 11ms faster! Haha"
chaburkland,"I am rather scared of the potential risk, so imo the `deepcopy` is essentially mandatory"
chaburkland,"It does work! I am pretty sure that ` = np.dtype(""<U"")` is essentially the same as saying `= str`.  I don't believe I can provide the proper size, since in typical DB schema fashion, string columns are over-allocated. From the documentation:  ``` sec_type_sym = varchar(400) sec_type2_sym = varchar(30) ```  Given this, it's very difficult to know the correct size to define here."
gettodaze,"Maybe we could use `class_only_design` for this? If ISS_Table inherited from `Namespace`, it could be like: ``` In [6]: from class_only_design import Namespace                                   In [7]: class A(Namespace):     ...:     mycol = 'a'     ...:     theircol = 'b'     ...:                                                                           In [8]: list(A)                                                                  Out[8]: ['a', 'b'] ```"
nekobon,Please explain when we should use this over `levels_to_returns_handle_na` in the docstring
nekobon,Please explain when to choose this function over `levels_to_returns`
nekobon,Is it equivalent to forward filling or interpolation? (please add a bit more explanation in the docstring)
nekobon,Same here; please write when this is more useful than `returns_to_levels`
nekobon,I think `handle_na` is a bit vague. Could it be something more explicit?
nekobon,"It is a bit confusing that `levels_to_returns_handle_na` removes nan while `returns_to_levels_handle_na` keeps nan. Maybe more explicit function names can help (levels_to_returns_ffill, returns_to_levels_keep_na, etc)"
vhquang,"Yea, this is what I have in mind with `dataclass`, but `Namespace` is simpler. I like this suggestion. Thank you!"
chaburkland,"I know we have this pattern elsewhere, but given that I recently discovered the `|` typing tool, I think it would be simpler to do this instead:  ```python from __future__ import annotations  def levels_to_returns(     *, levels: sf.Series | sf.Frame, keep_index: bool = False ) -> sf.Series | sf.Frame:     ... ```  It's your call though, as it's just a style comment!"
vhquang,"In portfolio, we have a threshold (ie: > 9) to flag company. The techdoc doesn't mention threshold. Maybe I don't need to have this derive function."
vhquang,"`from_overlay` defaults that args to True. But I want to be more explicit, as the difference is intentional.  As for why we would want ""union"" instead of ""intersection"", I am not certain that each bus item is align on their shape, especially on the `ws_perm_co` columns. Having them as NaN is easier for users to spot."
vhquang,"Basically I just need a unique string. I can whip up a random string. But I decided that is overthinking, given there is already built-in function. Plus, the difference is only internal cosmetic, ie: printing the internal cache."
gettodaze,"More simply, you can just use `.rename(index=`. ```python 09:00:39 (.env38) ~$ ipython -m static_frame  ------> import frame_fixtures as ff # 0.2.1 ------> import numpy as np # 1.17.4 ------> import pandas as pd # 0.24.2 ------> import static_frame as sf # 0.8.31  Python 3.8.12 (default, Dec  8 2021, 09:23:03)  Type 'copyright', 'credits' or 'license' for more information IPython 7.14.0 -- An enhanced Interactive Python. Type '?' for help.  In [1]: f = ff.parse('s(2,2)')                                                    In [2]: f                                                                        Out[2]:  <Frame> <Index> 0         1         <int64> <Index> 0       1930.4    -610.8 1       -1760.34  3243.94 <int64> <float64> <float64>  In [3]: f.rename(index='Date')                                                   Out[3]:  <Frame> <Index>       0         1         <int64> <Index: Date> 0             1930.4    -610.8 1             -1760.34  3243.94 <int64>       <float64> <float64> ```"
MadisonAster,"Thanks John! I was trying to use set_index, but this seems much simpler."
vhquang,It is indeed my intention to refer to Frame' shape. But I see where it confuses you. I am OK with using a new word for it.
vhquang,"I think this is a bit clearer. ```suggestion         def shift_data_date(col_name: str, frame: sf.Frame) -> sf.Frame:             table = table_lookup(col_name) ```"
vhquang,"```suggestion             sel = (dates >= backward_cutoff) & (dates <= forward_cutoff) ``` So that we won't fill on new data. Also, I think let assume that we will always have `forward_cutoff` and remove if-branch in L566."
vhquang,"I don't think techdoc has specified this case (no forward cutoff). So, let not add this as a scenario to test. "
gettodaze,"Ah, I see. Are we not supposed to backfill past the forward cutoff?"
gettodaze,I see! That way we can better enforce that fill bus is always being used with a forward cutoff. I will make these changes.
nekobon,How about to change this name to something that explains how it's different from `returns_to_levels`?
vhquang,"That is my understanding. I remember in the meeting, the spirit for handling is that we will leave new data untouch, as we think it is better than the legacy data."
gettodaze,You were right!
gettodaze,I guess you'll have to suppress those warnings. > Attempting to unpack a non-sequence defined at line 37 of papyri.core.data_sources.iss_portfolio_reader (unpacking-non-sequence)
gettodaze,Could we call this module maybe `iss_bloomberg_reader`?
gettodaze,Or maybe just `iss_bloomberg` because it contains the writer as well?
gettodaze,"And then could we move `iss_data` out of `data_sources` and just directly into `core`, maybe `papyri/core/iss_tables.py`?"
gettodaze,I think `data_sources` was a module specifically meant for the old convention of `DataWriter` writers.
chaburkland,"I know this is just alpha, so it's fine for now, but in the future I think it would be worth it to try and figure out how to make these docstrings more automatic."
vhquang,I like the new name!
nekobon,"This name is massive! Can we remove one of the `""Mapping""`?"
nekobon,"What does ""first"" and ""last"" here mean? Is this sorted by date or sec code?"
nekobon,This is the longest class name I've seen in our code base :joy: 
gettodaze,"@chaburkland I do like that, but when I tried to have  ```python from __future__ import annotations  import typing as tp  import static_frame as sf  from ISLib import np_raise as np  SeriesOrFrame = sf.Series | sf.Frame ``` I got this: ``` 10:59:53 (.env38) rapc$ pylint /home/mccloskey/src/rapc/ISLib/ISLib/finance_util.py ************* Module ISLib.finance_util ISLib/ISLib/finance_util.py:9:16: E1131: unsupported operand type(s) for | (unsupported-binary-operation) ```  I am by no means married to this though, so feel free to change in the future."
chaburkland,Both! On line 67 I am sorting the frame
chaburkland,Haha yes - I will simplify the name
gettodaze,"@nekobon Thanks for recognizing these issues! I've spent a while thinking about naming and - I changed the functions to `levels_to_returns_interpolate` because it interpolates NaNs with an interpolation limit (with NaN reassignment after returns are calculated). - and `returns_to_levels_preserve_na` because it preserves NaN with interpolation while the base `returns_to_levels` will already interpolate but not preserve NaN  Does that make sense? If not, I can readjust naming in another PR!"
MadisonAster,"typo ""bond_lengths"""
MadisonAster,Wouldn't this always evaluate to true since you're setting them both the same way on 104 and 105?
MadisonAster,"I'm unfamiliar with this ""options:"" syntax, but my IDE doesn't seem to be complaining. Is there docs that help explain this anywhere that I can read? It looks very useful."
ForeverWintr,Do you think this one might have been 'notional'?
ForeverWintr,"FYI, you can enforce this in argparse by using `add_mutually_exclusive_group`."
ForeverWintr,Why do we have two wordlist files?
ForeverWintr,3 wordlist files*
chaburkland,"Nope! This will only be true for the 3M bond record for each country. On line 103, I'm setting `instr_id` to be the ID of the _first_ record for that country group"
chaburkland,"I'm a bit confused. `_get_arg_parser` is a private module-level function I wrote in this file that returns an `ArgumentParser` object. I'm instantiating it, and then calling the standard `.parse_args()` method on that arg parser, and then saving the result to a variable named `options`."
ForeverWintr,"FYI, I think `assertEquals` is deprecated."
ForeverWintr,"```suggestion             self.assertDictEqual(result_rapid._asdict(), expected_rapid._asdict()) ```  Turns out `assertEqualDictLike` just wraps `assertDictEqual` after converting its arguments to a dict. "
ForeverWintr,```suggestion       python deploy/apps/main.py --apps airflow_dev --playbook setup_remote ```
ForeverWintr,```suggestion       python deploy/apps/main.py --apps airflow_wo_sandbox --playbook app_start ```
ForeverWintr,```suggestion       python deploy/apps/main.py --apps airflow_dev --playbook app_start ```
ForeverWintr,--parallel doesn't work here as not all of the apps in `airflow_all` are on different machines. I think this would work:  ```suggestion     python deploy/apps/main.py --app airflow_workers --playbook setup_remote --parallel     python deploy/apps/main.py --app airflow_sandbox --playbook setup_remote --parallel     python deploy/apps/main.py --app airflow_server --playbook setup_remote ``` The first two commands let us run on all workers simultaneously in parallel; the third has to be synchronous because all three executions in `airflow_server` are on the same machine.
ForeverWintr,Same deal about `--parallel` here. Perhaps we should just link to this SO answer instead of duplicating the information: https://stackoverflow.com/c/research-affiliates/a/154/4 ```suggestion       python deploy/apps/main.py --apps airflow_all --playbook app_start ```
gettodaze,"There will be a unique `RAPID` for each currency, so you shouldn't need to handle this. Are you maybe hoping to do currency conversion here?"
gettodaze,"This is a cool way to slice out every 12 months from a list. But my understanding of yearly levels is to get the `YYYY-12-31` date for every year, and in that case it might just be simpler to do a range over the years you want.   But maybe this is what you want as well. If it is, I think it might just be simpler to do slice the monthly levels like: ``` yearly_levels = ppd.monthly_levels.iloc[len(f)%12-1::12] ``` Example: ``` $ ipython -m static_frame In [18]: f = ff.parse('s(25,2)')                                                  In [19]: f.iloc[len(f)%12-1::12]                                                 Out[19]:  <Frame> <Index> 0         1         <int64> <Index> 0       1930.4    -610.8 12      3442.84   1146.32 24      3287.02   -453.12 <int64> <float64> <float64> ```"
gettodaze,Do you need to add the start date? Maybe we can zoom about it.
gettodaze,Is this just left over from your old code? I don't see it being used here.
gettodaze,What leads you to use UpperCamelCase here?
gettodaze,"Why this spec? Are you going to use a different spec in the future? If so, it might be good to put a note here"
gettodaze,Is this `window_size` now `periodicity`? 
gettodaze,"Also, it could be good to pass the `rf` as an argument in 262 and 265."
gettodaze,"Does this just return the whole performance report? If so, maybe this name could reflect that."
gettodaze,"I am not an expert flask user, so I'm curious where is the `request` coming from and what does `.args.get` do? Does it look for the given args in the query of the request?"
gettodaze,"Maybe it might be simpler to use `request.args` to remove the `endpoint_args` from the dictionary and assign them to local variables, then to supply them as `kwargs` to this function.  Something like: ``` data_format = request.args.pop(""data_format"", default=""to_parquet"") ... result = returns_time_series(data_format=data_format, ..., **request.args)"
gettodaze,Is this just an unrelated doc fix?
gettodaze,"I think you are handling `data_format = None` upstream, so this could be a required argument."
gettodaze,"For this many arguments, I would make it `kwarg` only so that reordering does not cause any errors, but maybe you have other considerations."
gettodaze,"Do you need the spec here? Based on your arguments, I wonder if you meant to just parse the `rapids` instead of using `spec.rapids, like  ``` rapids = (rf[rapid_str] for rapid_str in rapid_strs)"
gettodaze,This final frame has `SpecRow` indices; I wonder if you might want to parse that.
gettodaze,"Ah, this is a dictionary and the default you set is `to_parquet`."
gettodaze,"I think the dict is fine, but maybe also this could be a seperate `Enum` of constants because you reference `daily, monthly, quarterly, yearly` in your tests. Something like: ``` In [35]: class PERIODICITY(str, Enum):      ...:     daily = 'daily_returns'      ...:                                                                          In [36]: class myClass:      ...:     daily_returns = 'a'      ...:                                                                          In [37]: getattr(myClass, PERIODICITY['daily'])                                  Out[37]: 'a'  ``` "
gettodaze,"Again, I'm not sure that you want to have currency code here."
gettodaze,"```suggestion         start_date: in isoformat, (e.g. YYYY-MM-DD)         end_date: in isoformat, (e.g. YYYY-MM-DD) ```"
gettodaze,"I think the upstream `rapids.split("","")` will return a list even if the given rapid has no `"",""` in it, so this typehint could justbe `tp.Iterable[str]`"
gettodaze,"Ack, many thanks for the FYI! I knew one of them was deprecated and got it mixed up a while back so I've added quite a number of `assertEquals` into our codebase :scream: "
ForeverWintr,"I know you didn't change this, but FYI you can do this to avoid compiling the regex for every item:  ```suggestion         pattern = cls.url_format.format(yearmo=""([0-9]{6})"")         compiled = re.compile(pattern)         for item in SharepointClient.list_items():             match = compiled.match(pattern, item[""webUrl""])             if match: ```"
ForeverWintr,Is this todo still to do?
ForeverWintr,"Could you create an issue for this, and reference it here? "
ForeverWintr,"Can you use `logging` instead of print here (so others can silence these if they're not relevant), and add some context about what it means if the portfolio and factors don't intersect? "
ForeverWintr,"I know this is an internal method, but you might consider calling it something like `_iter_regressions` to clarify that it won't actually do anything until you iterate over it."
ForeverWintr,Actually I don't think 'notational/notional' adds anything here anyway.   ```suggestion         aum: AUM in USD. ```
MadisonAster,Oh I see it's a typehint notation. I didn't recognize it outside of the context of a signature. 
MadisonAster,Yes sorry I forgot to delete this function.
MadisonAster,"Yes this is unrelated, just fixing a typo from a previous PR."
MadisonAster,"yes, fixed now."
MadisonAster,Makes sense. Fixed now.
MadisonAster,yes that's correct. It's defaulting to_parquet in the case of no format being specified. 
MadisonAster,"Good point, fixed now."
MadisonAster,"Hi John, I discussed the naming of this with chris, and I suggested names such as Performance Series during that conversation, but he wasn't a big fan of that. This was the name we wound up settling on."
MadisonAster,Yes part of the requirements for this is to convert to various currencies. Thank you for reminding me to test this better. It looks like I forgot to connect it.
MadisonAster,"Should I switch to ReportSpec? I only used this because it was in the example I was referencing, I don't clearly understand the difference between these classes yet."
MadisonAster,Great point. Fixed now.
nekobon,Did you two chat about this function? I think year-end would mean 12/31. Is it requested differently?
johnjhawk,"thanks, I made these changes"
johnjhawk,makes sense!
nekobon,Is this the same? ```suggestion         return tuple(sorted(set(self._REQUIRED_COLUMNS) | source_fields)) ```
nekobon,"There is nothing that guarantees there is only one data per month, so I think `int(end - start) != (len(div_yield) - 1)` could still be False when some months are skipped? For example ```python [ 1/1, 1/15, 3/1, 4/1, ] ``` "
chaburkland,"This is pretty cool. I think there might be a much easier way to do this though!  What about: ```python remap = {v: k for k, v in index_to_intermediate.items()} kwarg = ""index"" if axis == 0 else ""columns""  result = intermediate_to_value.relabel(**{kwarg: remap}) if allow_missing:     result = result.reindex(**{kwarg: index_to_intermediate.index}, fill_value=fill_value) return result ```"
chaburkland,Were you hoping to remove `cls._sample_frame` entirely since it's moved to sf_util?
chaburkland,I don't think these are doing the same thing. Is this a bug fix or an improvement only?
gettodaze,"Right, it is a bug fix. `coids` doesn't have unique values, so it was previously failing on `ca_f.reindex(coids.values)`. That's the purpose of this PR."
gettodaze,"Hmm, I should add a better docstring. That's a cool way of thinking about it, but I also need to handle the case of `index_to_intermediate` having duplicate values: ``` In [34]: f                                                                                                                                                                                                                                     Out[34]:  <Frame> <Index> A         B         <<U1> <Index> 0       1930.4    -610.8 1       -1760.34  3243.94 <int64> <float64> <float64>  In [35]: index_to_intermediate                                                                                                                                                                                                                 Out[35]:  <Series> <Index> a        A b        A c        None d        D <<U1>    <object>  In [36]: sample_frame(intermediate_to_value=f, index_to_intermediate=index_to_intermediate, axis=1, allow_missing=True)                                                                                                                        Out[36]:  <Frame> <Index> a         b         c         d         <<U1> <Index> 0       1930.4    1930.4    nan       nan 1       -1760.34  -1760.34  nan       nan <int64> <float64> <float64> <float64> <float64> ```"
gettodaze,"Yeah, my hope is to merge my old and new use-cases for this type of move."
chaburkland,Ah I see. :bulb:  Okay then your implementation looks great
chaburkland,Will that be done in a separate PR?
gettodaze,"No, I just did it here with this change. The implementation I gave already considers both use cases.  Are you thinking I should have it as a separate PR?"
gettodaze,Good idea!
gettodaze,"Nope, thanks!"
gettodaze,Good suggestion! #2185
gettodaze,"Note, a new test is added to replace this in #2186 "
gettodaze,"Note, I still need to confirm the schedule/location of the files before merge."
gettodaze,Change to SBI
gettodaze,"Note: figure out when we need the regression by, and derive yearmo to add to filename, fail if not found"
nekobon,"This, too."
nekobon,"Also this one, as ABCDataWriter defines `get_fp_components` with no argument. "
nekobon,ABCDataResource.get_fn doesn't take yearmo. Can we keep the same interface?
nekobon,"This, too."
gettodaze,"@nekobon Should I put the yearmo in the suffix? Or I could do something like: ``` cls.get_fn_template(suffix).format(             yearmo=""{yearmo}"", date=du.get_date_str(as_of_date)         ) ``` and then format again downstream?  ----  Alternatively, below I do determine the `yearmo` from the `as_of_date` and error if the specified yearmo is not provided: ```python         previous_quarter_end = date_util.get_quarter_end(self.as_of_date, -1)         yearmo = date_util.date_to_year_mo(previous_quarter_end)          # validate_yearmo         available_yearmos = set(self._get_available_yearmos())         if yearmo not in available_yearmos:             raise ValueError(                 f""Expected yearmo {yearmo} for {self.as_of_date=} not in {available_yearmos=}""             ) ```  Maybe its best for the user to just assume that each `as_of_date` is for the latest `yearmo`. I'm not sure if we have a use-case to decouple the `yearmo` and `as_of_date` yet. "
gettodaze,I added separate functions to handle the yearmo!
gettodaze,"I realize we do have a use-case to decouple `yearmo` and `as_of_date`: now, haha. The last quarter end is `2021-12`, but I want to write `2021-09` data. I also added a `write_yearmo` function."
chaburkland,"`ds_mcap` is a series with index = `""info_code""`.  This code block was incorrectly reindexing that against the index of `cos_with_na_mcap_info_codes`, which is a series of info codes with index = `""ds_sec_code""`.  "
gettodaze,Do you need to handle a case where `co_info_codes.values` is not unique?
gettodaze,Should these fill values use `SDKFieldMissingValues`?
gettodaze,Could these variable names maybe be renamed to indicate that difference? Alternatively a comment?
gettodaze,"Because we frequently add attributes to `Rapid`, ideally this test will be robust to that: ```suggestion     external = Mock( ```"
ForeverWintr,"Hmm, but I don't think `Mock` will work here, as I actually need some of the attributes; I also want to make sure the Rapid I'm testing with is representative of a real rapid. If I made this a Mock, the test would still pass if we changed the name of one of the rapid attributes I'm using, for example.   Something like default arguments would be nice, but I think keeping this up to date with new attributes is ok for now. "
chaburkland,No - this is guaranteed to be a 1-to-1 mapping. I will add a comment though. Good observation!
johnjhawk,I like that this is not a default value anymore.
johnjhawk,"when will a rapid in this set need to be added or deleted?   if this is something that we have to maintain every not and again, could you put a comment on what is expected when a rapid is added/deleted? "
gettodaze,"I see, we can talk about this again down the road. Maybe it would be best to add default arguments."
chaburkland,"A few notes.  In general, I think it's always preferable (when possible), to place the modification of nonlocal variables used in a closure above it's definition. (In other words, this change to `mic_map` should be done above `def lookup`).  Also, `mic_map.loc[:, [""a"", ""b""]]` is equivalent to `mic_map[[""a"", ""b""]]`, where the latter is the preferred style.  Finally, while normally I would like this change, the current design approach the `ProcessorGEIUSecurity/CompayWorldscope` classes are taking, is that the functions are strict about what their input is. They only receive what they need. This change makes it so the incoming `mic_map` frame contains more columns than it needs, and so now the function is forced to filter it down.  Currently this is redundant, as in the original call to `GEIUWorldscope.from_sec(`, we already filtered it down to the two columns we needed.  That all being said, I don't want to make this change, but I do understand why you made it!"
chaburkland,Good find about these files. I didn't even know they existed but they are unused.
chaburkland,Is this format removal intentionall?
chaburkland,"I would shy away from using `input` as a variable name, as it name stomps the builtin `input` function."
chaburkland,```suggestion         assert result.all() ```
chaburkland,This way you can add more bad examples to the input series. ```suggestion         assert not result.any() ```
chaburkland,Same goes to the other functions
chaburkland,Same goes to the other functions
MadisonAster,"Yes, I was unhappy with the way black was formatting my test objects."
MadisonAster,"Good point, I'll fix this."
MadisonAster,The thing that I think is less nice about depending on the filtering we are doing in from_sec is that it seems like the natural way to use this is to feed it the map that you get from DatastreamExchangesReader.get_mapping(). The user having to know that you need to filter the columns of the mapping frame down due to the internal workings of the function unnecessarily steepens the learning curve if anyone needs to look at this in the future. Alternatively we could have a filtered version of the map in DatastreamExchangesReder that we retrieve for this task instead?
chaburkland,"That makes sense. The issues you raise are definitely valid, although if the code was designed in a way where the utility staticmethods received data with spurious columns, I think that also comes with issues.  Regardless, the code is already uniform in how it's designed, and so I really don't want to make this change. I think the worst option would be to have an inconsistent approach to these staticmethods, where some of them receive only what they need, and some of them receive more than they need.  Additionally, I guess I would say the learning curve to this module is already pretty steep. I don't think that this change really does much to address the overall complexity."
gettodaze,Wonderful addition!
gettodaze,"Huh, I wonder why nobody's added this before."
gettodaze,Is this still a `TODO`?
gettodaze,"```suggestion     def __init__(self, fp: str, as_of_date: datetime.date): ```"
gettodaze,"This might just be personal preference: ```suggestion     def from_as_of_date(cls, as_of_date: datetime.date, suffix: str = """") -> BBMonthlyPUValues: ```"
gettodaze,PUValues?
gettodaze,Great comments!
gettodaze,"Maybe: ```suggestion         co_id: RESOURCE.CO_ID_DTYPE, ```"
gettodaze,What is this assert here? 
gettodaze,"Maybe ```suggestion         Returns all delivered psur up to this last_year_mo. Raises it raises if there is no delivered build for last_year_mo. For example, if (2022, 3), then it raises if there is no delivered build for 2022 MARCH.         """""" ```"
gettodaze,"Just to clarify:  If `second_friday` is `2022-01-14`: - `as_of_date` `2022-01-15` -> `last_psu_ym` `(2022, 2)` - `as_of_date` `2022-01-14` -> `last_psu_ym` `(2022, 1)`"
gettodaze,Should we use `ISLib_compat` for tests outside public?
gettodaze,Great idea! It is very much in flux.
vhquang,This gives me a panic attack. How did it get to default??? :facepalm:  Thanks for correcting it!
vhquang,"Very minor suggestion, can we name it `sdg_cols`?"
vhquang,"Except for the identifiers (ie: ISIN/SEDOL), I tried to keep those attributes in alphabet order. I think it is easier to find them, and identify existing attribute. Would you mind keeping the alphabet order? This is also a minor request."
gettodaze,Sure. I'll rename all the other column groups to have cols as well.
gettodaze,```     output_columns = (         climate_cols         + issuer_cols         + nbr_cols         + sbs_cols         + rating_col         + director_board         + sdg     ) ``` to  ```     output_columns = (         climate_cols         + issuer_cols         + nbr_cols         + sbs_cols         + rating_cols         + director_board_cols         + sdg_cols     ) ```
ForeverWintr,"I don't see a corresponding `fmt: on`, fyi."
johnjhawk,Should this be 2020?
gettodaze,Thanks for catching this!
gettodaze,"I think the name map is `tp.Dict[int, str]` right? ```suggestion         def get_with_active(items: tp.Iterable[tp.Tuple[str, dict]], name_map: tp.Dict[int, str]) -> tp.List[tp.Tuple[str, bool]]: ```"
gettodaze,"Maybe a bit more easy to read: ```python3 matching_carve_ids = [cpid for cpid, active in matching_carve_ids if active] ... [carve_id] = matching_carve_ids ```"
gettodaze,"Same as above: ``` matching_carve_ids = [cpid for cpid, active in matching_carve_ids if active] ... [carve_id] = matching_carve_ids ```"
ForeverWintr,You're right. Thanks!
ForeverWintr,"I agree, but the list comprehension isn't guaranteed to execute. "
gettodaze,What do you mean?
gettodaze,"Ohh, I see the list comprehension is in an if block. Nevermind!"
vhquang,"I think new snapshot (ie: 11/30) would cover old data (8/31). I think just move the test to test on latest file would be enough. However, I won't hold strongly on this suggestion. More tests would always be better. I just don't want to burden ourselves with slow test if not necessary."
nekobon,"```suggestion     STATIC_DIR = ""bloomberg_imd""  ```"
nekobon,```suggestion ```
gettodaze,"Hi @nekobon , I think this function may have gotten inadvertently deleted."
flexatone,"Generally, yes, but Robert wanted an iteration where they are aligned on the same last FY."
gettodaze,"I agree we should eventually get rid of the 8/31 test. But because of how the overrides work, in development of this branch there was an instance where 11/30 passed but 8/31 failed. So for now, I would prefer to keep the old tests, but I think that when we get to beta/release, we can drop the old tests."
nekobon,"I thought we no longer needed it, but I was wrong!"
vhquang,That is reasonable. Thanks for explaining that for me!
flexatone,In the past we turned this off for Ansible performance reasons; is it needed now?
ForeverWintr,"Interesting. I wondered why it was disabled. Yes, with this enabled we can get os version of the machine, and I use that to change behavior to be compatible with both ubuntu 18 and 20. Did you find a big performance difference with it disabled?"
ForeverWintr,This is where `gather_facts` is needed.
flexatone,Thanks!
gettodaze,Should this be in a new class or just this class is fine?
nekobon,"This field exists in 2020 data, so here is fine."
nekobon,"Please explain in docstring what the change is for (e.g. ""EVIC inflation definition has changed to use mcap from period ending dates"")"
nekobon,I see why you `date | float` but it is a bit confusing for me. How about `date | type(np.nan)` OR add a comment at the end ```suggestion         ped: date | float = row[ped_field] # date or np.nan ```
nekobon,"how about to add a condition so you don't need to check valid ped in the partialed function ```suggestion             target_table.add_column_from_function(                 column=field_mcap_ped,                  function=get_ped_mcap,                 condition=lambda row: not np.isnan(row[field_recent_ped])             ) ```"
nekobon,"```suggestion             raise NotImplementedError(""To be implemented after 2022 recon"") ```"
gettodaze,I will take it out now that we have the condition.
gettodaze,"`""EVIC definition changed to use MCAP from last fiscal year's most recent period ending dates.""`"
vhquang,I think the goal for the old code is to validate `process_pre_carve` and process_in_carve` of the current class and its adjacent parents. It is simpler than taking into consideration ancestors.  Did you encounter issue during development? Can you add more context on this?
vhquang,"It would be helpful to know which CO_ID this happens. ```suggestion             raise ValueError(f""{ped=} for {id_bb_co=} is not a date!"") ```"
vhquang,"I am al little confused with what everyone settle to do. From Seanna in SI meeting, I thought we want latest available at the time we build. It means we may want to include 2022-1-31 and 2022-2-28 as well, if they are available. Does it still in discussion, or my interpretation is not correct?"
gettodaze,"Yeah, the only base of `RMCarbonIntensityPlugin2022` is  `RMCarbonIntensityPlugin`, which doesn't implement `process_pre_carve` and `process_in_carve`. It  inherits from `ClimateTransitionPlugin` which does. So I need it to look at the methods implemented not only by the bases, but also the bases' parents.  Does that make sense? Does what I did feel appropriate?"
gettodaze,"Yeah, I was a little confused in the meeting as well on that same point. My takeaway was that we wanted the latest data available for the previous fiscal year, but I also remember hearing that too. I will definitely make sure I bring that up on my ticket to Ted. "
vhquang,Yes that makes sense. Thanks for the context. What you did is appropriate. Just that this validation start to feel awkward as we start inheriting the plugin deeper. 
gettodaze,"Oh, are the plugins not really meant to be inherited so deep?"
ForeverWintr,Maybe a little clearer to comment this one out?
gettodaze,What's the purpose of this change?
gettodaze,"Hi Yu, how about putting this line instead in the head of `uroborus/core/agents.py`, like maybe at line 68 or so https://github.com/ResearchAffiliates/invsys/blob/198e261fa065fbe022e7567f09b74af473bac049/uroborus/core/agents.py#L68?  I'm not sure if there are other dependencies for `TLT_MAP` that we probably don't want to adjust."
flexatone,I agree with @gettodaze  doing this here will have side effects for other clients of this mapping! We need to isolate this to within uroborous..
flexatone,"If we make this change, it will break importing anything from those TLTs anytime someone runs a setup! We should not do this here. Notice all the failures below because of this!"
flexatone,This looks like the right approach! But be sure we are not deleting stuff in top_level_tool.py and pth.py
gettodaze,"I am not sure, but I wonder if this might cause issues later down the line in `agents.py`, for example here: https://github.com/ResearchAffiliates/invsys/blob/198e261fa065fbe022e7567f09b74af473bac049/uroborus/core/agents.py#L545-L546 If it does, maybe a modular-level override at the top of the file could be better."
flexatone,"@gettodaze : I think you are right, but that a general improvement would be for that code to not use `TLT_MAP` but the `tlts` defined on line 857... or as you are alluding to, a module level constant could be defined in used in both places."
nekobon,That is a great point! 
nekobon,Do you need this line? This looks similar to a line in `super()._clean_frame(frame)`
chaburkland,"It actually isn't! It is however, the only shared logic with `_LegacyWorldscopeCompustatMappingReader`, as both of these classes inherit from `BaseMappingReader`.  Since they only had 1 shared line of code, I didn't think it was worth coming up with an abstraction, especially since one of the classes is a legacy implementation"
ForeverWintr,"If you haven't done so already, can you check with @nekobon about whether this can be deleted? If yes, let's delete it. If not, perhaps we can unskip it."
ForeverWintr,"You might also check that `reader.FIELD_MAPPING is not vtr` (checking that `get_vendor_to_ra_field_map` returns a copy, which looks like the intent)."
ForeverWintr,Do you need the `list` calls here?
ForeverWintr,"This looks a bit more [tautological](https://randycoulman.com/blog/2016/12/20/tautological-tests/) than I would like. The test is replicating the logic of the function it's testing, which is undesirable because it makes it easier to repeat the same mistake in both places. If the `frame` that comes from `_read_raw` is empty, this won't test anything, for example. Or if `_remove_invalid` removes *all* rows of the frame, this won't catch it.  Instead, in this case I would create a simple example frame, pass it to `_remove_invalid`, and then assert that it contains exactly the rows you expect.   Something like this:  ```suggestion         frame = sf.Frame.from_records([[123], [CompustatSic.SIC_INVALID]], columns=[SDKFields.SIC_CODE])         result = CompustatSic._remove_invalid(frame)         self.assertEqual(result.to_pairs(), ((0, (('sic_code', 123),)),)) ```"
ForeverWintr,"It would be nice to test that this fails when given an invalid date, like `20201131`. A good opportunity to use `self.assertRaises`. :)"
ForeverWintr,I have the same feedback here as for `test__remove_invalid` above. It's preferable to explicitly create some sample data and hard code an expected result to test against. 
ForeverWintr,"If these are not needed, can we remove them?"
ForeverWintr,What is this server?
ForeverWintr,"I think we want to mount only `rapc_input/ssf`, right? `rapc_input` also contains snapshots of the svn repo, and we want to keep those local only"
ForeverWintr,Is this file used? Why is its extension `.tpl`?
philipmassouh,.keys() and .values() return dictionary view objects which you can't compare directly as they are different classes. I don't think assertEqual unpacks them it just says no cuz they're in different classes. these views can be treated as iterators and compared that way. i could do both lines 40 and 41 concurrently in the same loop since they should be the same length
philipmassouh,"I tried unskipping and it fails. I can fix it if Yu wants, I'll ping her"
ForeverWintr,"Ah, I missed the fact that you were comparing `values` to `keys`! My mistake."
philipmassouh,I put that there because I felt the tests were silly as I was starting to write them-- I since removed those decorators everywhere else. I forgot to remove these
philipmassouh,removed
philipmassouh,` @classmethod     def get_vendor_to_ra_field_map(cls):         return cls.FIELD_MAPPING`  I should have looked at the code being tested-- I'm basically just testing `return` here so I think I should remove this test?
nekobon,"Yes, please remove and add similar equivalent one using later date (2020, 5, 31)"
chaburkland,"This is a good check! Thanks for adding this  (As a minor nitpick, I think the proper exception here would either be `RuntimeError` or `ValueError`)"
chaburkland,:+1: 
chaburkland,"This assert shouldn't be inside this function since it was a parameter to the outer scope's function. In general, it's good to place input sanitization code towards the beginning of your function."
chaburkland,"```suggestion assert sum((options.local_update, options.dev_update, options.prod_update)) <= 1 ```"
chaburkland,I think a better name might be `history_fps`
chaburkland,I think you'll also need `index_constructor=sf.IndexDate`
chaburkland,```suggestion         column_names = tuple(frame.columns) ```
chaburkland,"Good defensive check. Also, this should either be a `RuntimeError` or `ValueError`. It's not good practice to raise bare exceptions"
chaburkland,f-string?
chaburkland,Maybe combine this if-statement with the one above?
chaburkland,Can you remove this? I don't want to merge to default with a bunch of commented-out temp code
chaburkland,"This should probably take a `ConnectionSpec`, not a string"
chaburkland,"I wouldn't make `table_name` a parameter for now, since the only use case (and foreseeable use case) is for `yield_curve_attr`.  Plus, `connection_spec` should be a `ConnectionSpec`, not `str`.  Also, the typehint doesn't match the default value for `column_names`"
chaburkland,Maybe `get_num_records_where`?
chaburkland,"Why is this returning a frame? I think this could probably return an int. `return frame.iloc[0, 0]`"
chaburkland,"default arguments should never be mutable. Plus, I don't think these instrument_ids should go here. I think they should be derived using your new helpful function `get_instr_ids`"
chaburkland,Typehint doesn't match default value
chaburkland,Local filepaths should not go in production code
chaburkland,"Since you are calling `ab._get_arg_parser` here, it probably shouldn't have a leading underscore"
chaburkland,These typehints do not match the default argument values
gettodaze,What's the reason for `is` instead of `==`?
gettodaze,:joy: 
vhquang,"Is `DELEVERED_SALES` a typo, or is it an actual term?"
vhquang,Would it be helpful to sorted this as well?
vhquang,Very interesting. Thanks for commenting this out!
vhquang,"Would it also be helpful to set the name of the frame to `field` as well? Ie: ```suggestion         return frame.rename(name=field, index=SDKFields.DATA_DATE) ```"
vhquang,"I am curious, do you aim for explicit return type? Tests would often not return anything, and I often don't see return type for test case."
vhquang,"I am curious, why not add the entire selection (ie: `sel.index.unique()`) instead of the first item?"
vhquang,"Maybe? ```suggestion                 SDKFieldMissingValues.RA_SIX_REGION, ```"
vhquang,"Maybe? ```suggestion             SDKFieldMissingValues.RA_SIX_REGION, ```"
vhquang,"I may miss something on your intention for doing this intermediate filtering, but I think if we do final selection at L593 it would have same result. (Unless there is a priority in the order of selection)."
ForeverWintr,"Ah you're right! I wonder why this method exists, and also why some similar methods copy the underlying `FIELD_MAPPING`.   https://github.com/ResearchAffiliates/invsys/blob/4b4c22b8575b32f94e7ee8b049991bf49c83ee77/papyri/papyri/core/compustat_company_data.py#L72  @chaburkland do you know? "
ForeverWintr,"I'm assuming `return_type` is always the `ReturnType` enum (and `is` is the right thing to use with `Enum`s, because they're singletons). I see `ReturnType` also inherits from `str` though. Do you know if we ever use plain strings as the return_type?"
vhquang,"I think the way the tested function was called is not correct. (Or I may miss the intention for testing.) The first argument of the function is the raw name we receive from data vendor, the second argument is how we call it internally in RA. "
vhquang,I think the underline function is too little to deserve its own test. Maybe we don't need these tests?
vhquang,"Same here, I don't the function needs its own test."
vhquang,"So, we are testing if the dictionary is reversed correctly. I am not familiar with this TLT. If we have larger test that covers this execution, I am inclined not to have this redundant test. If this is currently not in our coverage, then I think it is OK to have this test. Anyhow, a description of the testing criteria would be helpful."
vhquang,"I think when we discussed about this, we settled with not using double underscore. I may recall that incorrectly. And this is also just a minor point."
chaburkland,Not a typo! I don't know what it means though. I had the same question awhile back  
chaburkland,I already named it on line 932! Good point though
chaburkland,"I add this because in the future, I think we will have more strict mypy checks, and mypy checks that all functions have a return-type.  Maybe it's a good discussion for monthly meeting"
chaburkland,Because I'm trying to keep the dataset to a minimum! I'm only trying to get at least one company for each unique value for each attributes
chaburkland,"On each pass, I'm building up `companies`. However, in order to prevent redundant records, I'm filtering out records i don't need to know. That's why I rebuild `g` before each loop. The variable names are bad though! Let me make them better"
chaburkland,"Yeah this is a standard method we add on readers in papyri. The purpose is for users of the SDK to have visibility into what the raw DB fields were before they were normalized. Except this module isn't even exposed on the API, so likely this function could be deleted"
philipmassouh,so how do we move forward with this part
flexatone,Maybe `90` should be a symbolic constant as we repeat it here and many place below.
philipmassouh,done
flexatone,"While this is fine, you could also do a concatenation, something like this (not tested!); ```python return sf.Frame.from_concat((frame, data.loc[frame[FIELD_CF_DATA_YEAR].iloc[0]].rename(data.name)), axis=1) ```"
flexatone,You might want `Index.iloc_searchsorted` or `Series.iloc_searchsorted`.
flexatone,"You want to set all values here >= to 0 to NaN, right?"
flexatone,Do you want this as a `datetime.date` or `np.datetime64`?
flexatone,"You can use `np.full(len(frame), FACTSET_NULL)` here"
philipmassouh,done
vhquang,"Thanks Chris! It is more concise that way. However there are couple drawback:  The `frame` is originated from PSU, and has shorter length than the financial data (30k vs 90k). Doing the `from_concat` will expand the result, while we only need data for PSU.  I can do more handling to get the financial data to right shape. But this script will eventually be sent off to Ari's team to let them manage it. So, I want to keep it more beginner friendly. And I think using FrameGO is more friendly for them."
vhquang,I was looking for this interface. Thanks for pointing it out Chris!
vhquang,"I want to set all data <= 0 to NaN. The data here is EVIC and Sales. Joseph thinks negative EVIC or Sales is data error, so we set them to NaN to ignore calculation for carbon intensity. Otherwise they will be negative carbon intensity, which will be numerical error."
vhquang,"In context of using SDK, I would want `np.datetime64`, since it is for index selection. And in SDK we use `np.datetime64` over `datetime.date`.  However for the usage of this script, I would prefer `datatime.date` because of typehint benefit. It wouldn't be clear if an instance of `np.datetime64` is date, or time. And I hope to be explicit and clear for Ari's team. Beside, SDK uses `np.datetime64` inside, but `bus` uses `datatime.date` as index. So, a distinction on type would be helpful I think."
gettodaze,"I'm not sure how to deal with this with typehints, but I don't think this seems to be working for the typehints (see linting errors). Maybe move `PortfolioLocator` into a string? I assume importing during `type_checking` gives circular imports?"
gettodaze,"Personal preference, take it or leave it: ```suggestion             matches: set['PortfolioLocator'] = set() ```"
gettodaze,"Not in the rapids provided by the rapid factory, no. So I suppose this is best."
flexatone,"Got it, thanks!"
vhquang,"It is the mount point IP for this EFS: https://us-west-2.console.aws.amazon.com/efs/home?region=us-west-2#/file-systems/fs-194a221d  AWS recommend using mount via DNS, for auto Availability zone switching. However I am not able to connect through DNS, possibly DNS issue on our end, so I opt to use Mount via IP: ![image](https://user-images.githubusercontent.com/1958978/150229066-2c1af6a9-3dc4-4150-8cd9-a1b2fe5f37f5.png) "
vhquang,"I agree, Chris had the same point as yours. Let me work on this."
vhquang,"This is used as part of bootstrap script for autoscale worker, in my early work on this. The `.tpl` extension, as I recall, is for template script in terraform. It doesn't need to be `.tpl` but can be any type of extension. I just saw people from terraform used it, so I follow.  Anyway, as you pointing out autoscaling worker can use Ansible, this script can be removed. It requires a 5-7 minutes sleep time at the start to wait for all the network to be available in order to mount, which is undesirable. I think it is safe to assume at the time Ansible is available, network is also already available."
ForeverWintr,"I don't think this is valid in python 3.8; [PEP 585](https://www.python.org/dev/peps/pep-0585/), which implemented it, was added in 3.9. I can do `tp.Set[PortfolioLocator]` though."
ForeverWintr,I think that importing during the `type_checking` guard is fine actually. I'll restore it there and verify. 
ForeverWintr,"Oh, I see. That's just a test volume? In production will you use this volume, or a different one? How will we get static data onto it? "
vhquang,"I consider it a test volume. I hope to have it encrypted, to be considered as production-ready. However, I was having trouble with mounting the encrypted EFS volume. So I decide to skip encryption until I can dig further into the issue. So, for production I would use this volume. Once I can figure out how to set up encryption, we can do the upgrade.  The volume starts out as empty. Data is filling in as it follows our code for using `rapc_input`. If we are going to start fresh with a new production volume, we may need to manually create a folder structure `rapc_input/ssf` as the scripts now expects that to exist on EFS.  If you are thinking about writing concurrently, it is an assumption from me, that EFS server is able to handle integrity if there is race condition. Also, an assumption from me is race condition with last one win won't be the issue for us, that the data will end up the same at the end and when the race happens. I would need to read more about EFS to verify those assumptions."
ForeverWintr,"Interesting. Do you think it would be possible to do this?  1. Copy all data from the static_server's `static` directory to this volume 1. Mount the volume as read/write on the static server, so that new uploads to static are saved to this volume. 2. Mount the volume as read only everywhere else.   If so, that would remove the concern for simultaneous writes. "
vhquang,"That is an interesting suggestion! Chris and I talk about different ways to prevent simultaneous write. But yours is easiest to implement!  The only drawback that I can think of is that we will also accumulate unused file on EFS. Sometime we re-source files, but we try not to remove anything. I hope that we keep only files that the worker actually used in EFS, since cost of storing and using is higher for EFS."
ForeverWintr,"My intuition (which could be wrong) is that we would save money by having a single copy of all files instead of having 2 copies of most files, one on EBS (which irv-pc101 currently uses) and one on this EFS.   We would still accumulate unused files on this EFS though, right? unless we cleared it out periodically. "
vhquang,"I think it would depend on the size of the data and the cost difference, to find out the decision point. For example: 5TB EBS + 2TB EFS  vs 5TB EFS. I think your intuition is correct for low volume, but once our data grows it may be different.  And you are right, it is not a bullet-proof to prevent unused file. We still need find better way to track and clean data. It is just not to break our model of ""grow only"" for static files. We can clean the EFS while keep static server EBS untoch."
gettodaze,"Oh, isn't it allowed when using `from __future__ import annotations`? I'm not actually quite sure how that works."
gettodaze,"Two Notes: 1. I will need to add this (or whatever we decide) to the repo before I merge. 2. I went back and forth on the file type. The tsv was giving me a whole bunch of pain (single column tsv isn't parseable by `sf`), then I added an ""active"" column but the `""FALSE""` vs `""""` format for `inactive` vs `active` wasn't working (`sf` kept parsing my all empty `""""` column as `[""False"", ""False"", ...]` even when I supplied the `bool` dtype. I'm still open to using `tsv`, but currently `json` seems more attractive to me."
gettodaze,Maybe I could pass an arg here for which exclusions to expect? Or should I just check if the frame has the relevant columns?
ForeverWintr,I think all `from __future__ import annotations` does is not evaluate annotations at module load... I'm not actually sure either though. 
vhquang,Shouldn't the index get constructed base on the length of each column? I think we should also define index that will be used for this and `expected` frame.
vhquang,"If we need to compare the result, do we need to include `independent_fields`? Which scenario do you anticipate for testing?"
vhquang,"Why do we use `from_overlay`, as oppose to just return the result of the sum?  ~On unrelated note, when I work on this, Joseph and I discover the result of the sum could be negative. And we think negative values are data error. So if EVIC is negative, we mark it as NaN. But I don't know if that handling is specific in my portfolio calculation. In another word, I don't know if SDK users want to retain the raw negative EVIC, or they expect us to handle that data error. I think we should confirm with Joseph.~  -> Tzee confirms we want to treat negative EVIC as NaN."
gettodaze,"Hey @ForeverWintr , what way do you recommend to get a singleton? My current approach isn't working out the best. Do you recommend to use `__new__`?"
ForeverWintr,"I experimented a bit in an attempt to answer this, and I don't think our current `mypy` config evaluates our annotations at all! Mypy didn't complain at all about this annotation:   ```             matches: set[toms_imaginary_thing_that_doesnt_exist] = set() ```"
ForeverWintr,"That's a fun question! I hadn't thought about it much. Currently `EmailConfig` is just a class used as a namespace, so what if we replace it with an instance that uses properties to behave like the old namespace? Something like this:  ```python @time_cache(300) def _get_latest_email_config_df():     # I define this outside the class to avoid dealing with self/cls as args in the cache.     fp = env.get_input_revisioned(         revision=env.get_latest_central_revision_num(), fp_components=FP_COMPONENTS     )     return sf.Frame.from_pandas(pd.read_csv(fp, sep=""\t""))   class _EmailConfig:     # Attrs that we want to keep in code:     PIMCO_TRADE_PLAN_NOTIFY_FROM = ""aaf_trade@rallc.com""     STRESS_TEST_FROM_EMAIL = ""aatrade_stress_test@rallc.com""      # Attrs that we want to load from file become properties.     @property     def PIMCO_TRADE_PLAN_NOTIFY(self) -> tuple[str]:         return _get_latest_email_config_df()[_Fields.FIELD_PIMCO_TRADE_PLAN_NOTIFY_CC]      # etc.  # Create a single instance. EmailConfig = _EmailConfig() ```  "
chaburkland,Yeah good point. I don't actually need to define the index argument here since it will be auto-incremented
chaburkland,The current implementation of `DeriveFieldsUtility.add_fields` will return a frame with derived fields added to the incoming frame. So that's why I just compare against the combination of both. I'm not sure it matters a whole lot
chaburkland,I was just thinking about this - isn't this field technically nullable? I think I've seen multiple records in the DB where this field was null
chaburkland,"The typehint here should either be `tp.Optional[str]`, or the default value should be `""""`."
chaburkland,This variable is not used
chaburkland,This variable is not used
chaburkland,"Passing in `frame.index` here has no effect, since it's going to relabel the frame's index to the frame's index, which is unnecessary!  Maybe: `frame = frame.relabel(columns=[""DATA_DATE""] + frame.columns.values.tolist()[1:])`"
chaburkland,The typehint here should be `tp.Optional[date]`.
vhquang,"Ah, that makes sense now. Thanks for explain it to me."
chaburkland,Thanks for the note about negative EVIC (and pointing out that `sf.Series.from_overlay` wasn't doing anything! I would have implemented both of these
vhquang,"I would have this inside `RMCarbonIntensityPlugin2022` as well, as it seems to me this SDG exclusion is specific for RMC 2022.  These utilities in this module were aimed to be shareable utilities among portfolios that use ISS data. However, as it progress forward, I keep seeing each portfolio has its own specific version of exclusion. So I incline to have exclusions inside the methodology of the portfolio. We can move them here once we see they are used by multiple portfolios. "
vhquang,"I think it would be best to override this `_add_exclusion_selection` in the derived `RMCarbonIntensityPlugin2022`, where we can define a new set of exclusion. That way we can leave all the past portfolio as is. Exposing a new arg or new spec would require us to distinguish it in past portfolios.  That is just how I imagine to implement it. There could be a benefit in doing it other way that I haven't thought about. Do you see any pro/con for having new arg?"
vhquang,"You probably won't. The ""tracking"" columns is what involved in each exclusion/calculation. I added them in to help IM team to verify those exclusions for each product. I believe they look at those ISS columns less frequent now, now that we have been using ISS data for a year.  For simplicity, I don't think you need to do anything here for that QC purpose, unless IM team requests us to expose more info."
gettodaze,"@ForeverWintr Thanks for the tip! I updated the module to have the single instance like that.   The one thing now that I am still going back-and-forth on is that your example was very simple with a timed cache `_get_latest_email_config_df`, whereas mine was a lot larger with the typical resource attributes like  `FP_COMPONENTS, MIN_REVISION, valid_revision, _get_fp, from_revision, from_latest, __init__(fp)`.   On one hand I like my attributes, but on the other hand, I really would like to avoid unnecessary code complexity. I suppose nobody needs to access `from_revision`, but having the `__init__(fp)`, for example, helps make testing easy. What do you think?"
MadisonAster,"Yes it is, fixed."
MadisonAster,"Hi charles, I switched this to use tp.Optional[str], but without the none specified the linter still treats this as a mandatory argument, even despite it being after the ""*,""   ```  Error: kozuchi/scripts/mats/backfill_history/mats/backfill.py:29:8: E1125: Missing mandatory keyword argument 'notes' in classmethod call (missing-kwoa) ************* Module kozuchi.test.unit_test.mats.test_loader_base Error: kozuchi/test/unit_test/mats/test_loader_base.py:68:25: E1125: Missing mandatory keyword argument 'notes' in classmethod call (missing-kwoa) Error: kozuchi/test/unit_test/mats/test_loader_base.py:114:20: E1125: Missing mandatory keyword argument 'notes' in classmethod call (missing-kwoa) ```  Further, if I switch the default argument to """", then all new records will have """", and older records will have NA in the database. While this wouldn't affect anything, it would look very inconsistent."
chaburkland,"That's extremely strange. I'm unable to replicate this linting failure when the code is: `notes: tp.Optional[str] = None,`  That linting error seems to indicate you are missing the default value"
vhquang,@nekobon Do we use any new factor for 2022? Sorry if I haven't kept up to date with changes that we need to make for recon.
ForeverWintr,I think its reasonable to add the extra attributes to make testing easier. I was trying to make my example as simple as possible to illustrate my point. :) 
MadisonAster,I think maybe this is more than a sketch!
ForeverWintr,"I'd like to move it out of sketch at some point, but I think it's better to have it on default in sketch than languishing on a branch getting further and further out of date. :)"
gettodaze,"No, I just didn't know about `_add_exclusion_selection`! I like that."
gettodaze,Is `ISLib.cache.CachedProperty` no longer necessary to use over `functools.cached_property`?
gettodaze,Might it be good to add to the docstring that these values are backfilled?
nekobon,`ISLib.cache.CachedProperty` is useful for public function for SDK for autodoc to work well. I don't think it's important here.
gettodaze,I see! Thanks for the info!
gettodaze,"I usually see`backfill` as one word, but `back_fill` is fine too."
gettodaze,Is the `lru_cache` more efficient if it knows the maximum number of keys to expect?
nekobon,"It is safer, but I'm not sure if it's efficient."
vhquang,"```suggestion                 carve_product_id=CTI_PRODUCT_ID, ```"
gettodaze,Hi @vhquang is it okay if I add these columns back in for Ted?
ForeverWintr,I like this approach! Could we name this function differently though? I didn't immediately realize what it was doing. Perhaps something like `_make_field_getter`?
ForeverWintr,"Can you add a second patch here, so that we can verify that we get a different result when the underlying data changes without re-creating `EmailConfig`? I think something like this would work.  ```python class FakeResource:     def get_field(self, name):         return 'tom is awesome'  with patch(     ""AATC.apps.constants.get_latest_email_config"", return_value=FakeResource() ):     result = EmailConfig.PIMCO_TRADE_PLAN_NOTIFY     self.assertEqual(result,  'tom is awesome') ``` "
ForeverWintr,"Does `astype(object)` convert numpy dtypes to python dtypes? I thought `object` could hold any `object`, so I find that a bit surprising. "
ForeverWintr,"I was semi aware of discussion of this on slack. Does the error really only occur when `print`ed? It seems like there should be a way to exercise this without printing, or at least without printing to `stdout`.   If print is necessary, how about ```suggestion      with open(os.devnull, 'w') as f:         print(reader.ap_mines_overall_flag.iloc[0].dropfalsy(), file=f) ```"
ForeverWintr,"Answering my own question; it seems it does:  ``` a = sf.Series(['1', '2']) <Series> <Index> 0        1 1        2 <int64>  <<U1> type(a.iloc[0]) <class 'numpy.str_'> type(a.astype(object).iloc[0]) <class 'str'> ``` "
MadisonAster,I think it might make sense to make the connections parameters as we may want to run this on dev to run some type of test in the future.
MadisonAster,"I think this could use a better name like, ""rebuild_schema"" or something like that. This is too close to the db_setup name, and makes it hard to read."
flexatone,"Will this work on Windows? Does it need to? Also, do we need to call `hash_args` here? I think the value returned from `get_cache_generation_id()` is hashed, so perhaps `hash_args` should not be called here and the down-stream caller, after combination with  `_CACHE_GENERATION_IDS`, and do one single hash."
chaburkland,"It does work on Windows! I had Forrest test this. I do think it needs to work on Windows, as the point of this change was to ensure that SDK users will have their caches invalidated if their environment changes.  And you're right, I don't need to `hash_args` on the output of `packages`. I did because it was an unwieldy and relatively long string, so I preferred to hash it (and lru_cache it) for visual reasons.  If you don't mind I'd prefer to leave it, but I don't have a strong opinion so I'll defer to you."
flexatone,I am just not sure if hashing a hash is the same as collecting all strings and doing one hash... maybe it does not matter.
chaburkland,Almighty Stack Overflow agrees with you - it's less optimal (albeit slightly) to re-hash the hash of a string. I'll go ahead and remove it :+1:   https://stackoverflow.com/a/348347/7615851
gettodaze,"NOTE: I ended up making this a spec param because I needed to use a custom `as_of_date`. I am thinking we can have the default param be called `evic_pu_values_as_of_date=first_result_as_spec_value(lambda spec: du.get_end_of_month(spec.parc_year, 2))` or something.  Is this appropriate?"
chaburkland,Why did you not use `db_setup.load_records`?
chaburkland,Stale comment
chaburkland,"Oh I like this! Can you put an explicit comment right above that says ""Revalidation routine"" or something like that?"
chaburkland,Stale comment
chaburkland,I didn't review this file since it is in `sketch/`.  I would like to confirm though that you do not use these when updating `MatsDBDev` or `MatsDBProd`. These types of sketches should only be for local DB testing.
chaburkland,I didn't review this file since it is in `sketch/`.  I would like to confirm though that you do not use these when updating `MatsDBDev` or `MatsDBProd`. These types of sketches should only be for local DB testing.
johnjhawk,"```suggestion     def test_bloomberg2022_foreign_ownership(self):         """"""To build tests builds prior to 20220131, we set the foreign ownership file date to false. This test verifies that it was set back to a correct date in time for production builds.  This test can be deleted after it passes.  - Vu, Hawk""""""         assert bloomberg2022.fol_as_of_date == datetime.date(2022, 1, 31) ```"
MadisonAster,"Hey charles, I looked at db_setup.count_records, but it seemed to only take the attr classes, where I needed to grab from this history table."
MadisonAster,"Sure, I'll add this. I was hoping to extend test_data.store to optionally take a url and handle this on its own in the future to make this one line."
MadisonAster,"Hi charles, yes I am using these to run the updates. I've kept them in sketch because it seemed like you were more in favor of these modules remaining there."
chaburkland,Ah that parameter is misleading - it can take and attr or history subclass. Let's rename the argument and use that
MadisonAster,Oh I see now. Ok I'll update to use those instead of referring to the table name with a string.
MadisonAster,updated and removed my old function now.
gettodaze,Or maybe it can just get the geu date from the spec on its own.
nekobon,"Yes, we can use the build's GEU date as its as_of_date"
chaburkland,:joy: 
chaburkland,"I'm a bit confused. The PR title says ""Allow NFD builds to be posted to PARK"", but this tests is showing that doesn't happen. Can you help me understand what I'm missing here?"
gettodaze,"```suggestion     def set_accum_adj_mcap_by_country(self, condition: tp.Callable[[dict], bool], suffix: str = """"): ```"
gettodaze,"What is the benefit of adding a screen on `is_included`? It seems like it would just copy the last screen: ```python     def is_included(self, row, screen=LAST_SCREEN):         """"""Return a Boolean if a row is in the screen.""""""         if screen is Table.LAST_SCREEN:             screen = self.get_last_screen()         if screen is None:             return True         return row[screen] ``` Is that your goal, or am I missing something?"
gettodaze,"Oh, is this just copying the final screen into a new column? Previously it was called ""global_u_screen"", what's the purpose of renaming ""global_u_screen"" to ""valid_psu_candidate""? Just for clarity? Would there be any downstream processes relying on the previous name?"
gettodaze,"So is this the main change that we're hoping for? To define `size_mcap_field` in the `PSUC` only for those companies that are `valid_psu_candidate`s? Previously, it only filtered based on the `valid_country` func?"
vhquang,"We want to accept NFD under the condition that the underline request (that the build is for) is not a request for production. This test checks that control.  Your confusion motivates me to add another test that would allow NFD build to be posted for non-production request. It's bit tricky since we don't have many non-production request, but let me work on it."
chaburkland,Ah I see. Then yeah a second test would be extremely helpful!
chaburkland,"I'm assuming all of this was just moved, not changed?"
johnjhawk,:+1: 
johnjhawk,"Including another screen that uses is_included is my attempt to have a consistent screen that we use for calculating rafi and mcap size.  I prefer that to using the last screen ""valid_country"" as I could see that we could add another screen in the future and then it may be unclear which condition the size calc is using.  This way we can be sure that it picks up all the previous screens as long as the occur before ""psu_candidate"".   If this doesn't make sense or if you still think that it's a bad idea, let's chat.  "" what's the purpose of renaming ""global_u_screen"" to ""valid_psu_candidate""? I thought that ""valid_psu_candidate"" give the read a clearer picture of what the screen is doing.  ""global_u_screen"" doesn't mean anything to me.  Are you saying that you prefer ""global_u_screen""?  Maybe I'm missing some info that makes ""global_u_screen"" a meaningful name."
johnjhawk,"Correct, ""pu_mcap_size"" was using a different screen than ""rafi_size"" and we want them to use that same screen AND it to be clear which screen they are using."
gettodaze,"@ForeverWintr Many thanks for this point! I honestly just wanted to write a quick test and get this done with, but you prompted me to take a longer look at how to verify this is being fixed.  It turns out that our tests do not test on windows anyways, so this test adds no extra coverage. I was able (using my windows machine) to confirm that this fix should solve the issue on Windows, but also that this also needs to be addressed for `fillfalsy_forward` as well.   For reference, this issue is also fixed with a new numpy version. - https://github.com/InvestmentSystems/static-frame/issues/427"
gettodaze,My understanding is that it just calls `.item()` or the like on each element. I believe `np.datetime64[D]`s become `date` objects!
gettodaze,"1. That makes sense to me! It's just copying the final screen to a new column. 2. I like `valid_psu_candidate` better! I just wanted to check if any current process is relying on the name `""global_u_candidate""`, but I am not able to find any case like that."
nekobon,"Let's ask Xi/Forrest if anyone is using this function. If not, let's just have only one version."
nekobon,"This is new! How about to have the comment in message ```suggestion         assert False, 'this should not happen'  # pragma: no cover ```"
nekobon,I prefer to `elif show_col_diffs:` and `else ->ValueError (or NotImplementedError)` for easier error discovery.
nekobon,"```suggestion         assert references, ""This cannot be empty"" ```"
nekobon,"How about to remove this ""no cover"" comments from this file? We want to add test coverage on them eventually. "
nekobon,:+1: 
nekobon,"I think we want to return Unicode than bytes from this function. (If I understand correctly, that's the only difference between `r.text` and `r.content`?)"
nekobon,How about to remove these lines and just `pass`?
nekobon,Is this better than `isinstance`?
nekobon,It seems like this check is removed?
nekobon,Do we not need these?
nekobon,Please mention this change in `new.rst`
nekobon,To remove? What does this setting do?
nekobon,same here
nekobon,What does this line do?
nekobon,"```suggestion                 levels=sf.Frame(), interpolation_limit=-0.1 # invalid interpolation_limit ```"
nekobon,How is this number selected? (please add a comment)
nekobon,Is this moved to somewhere else?
nekobon,:+1: 
nekobon,:+1: 
nekobon,"if it's easy enough and if you have some time, can you make this keyword-only? "
ForeverWintr,Yes to both questions. No implementation changes. 
vhquang,"It is intentional not to cache here. The ISS reader does heavy front-load in initializing, which takes most of the time. The conversion here takes less than 5 seconds for all properties. If we do disk caching, it would double the amount of data write to disk.  I would first address the caching in init first before we start caching here. And I don't know if it is a right time yet to start caching."
vhquang,Let remove this description. I am not sure what it means anymore.
vhquang,"Let be nice to Ted... ```suggestion                     ongoing_reduction=CI_SPEC_NO_REDUCTION,  # For March, we will have 0 reduction (treat as relaunch due to high turnover). Resume 0.018 (aka: 1.8%) in June. ```"
vhquang,I agree with Yu's comment. I don't think we need this in the spec. Let just use `spec.geu`
vhquang,"```suggestion                     ongoing_reduction=CI_SPEC_NO_REDUCTION,  # For March, we will have 0 reduction (treat as relaunch due to high turnover). Resume 1.8% in June ```"
vhquang,"Let wait on adding this as test, until we receive :+1:  from Ted. Plus, I think it is more important to add test for new scope 3. The old scope 3 is only for his reference. It uses Climate data 2019, which we shouldn't, according to techdoc."
vhquang,"FYI, they are also added in #2288. If you pull update from `default` you will have these update. "
gettodaze,Thanks for this catch Quang!
gettodaze,"Great, thanks for the heads up Quang!"
gettodaze,Hi @nekobon just FYI I updated these tests to use the 2021-02-12 snapshot.
johnjhawk,much better than shout!
chaburkland,:scream: :heart: :+1: 
chaburkland,I would use `sf.DtypeSpecifier` here as a more proper typehint. Plus maybe name the variable `co_id_dtype`?
chaburkland,`SDKFieldDtypes.WS_PERM_ID_CO`?
johnjhawk,"```suggestion _Source = TypeVar(""_Source"", os.PathLike, str) ```"
johnjhawk,"the change to line 27 will allow this typehint to be string as opposed to a union.  _Source = TypeVar(""_Source"", os.PathLike, str)"
johnjhawk,"I think a walrus operator would be nice here. up to you. (not sure why I couldn't add a code block here) if hook := FIELD_TO_HOOK_MAP.get(column, None):     frame = hook(frame[source_column]).to_frame()"
flexatone,"```suggestion         holdings_fp_components = (             ""holdings"",             f""HOLDINGS_FTSE_AW_{as_of_date.get_date_name()}.txt"",         ) ```"
flexatone,We never want to cache a mutable!  ```suggestion         return frozenset(self.INDUSTRY_TO_INDEX.keys()) ```
flexatone,"Should we validate that the first two characters are digits?  Also, we should probably have some tests around this new function if they do not already exist."
johnjhawk,"both good ideas, done and done"
vhquang,"Is it too strict to remove: ``` if col not in expect_dtype:     continue ``` This implies we will need to provide dtype for every column/item in the bus. Given we already do that, how comfortable are you now with stricter check?"
vhquang,"This is fine. But if you can wait a bit for #2294 to get merged, you can use `_get_class_properties` to get the properties. Either is fine though."
chaburkland,Ok :cry: Now it's not going to be 100% coverage anymore
chaburkland,Yeah that's the only difference. I'm not sure why we prefer Unicode over byte though? I think it's worth a comment explaining why
chaburkland,Haha good catch
chaburkland,"I think so, since dtype is often not an instance object. Plus I'm pretty sure this is the correct way to check for all numpy floating subclasses. The old code was incorrect  ```python Floats = (float, np.floating) arr = np.array([1.0], dtype=np.float16)  isinstance(arr.dtype, Floats) # This is False!!! (incorrectly) issubclass(arr.dtype.type, Floats) # This is True :) ```"
gettodaze,"Oh, but I changed the reference from `_mapped_bus` to `_bus`. So shouldn't this be fine?"
gettodaze,I'm fine either way as well! A test of `to_bus` will also likely render this test redundant too.
chaburkland,"Yeah - this was a redundant logical check. At this point, we have proved the following:  `upper_bound` and `lower_bound` have the same shape `upper_bound` and `weights` have the same shape  So this necessarily means that `lower_bound` and `weights` must have the same length."
vhquang,"I see. That's good point, as we want to test on our ""delivered"" columns."
chaburkland,60 + 1 seconds places is enough time to try again. I've modified time to be 100x faster. I'll add a comment.
gettodaze,"Okay, well I'll leave this in for now but you can remove it in your PR!"
chaburkland,"I just move the first check up a few lines (since it doesn't need to be in the context manager).  The second check is unnecessary, since it will be caught by a different check. If the sum of unshrinkable weights exceed one, then this earlier check will fail:  ```python if (     lower_bound[shrinkable].sum()     + np.maximum(lower_bound[~shrinkable], weights[~shrinkable]).sum() ) > (1 + EPS):     raise NoSolution(""lower_bound infeasible."") ``` since `np.maximum(lower_bound[~shrinkable], weights[~shrinkable]).sum()` will always be greater than 1, ensuring this test will fail."
chaburkland,Both of them said they don't know. I am scared to just break backwards compatibility on the SDK. Maybe we can have a discussion about how to best deprecate?
chaburkland,"It limits the number of examples that hypothesis generates to 10. I was finding that the default was too high since this test was taking so long. I made the number 10 to speed the test up. It felt like a good balance between having a lot of different inputs tests, but also weighing the cost of slow tests."
chaburkland,"Whoops I'll uncomment this. Hypothesis gets noisy sometimes if it passes some time heuristic while it's generating strategies, so this decorator silences that"
chaburkland,"Whoops I'll uncomment this. Hypothesis gets noisy sometimes if it passes some time heuristic while it's generating strategies, so this decorator silences that"
chaburkland,Nope - I removed these tests because I deleted the function. It was used nowhere and it wasn't on the API
nekobon,"Can you ask Jay? If he doesn't use it, I'd say go ahead and make the change."
chaburkland,Thanks for fixing this!
chaburkland,"Thanks for the context. I think this is a perfectly fine approach for now, and maybe in the future we can optimize how the ISS reader caches or modify it to do computation on request, not in init."
chaburkland,"This was a change Guru made. I'm not sure why, but I am going to leave it."
chaburkland,"Maybe: ```suggestion     for prop in props:         assert bus[prop].equals(getattr(reader, prop))) ```"
chaburkland,"I don't think we typically cache `from_as_of_date`. Especially because part of this is code that retrieves files from static.  I would create a private helper method that `init` uses that is disk memoized. Plus, you should add the `kwarg_to_hasher` argument to `disk_memoize` to tell it how to parse `cls`, or `self`."
chaburkland,"As much as it pains me to say, we need to remove this. If you make changes to ISS that invalidate its cache, you'll need to bump dev_id in `cache.py`, not this."
chaburkland,Oh awesome! This is perfect. Thanks for catching this :smile: 
flexatone,This is much better!
flexatone,I do not think you should commit this file.
johnjhawk,:+1: 
johnjhawk,"Should we explicitly name this, too? ie ""CWO"" or ""MAIN"""
johnjhawk,"As we discussed, putting some output to stderr that there are duplicates here would be nice."
vhquang,"This is official now, and not NFD anymore."
gettodaze,"Oh, woops! I totally forgot about those comments. Thanks Quang!"
gettodaze,"Hi @chaburkland, I have a question on: - [@disk_memoize(extra_salt=(DEBUG_CACHE_VERSION,))](https://github.com/ResearchAffiliates/invsys/blob/fb09ec87c4c06f1ac0f5121f801be06f0246a826/papyri/papyri/core/data_sources/spinoff_adj.py#L166): Is this usage of extra salt purely for debugging purposes? ```     @classmethod     @disk_memoize(extra_salt=(DEBUG_CACHE_VERSION,))     def _get_bb_spin(cls, start_date: date, as_of_date: date):         bb_spin_fp = papyri_tlt.get_input_static(             fp_components=BBSpinIMDWriter(as_of_date).get_fp_components()         ) ``` - [kwarg_to_hasher={""self"": lambda self: (self.as_of_date, self._overrides)},](https://github.com/ResearchAffiliates/invsys/blob/fe1494b2099967b8b645223bab214773c76597c0/augur/augur/core/sdk/geiu_compustat.py#L1009) I see the `kwarg_to_hasher` return value for `self` or `cls` is typically a tuple of state. If my `__init__` is being called before any state is assigned, can I use a constant, i.e. `None` for for the `self` kwarg hasher? ```     @disk_memoize(         name=""GEIUCompustatUniversePerDate"",         kwarg_to_hasher={""self"": lambda self: (self.as_of_date, self._overrides)},         extra_salt=2,     )     def _universe(         self,         *,         date: datetime.date,     ) -> GEIUCompustat: ```"
chaburkland,"Yeah you could do that. Although I wouldn't, because I imagine the routine to build the bus relies on certain other classmethods on `cls`. Unless it's a pure staticmethod, I think you need to configure `kwarg_to_hasher`."
gettodaze,@johnjhawk Do you mean more than just logging a warning?
johnjhawk,"I originally meant stderr, but the logger is fine, too."
MadisonAster,These imports seem out of place.
nekobon,What is this `from None`? It's new to me!
nekobon,KeyError of the name similar to function itself seems strange. I think saying that GEIU is not implemented is more helpful.
nekobon,```suggestion         peds = peds.assign[FundamentalFields.PERIOD_ENDING_DATE].apply(to_eom) ```
nekobon,"Some random ideas (that might be slower) - limit mcap to eom dates before non_nan selection - pivot(_unstack?) mcap to make it long form with index of (co_id, date), make peds index (co_id, ped) and loc"
nekobon,How about to put this info as a class attr?
nekobon,"This, too"
nekobon,"These, too."
nekobon,It is a bit scary that `bus_loader` is one of the argument but not used as a salt for the inner cache.
nekobon,How about to use a default sentinel? It's not intuitive to give an empty list to get default dates.
nekobon,What is the difference between `field` and `col_name`? Maybe a comment here can help
nekobon,This seems large especially if max_persist is None. Do we need to cache 1000? 
nekobon,How about to add a small test for these functions? Otherwise we won't notice if they become outdated and non-runnable in the future. 
ForeverWintr,Can we just use `get_raw_sic_data` instead?
gettodaze,"That's a good idea, but I would like to group that with the next changes so we don't have to rerun AgentQ again for this change. I will make a note."
chaburkland,`new_indices = frame.index.difference(first_frame.index)`!
chaburkland,"With the change above, this can become `overlay_frame.append(frame.loc[new_indices])`"
chaburkland,And `overlay_index = overlay_index.union(new_indices)`
chaburkland,Can you add a third frame here for testing? Just to make sure the logic is fully exercised for 3+ frames?
chaburkland,:+1: 
chaburkland,`format_type: tp.Optional[sf.DtypeSpecifier]`
chaburkland,"This is a really minor formatting nitpick, but I think:  ```python for f in fields:     if f.include_fund(self._revision) and f.name in df_src_cols:         df[f.name] = df_src[f.name].apply(f.converter) ```  reads a lot better"
chaburkland,"Since `o` needs a comment, maybe just call the variable`operator`?"
chaburkland,"`from None` tells Python to present the stacktrace as if this was the original error. If it wasn't included, then the stacktrace presented would look like this:  ```python Traceback (most recent call last): ... MissingRemoteMirrorFileException ...  During handling of the above exception, another exception occurred:  Traceback (most recent call last): ... KeyError... ```  `from None` will change the traceback to look like this:  ```python Traceback (most recent call last): ... KeyError... ```  I don't want the user to know/care about static - I just want them to see this is unsupported."
chaburkland,I wondered if you might suggest that. I'll do that :+1: 
chaburkland,This does not return an empty-list! It relies on the `UniverseHistory` subclass to implement `_get_default_bus_dates`
chaburkland,"Yeah, 1000 is too much. I want to spend a bit more time thinking about how to better cache here."
ForeverWintr,"Do you need this? The `min`/`max`/`mean`/`median` of a series of `nan`s is `nan`, I think. Also note that these series methods have a `skipna` argument."
ForeverWintr,I think you can do this without `iter_series` by doing something like `fr.isna(axis=0).sum()` (that may not be exactly the right syntax). 
ForeverWintr,"Check out `is_addition` and `is_deletion` in `portcullis.core.comparisons`. You can get additions and deletions counts with e.g., `is_addiion(new, old).sum()`  Why are you implementing these as nested functions? If you decide to keep these, I think it would be better to define them at module level, where they can be tested and re-used. "
ForeverWintr,"```suggestion              str_col = {                 ISS_ClimateImpact.ClimateCNIEmissionsSource,                 ISS_Issuers.AsOfDate,             } ```"
ForeverWintr,"A micro-optimization, but you can avoid calling `lower` twice.   ```suggestion             numeric_cols = [                 col                 for col in (x.lower() for x in cls.fields_from_iss)                 if ""flag"" not in col                 and ""interval"" not in col                 and col not in str_col             ] ```"
ForeverWintr,Do you need to iterate here? Can you just do `f_num.min(axis=0)`?
nekobon,"Sorry, I mean the argument `dates`. `if not dates` implies no dates, so returning ""default dates"" seems unexpected."
chaburkland,Per our conversation I will force the user to always provide this and remove `_get_default_bus_dates` :+1: 
chaburkland,I don't even remember :sweat_smile: I will rename these variables to be more clear
chaburkland,Per our conversation I will make a `FundamentalFieldDtypes` in `fields.py` so this abstraction isn't needed.
chaburkland,Per our conversation I will make a `FundamentalFieldDtypes` in `fields.py` so this abstraction isn't needed.
chaburkland,Per our conversation I will make a `FundamentalFieldDtypes` in `fields.py` so this abstraction isn't needed.
nekobon,Thank you! I didn't know this and it's so great to learn new Python stuff from PRs!
flexatone,"I think you want the count of non-nan, so it would be something like the following, though I am not sure which axis! ```suggestion             res[colname(""Count"")] = fr.notna().sum()             ) ```"
vhquang,"We should update the typehint for return as well. Now that we are returning `float` instead of `float, float`."
vhquang,"Let leave a comment here, since previously this param is for quarterly reduction, now it is for annual reduction. And the param name doesn't reflect well on that change in techdoc."
vhquang,"The intuition I had on this, is carbon intensity is CO2 per USD. Hence I name it `evaluation`, to reflect the monetary value. I can see naming it `denominator` closer to how we implement in code, but I also feel it looses the semantic meaning. I am open to change this, since I didn't have much bandwidth to discuss it with others when I wrote this.  One note though, this function's interface is one of the common interface I try to keep consistent across different implementation of CTI: RMC, GRAFIC. So if we refactor it, we should refactor other places as well to keep it consistent."
vhquang,"I don't think this is needed, as we already stored it in spec. But if IM team requests, let keep it. I think they request to have info in 2 places, to make it easier for them to review."
vhquang,Yea you are right. I don't think this is needed.
vhquang,"Thanks for pointing out `is_addition` and `is_deletion`.  As for inner functions, I think originally I have everything in one function, then as they get longer I cluster them into group of functions but wasn't sure yet about their arguments. And I stopped seeing those inner functions as problem. Also thanks for pointing that out."
ForeverWintr,That's what I meant!
chaburkland,"This default should not be set here, since it means that the import of this function will require a download from static. I would set it inside the function."
chaburkland,`tp.Dict`?
chaburkland,"Minor nitpick, but can we call this `col` instead of `c`? I think it's best to avoid single name variables with the exception of `i`, or very small comprehension expressions"
chaburkland,"Maybe call this `get_fields()`, or something more explicit/readable to SDK users?"
chaburkland,I think `_load_mapped_bus` should be responsible for building it's own cache_fp. The caller shouldn't have to worry about that
chaburkland,I think `_load_simple_bus` should be responsible for building it's own cache_fp. The caller shouldn't have to worry about that
chaburkland,"Consider maybe removing this? It's a very short/simple function, that is only ever called once. My feeling is that it adds more lines, more complexity, and more challenge to maintain, and so it's not worth the overhead of an extra function call"
chaburkland,Yeah good point - I will rework this.
gettodaze,"@vhquang Should I remove the `summary.insert(""ci_ref_distribution"", ci_ref_distribution.get_id())` too because that is also in the spec?"
chaburkland,"I wasn't able to get to this in time, so I will create a new ticket with a link to explore these suggestions :+1: "
gettodaze,"Oh, it doesn't show up in the spec properly under `ci_carve_spec`: `{'rmc-dev_lc': ClimatePluginSpecParams(baseline_objective_multiplier=0.7, ongoing_reduction=0.07, baseline_calculator=<CIBaselineRcap: region_field='country_group', region_values={'UK', 'US', 'JP', 'DevOther', 'DevEuropeExUK'}, size_field='size', size_values={'large'}>, ci_ref_distribution=<function <lambda> at 0x7fb30d6d20d0>, evic_ref_distribution=<function <lambda> at 0x7fb30d6d21f0>, adjust_high_impact=True, inflation_adjust=True)}`  I think `first_call_as_spec_value` etc might not work if its not on the spec class itself."
gettodaze,Thanks for catching!
gettodaze,"Thanks for the explanation! Looking now, I think `baseline_evanluation` is better than `carbon_denominator` anyways. I'm not sure what a better name would be, so I'll just keep it in the back of my mind."
gettodaze,I moved this to an include spec. Is that appropriate?
gettodaze,"I didn't change anything, is that appropriate?"
gettodaze,"There's no 2022 factors, are there?"
gettodaze,"I moved this from rafi_esg_gen to here, is that okay?"
gettodaze,I didn't make a new class; I just consolidated the previous 2021 classes into one class for 2022. Is that appropriate?
gettodaze,"Do I need a new class, or can I use the existing?"
gettodaze,I moved this to its own include.
gettodaze,"Do I need to add anything for polyfactor? Also, nothing needed for `dvty_gqr`, right?"
vhquang," I don't think we can cache the `_mapped_bus` base on the class of security mapper, as the result of the mapped depends on the as_of_date of the mapper (aka: the instance of the security mapper)."
vhquang,"The name is a bit misleading. I think you are referring to the fact that the output is simple. But this interface is now responsible for major of our construction (with many complexities underhood). I don't have better suggestion (maybe `construct_internal_bus`, but it is lame...), but I think it worth thinking about more descriptive name for it."
vhquang,I don't think the abstraction that this function provides is necessary. In previous `__init__` we can glance the process to know the work involve. This puts that visibility deeper and IMHO not worth the benefit (maybe I misunderstood its benefit?). 
vhquang,"As I recall, we had the assumption that ISS as_of_date is the same as security mapper's as_of_date. With this, we are pushing that assumption further down to the caller to handle.  Also, there is a boarder question that I hope to understand. There is relationship between ISS as_of_date and security mapper as_of_date. With previous implementation, we tie it up in `__init__`. In this PR, we turn most places that use `security_mapper` into `classmethod`, which should require passing both `security_mapper_class` and its `as_of_date` into parameter. I understand that having `classmethod` is our preference code style, but what benefit it gives, outside of code style? "
vhquang,"I am not familiar with writing `npz`, but the `cache_fp` already has suffix `.zip`, does this work?"
vhquang,"Given the length of the args, I think a docstring description of what this function does would be helpful.  Secondly, if I remember correctly in our SDK meeting, it is mentioned that they want to have shifted date in the explanatory data. If so, then we can skip that param and alway shift the data."
vhquang,"I don't think we should include `shift_date` into the cache. As I recall, `shift_data` is a fast function. With this we would have 2 version of cache: shifted and non-shifted, which double the amount of disk usage, but due to a fast function. I would prefer we cache heavy functions: mapped bus and pivot bus, and let shift_date runs on the fly."
chaburkland,"This class should define all the abstract methods:  ``` @classmethod def get_where_cause(cls, instr_ids, date_filter_string) -> str:    raise NotImplementedError() ``` etc.."
chaburkland,```suggestion ```
chaburkland,:scream: 
MadisonAster,fixed now! Sorry I left it defaulted to this.
MadisonAster,Great idea! Fixed now.
gettodaze,"Yeah, I'll add a docstring! Thanks!  For the `shift_date`, the method I am hoping to point them to is `_read_wide`, which encapsulates this method and doesn't take a `shift_date`. It just uses the `shift_date` provided on the initial reader. I don't think there's harm in leaving it in for now, but we can definitely get rid of it in the future."
gettodaze,"This is inside the function call, so I think its fine."
gettodaze,Maybe just `_load_bus`?
gettodaze,"Yeah, that's valid. I'll condense the functions."
gettodaze,I believe `to_zip_npz` expects a path that ends with zip.
gettodaze,"I think its fine as long as I add the `as_of_date` to the extra salt, right?"
gettodaze,"Charles brought up the same point. I prefer to pass only necessary arguments, and passing `self` often passes a bunch of other attributes, which typically aren't all used. So I prefer this to help clear up what is actually needed by downstream callers and what is not. To my knowledge, we always use the exact same `as_of_date` for both the `ISSReader` and the `security_mapper`, so I don't think its risky decoupling their initializations. If that relationship changes in the future, we can refactor.  Does that help answer your question? I'm not terribly opposed to using `self` here, though. We can chat more on zoom too if you would like."
gettodaze,Is this used? I can't find the reference.
gettodaze,"I think that's a really good point, but might we be able to push that to the next change? I think its not necessary for right now and I am hoping to get this PR merged this morning."
gettodaze,I moved it to `_load_bus`
chaburkland,I'm curious why the change from book to sales here?
chaburkland,:scream: :tada: :partying_face: 
gettodaze,@johnjhawk I just wanted to check with you about this change and see if you have any reservations about moving `rcap_2021` to just `rcap`.
johnjhawk,"Nope, dvty_gqr is no longer active and polyfactor can be updated when/if we need it."
johnjhawk,"Nice, change.  "
vhquang,"With our hallway discussion about the same `as_of_date`, yes I think it is fine."
vhquang,I think it is fine to leave it as next improvement. The only thing it affects is data storage. Can you leave a comment/note for it?
ForeverWintr,"FYI, you could use the `FrameFactory.from_histories` constructor here, with `DistributionHistory.from_product_family`, which would have the same effect.   You could also just create a `FrameFactory` with `frozen=False`, in which case the factory would use the latest delivered of any product found in a recipe. With `frozen=True`, the factory will raise if a recipe specifies a product not in the given list of product families."
vhquang,"Thanks Tom. I refactor it to `from_histories`. I change the frozen to `False` as well, since I don't need that strictness in this case. Thanks for mentioning both."
chaburkland,"```suggestion                 ""vu@rallc.com"", ```"
chaburkland,I'm wondering how discoverable this is? Is it possible for user (or anyone) to find the output without digging through code?
nekobon,"""SALES_REV_TURN"" doesn't exist in the sample file, so I just updated to use another field."
nekobon,It is used by tests (via `mocks.py`)
gettodaze,"Hi @vhquang , following up from this, is it okay to keep these in the summary?"
gettodaze,"Not a big deal, but I think it would be best to have the `as_of_date` also be a `date` object."
gettodaze,"`fp_components` could have more than 2 strings, right? ```suggestion     def get_fp_components(self) -> tp.Tuple[str, ...]: ```"
vhquang,"The location `~/log/` is the conventional we had for storing logs. All other apps (PARC, Bolt, disque, airflow...) store log in it. That convention started long before me. And I think previous authors tatoo that folder on their forearm and didn't discover it through code. A more standard place to storing logs would be `/var/log`, but I don't want to deviate from the current convention to make it more difficult for other people to find it."
flexatone,"I think since we store everything for a user process in the the user home directory, and sometimes have multiple users writing logs, `~/log` is practical."
ForeverWintr,It's nice to include a more descriptive description. Can you update this to summarize what this tool does?
ForeverWintr,I think you don't need this check. StaticFrame will raise a FileNotFoundError if the file_path doesn't exist. 
ForeverWintr,"I think you should use pandas here. Static frame does unexpected things with missing data and string dtypes. (see https://github.com/InvestmentSystems/static-frame/issues/160)  ```suggestion         solactive_frame = sf.Frame.from_pandas(pd.read_csv(file_path, dtypes=DTYPES)) ```"
ForeverWintr,Can you name this query something else? I find it confusing that you shadow `source_portflio_id` with the query.
ForeverWintr,"How about only calling fetch_all_as_frame once?  ```suggestion         result = is_engine.fetch_all_as_frame(source_portfolio_id)         if result.loc[sf.ILoc[0], ""count""] == 0:             raise RuntimeError(f""Invalid {source_portfolio_id,vendor_name,vendor_name}"")          return result ```"
ForeverWintr,"Instead of nested if-else, consider defining a mapping from these string values to `ReturnType`, and making lookups in it here:  ```python # This could live at class level. RETURN_TYPE_NAME_TO_ENUM={     ""Price_Return"": ReturnType.Price,     ""Total_Return_Gross_Tax"": ReturnType.Total,     ""Net_Return"": ReturnType.Net,     ""Excess_Return"": ReturnType.Excess, }  return_type = RETURN_TYPE_NAME_TO_ENUM[rt] ``` "
ForeverWintr,"Another option, if your strings match the values of the enum as they do here, is to do something like this:  ```python frequency = rw.ReturnFrequency(rf.upper()) ```"
vhquang,"It is only my guess, but I think part of the reason we use `~/log` is because we don't need extra permission to write to that folder, as oppose to `/var/log`.  I have a different perspective on user vs system. Since we are running those script as part of our backend, the line between user vs system is not very clear. For example, I would think gunicorn's log is system log, and so does airflow. PARC's log is also system log from my perspective. I would agree Argo output is user's log. However, I think trying to differentiate between them won't give us extra benefit.  If we start over, I think it is better to write everything to `/var/log`, or write everything into `syslog` and have different process to categorize these logs. That approach would benefit us once we move to containerize our apps, since we can't store log inside the container (those logs will be gone once the container is done)."
flexatone,"what is `syslog`? but us, getting the logs of the machine is probably the way to go; there is AWS CloudWatch for this, I think."
flexatone,"It feels a little awkward that one of these ends with instance, and the other does not. I see why you need it for `dataset`. Should we have `vendor_instance` for consistency?  And this can be a `cached_property`, no?"
flexatone,"```suggestion     Autogenerated from `Rapid`. ``` You mean the class, not just an identifier."
chaburkland,"I don't think this is doing what it says it's doing. `loc` will just be a boolean, not an integer locations.  Also, I'm not sure what ""bad prefix"" means? It either exists or it doesn't.  Also, in general, we try to avoid raising `Exception` as it's just too vague. This seems to me like a ValueError?"
chaburkland,Can I suggest a different name? I think `_convert` might be a bit broad. Maybe - `_convert_prefixed_str_to_date`
chaburkland,"It might be good to throw in an additional check about that data in `shares_out`. Something like:  `assert frame['shares_out'].std() == xxx` `assert frame['shares_out'].mean() == xxx`  That way, we have a guard to enforce the current behavior of how `_get_raw_data` handles that col"
chaburkland,"`split` uses whitespace by default, so this could just be:  `gvkeys = ""001004 001004 318766 318770 318776"".split()`  (Same for the other places you use it)"
chaburkland,:+1: 
chaburkland,"Since you build this frame twice, it's probably worth adding it as an attribute on the class in `def setUpClass(cls):`"
chaburkland,"This is a really cool move, although it's fairly unprecedented in our code base. I think it might be good to show this off in a future code review to see what other team members think about it!"
chaburkland,```suggestion         actual = reader._scale_shares_out(sf.Frame.from_items(items)) ```
chaburkland,"Most frame constructors set the `index` as an auto-incremented integer, so setting it to `range(3)` is unnecessary"
chaburkland,"`self.assertEqualFrames(actual, expected)`!  This is a method we added to `RATestCase`"
chaburkland,"I would recommend putting this context manager only where you expect the raise to happen. As it's written, it's not obvious to me what you are expecting to fail. In general, it's best to keep code out of contexts they don't care about"
chaburkland,"`dates = np.array(dates, dtype=""datetime64[D]"")`"
chaburkland,"This line will never be hit, since the context manager created by `self.assertRaises`, exits on the first found failure. (You could fact-check me on this, but I'm pretty sure that's the case)"
ForeverWintr,"Yes, the difference between Rapid the string and rapid the namedtuple is a frequent source of confusion!"
ForeverWintr,"`vendor_instance` is probably a good idea.   Do cached_properties work on namedtuples? If so this could be a cached property, but `cls` here is an enum, and enums are already singletons, so I don't see much benefit. I think we would essentially only save 2 dictionary lookups."
vhquang,"[syslog](https://www.thegeekdiary.com/linux-os-service-syslog/) is a standard and central (aka: a dumpster) place to send log message. A typical setup is dumping application messages into syslog stream, and have another process/service extracts them out. It decouples writing and storing log.  That would also work for AWS CloudWatch if we decide to use it. When iterate locally, I think we wouldn't want to write log directly to AWS. So we still need a local log stream. On server, we can add a log collector to extract and send the log to AWS. Whether we want to store log as files, or upload to AWS, or email that log to ourselves, is a downstream logistic, that we don't need to handle as part of application's code."
vhquang,I think it's OK to keep it in the summary.
vhquang,"The only thing we need from `ci_spec` is `ongoing_reduction` rate. I think it is better if we pass only that value into the function, rather than the whole `ci_spec`. (For the old 2021 `RMCarbonIntensityPlugin._get_reduction_rate` as well)"
vhquang,"This test is now specifically for 2021. I think it is better to update the test name, ex: `test_low_carbon_get_target_ci_2021` so we know that this only tests old implementation."
gettodaze,Good idea!
gettodaze,"Good idea, I'll change to `test_RMCarbonIntensityPlugin_get_target_ci`."
chaburkland,:pray: 
vhquang,"Are the index sorted? If so, maybe we can check if `cur_levels.index[0] > prev_levels.index[-1]` to raise. It is a small optimization, I am fine with current code though, if we are not certain about the order in the index."
vhquang,"Can you elaborate on changing the forward limit to 0? I am not familiar with the code here, and try to learn more. We can zoom if it is easier to explain."
philipmassouh,"Added parentheses-- messed up operator precedence.   The check is to ensure that a `prefix` exists and starts at the beginning of the string. I added this because I wasn't sure if the caller `str_iter_to_date_index` would be exposed to a public interface and if it is, I figured it'd be a nice check to have  can totally get rid of it though, what do you think?"
philipmassouh,:+1: 
philipmassouh,```         self.assertTrue(frame['shares_out'].mean() == 4629.794266666667)         self.assertTrue(frame['shares_out'].std() == 11632.135969573948) ```  would you just keep it like this or floor both answers and compare with 4629 and 11632
philipmassouh,I swear I knew that... all occurrences fixed 
philipmassouh,"is it `split("" "")` or do you just like line 82?"
philipmassouh,"good to know, all occurrences removed!"
philipmassouh,"awesome, I will be using that a lot in the future 2x occurrences updated"
philipmassouh,quarterly duplicates should never go through whereas annual duplicates will be automatically removed. I was checking that. do you think it's an unnecessary test or that i should document it better?
philipmassouh,:+1: 
philipmassouh,I think you're right. looking into a clean way to check both
philipmassouh,there are some issues if you want to re-use `items`
chaburkland,"Leave it as is, but use `self.assertAlmostEqual`!"
chaburkland,I just like line 82 haha
chaburkland,"I think all I meant was to split it up into multiple context manager:  ```python with self.assertRaises(Exception):     CountryInfo._convert(""2020105"")  with self.assertRaises(Exception):     CountryInfo._convert(""20201215T"") ```"
chaburkland,"What I mean is that you should only have code in context managers that need to be there.  So in this case, you are only checking that one thing fails. So the code should look like this:  ```python setup() build_things() do_any_prep_work()  with self.assertRaises(AssertionError):     this_call_should_raise_an_assertion_error() ```  instead of  ```python with self.assertRaises(AssertionError):     setup()     build_things()     do_any_prep_work()     this_call_should_raise_an_assertion_error() ```"
chaburkland,?
chaburkland,"The check is good, I just don't think your code works.  My suggestion is to simply to: ```python if s.find(prefix) != 0:    raise ValueError(f""Prefix '{prefix}' not at beginning of {s}"") ```"
philipmassouh,"``` Python 3.8.12 (default, Feb  9 2022, 13:34:44) Type 'copyright', 'credits' or 'license' for more information IPython 7.16.3 -- An enhanced Interactive Python. Type '?' for help.  In [1]: display(((loc := ""p_valid"".find(""p_"")) != 0), loc) False 0  In [2]: display(((loc := ""ap_invalid"".find(""p_"")) != 0), loc) True 1  In [3]: display(((loc := ""p_invalid"".find(""foo_"")) != 0), loc) True -1 ```"
chaburkland,"In example 2, `loc` is set to `False`. Which means your error message would read:  ```bad prefix: begins at True```  That's what I meant by ""doesn't work"""
philipmassouh,Yeah that would be my instinct but what if there were a more pythonic way to do it? I can imagine a future situation where you'd want to test that like 5 different inputs would raise an error of some kind
philipmassouh,I was just missing parentheses when you first saw it
chaburkland,"Maybe:  ```python for malformed in (""2020105"", ""20201215T""):     with self.assertRaises(Exception):         CountryInfo._convert(malformed) ```"
philipmassouh,yeah thats a lot better
chaburkland,"Oh I see now! At any rate, I still think it will lead to an unhelpful error message. I think this is much clearer:  `raise ValueError(f""Prefix '{prefix}' not at beginning of {s}"")`"
philipmassouh,"you're right, i just wanted an excuse to use `:=`"
gettodaze,"We are certain about the order, but I was hoping to also cover a situation like this where the latest `latest date prev_levels.index[-1]` is greater than the earlist date of the next series: ``` In [27]: s                                                                                                                                                                                                                                     Out[27]:  <IndexDate> 2021-05-20 2021-05-21 2021-05-30 <datetime64[D]>  In [28]: s2                                                                                                                                                                                                                                    Out[28]:  <IndexDate> 2021-05-29 2021-06-01 2021-06-02 <datetime64[D]> ``` But in all honesty, this doesn't solve it either because if `s2` is  ``` In [30]: s2                                                                                                                                                                                                                                    Out[30]:  <IndexDate> 2021-05-30 2021-06-01 2021-06-02 <datetime64[D]> ``` it still has a big gap that I am trying to avoid. And also, Ted recently said that some gap is fine. I'll need to rethink how far I much I want to code for this edge-case."
gettodaze,"The forward fill limit here isn't used, so my thought is that its safer to put in 0. I didn't design `PPD` with the thought of not using `forward_fill_limit`, but I just ended up using it like that. So it probably needs a slight redesign."
vhquang,"I see you didn't change the current logic, but as it is the process will fail with some files already uploaded to the server. Should we keep it that way, or update it?"
vhquang,```suggestion         # this returns a function prepared to execute a process in the conda environment ```
flexatone,"No, I do not think so. This loop has to complete before we do any uploading, and in this loop we use `head(upload)` to check if a file exists. So if a file exists, this loop will raise, and we will not upload anything. Does that handle the case you are thinking of?"
vhquang,"I don't think I have seen it has more than 2, for data writer that is. Typically, it will go to static: http://irv-pc101/static/ with the first component is the folder, and the second is the filename. Is there a case you found?"
gettodaze,"I guess not on static, so this might be fine practically, but theoretically it can be more, like this example in AATC: https://github.com/ResearchAffiliates/invsys/blob/2cdacfda165f3ef86e04a30463820f21d6754e61/AATC/apps/constants.py#L30"
philipmassouh,"``` In [6]: items = [    ...:                 (""gvkey"", gvkeys := ""001004 001004 318770"".split()),    ...:                 (""iid"", iids := ""01 01 02W"".split()),    ...:                 (    ...:                     ""data_date"",    ...:                     (    ...:                         np.datetime64(f""2020-05-09""),    ...:                         np.datetime64(f""2020-05-09""),    ...:                         np.datetime64(f""2020-05-24""),    ...:                     ),    ...:                 ),    ...:                 (""shares_out"", (37.7, 37.7, 243.1)),    ...:                 (""gvkey_iid"", (f""{g}_{i}"" for g, i in zip(gvkeys, iids))),    ...:                 (""frequency"", list(""QQA"")),    ...: ]  In [7]: f1 = sf.Frame.from_items(items)  In [8]: f2 = sf.Frame.from_items(items) --------------------------------------------------------------------------- ErrorInitTypeBlocks                       Traceback (most recent call last) <ipython-input-8-d640bf3742de> in <module> ----> 1 f2 = sf.Frame.from_items(items)  ~/.env38/lib/python3.8/site-packages/static_frame/core/frame.py in from_items(cls, pairs, index, fill_value, dtypes, name, index_constructor, columns_constructor, consolidate_blocks)    1095             block_gen = blocks    1096 -> 1097         return cls(TypeBlocks.from_blocks(block_gen()),    1098                 index=index,    1099                 columns=columns,  ~/.env38/lib/python3.8/site-packages/static_frame/core/type_blocks.py in from_blocks(cls, raw_blocks, shape_reference)     297                 # check number of rows is the same for all blocks     298                 if row_count is not None and r != row_count: #type: ignore [unreachable] --> 299                     raise ErrorInitTypeBlocks(f'mismatched row count: {r}: {row_count}')     300                 else: # assign on first     301                     row_count = r  ErrorInitTypeBlocks: mismatched row count: 0: 3  In [9]: ```  You have to turn the `gvkey_iid` into a list if you're going to make an `items` variable for reuse. I was stuck on this for like 10 min lol because I thought it was some sf issue. `list((""gvkey_iid"", list(f""{g}_{i}"" for g, i in zip(gvkeys, iids))))`"
philipmassouh,"unfortunately, the frames differ very slightly in the frequency field. I did use `setUpClass` to set up a reader object that I used everywhere (except the patched methods)"
vhquang,"I see. I didn't aware of that. However, I think it is better to keep the format narrow and applicable only data writer, for now. Once we see a case where we need to expand it, we can relax it. Would that be OK?"
chaburkland,"Gotcha - at any rate, I still think this might be worth showing, since it's not a pattern we use very often, so it might be good to hear other's feedback about it."
kocharR,renaming the query to portfolio_map_qry
gettodaze,Personal question: what does this mean?
gettodaze,What is the difference between `self.spec.su_connector` and `self.universe.connector`?
gettodaze,Do you need the tab here?
gettodaze,You might be able to do something like this: ``` In [5]: s                                                                        Out[5]:  <Series: 0> <Index> 0           1930.4 1           -610.8 2           694.3 3           1080.4 <int64>     <float64>  In [6]: s.relabel(str)                                                           Out[6]:  <Series: 0> <Index> 0           1930.4 1           -610.8 2           694.3 3           1080.4 <<U1>       <float64> ```
gettodaze,Did you want to use `Size.LARGE` etc here?
gettodaze,"I'm not a fan of all these on-the-fly field creations, but I think its fine. It's likely just the nature of the beast."
gettodaze,I like this addition to this module! Is this meant to replace the SubIndex fields?
gettodaze,"This is good here, but just a note it already exists somewhere else in the code and eventually we could consolidate it: https://github.com/ResearchAffiliates/invsys/blob/b558d54c6c6c9f5bba22e8c1e7333b289e53f3db/papyri/papyri/core/country_iso.py#L7-L15"
gettodaze,This is great
kocharR,This makes sense.
kocharR,Thanks for brining this up. This file that script process is internal to RA and never had any missing data before. 
vhquang,"I see. So your goal is not to have a gap in the data. Does it matter if the gap is within the series, or across the series? Inside the series, you have big gap of 9, across the series you have a gap of 3. Do you care about the difference between 9 and 3, or can we treat all gaps as the same?  If all gaps can be treated the same, maybe you can try this algo: ``` max_gap := x indices = union of all series.index for i: 0 -> max_gap:     indices = indices.union(indices.shift(1)) if len(indices) < indices.max() - indices.min():    raise ""there is a gap larger than {max_gap}"" ``` That assumes we are checking continuous calendar days. If you only need to check business day, we can populate list of business days to check."
vhquang,Got it. Thanks for explaining to me.
vhquang,"You can remove this whole `__repr__`. I haven't found much benefit in it. I think originally it was meant for debugging. But having debug code to call `get_latest_product_info` (which will refresh SVN for latest info), is not desirable. "
vhquang,"This looks like a broken code, and doesn't seem to be used anywhere in our code. Let ping @gettodaze to see if we can remove this, or if he prefers to keep it for a while."
vhquang,I am not familiar with this section in pylintrc. Are these purely for documenting/referencing purpose?
johnjhawk,covered in chat
johnjhawk,covered in our chat
johnjhawk,"I'm not either, but we're creating multiple size and grouping columns on the fly that change depending on the spec and or connector.  Not sure of a better way right now. "
johnjhawk,I think so.  I don't see the insert() adds one. 
johnjhawk,great suggestion. since this is tested and validated. I'll make a new issue to verify that your suggestions give the same results.  
johnjhawk,good idea.  I changed it.
johnjhawk,I didn't realize that we had a StrEnum.  Thanks.
johnjhawk,"yep, where appropriate. "
nekobon,"```suggestion         REGION_SUFFIX_ATTRS.single_country,  ```"
nekobon,This is already defined in its parent class
nekobon,"This, too"
nekobon,Please remove this
nekobon,How about to inherit from 2021 to show the difference easier
johnjhawk,:+1: 
flexatone,Should this set a max size?
flexatone,Should this function just be commented out?
flexatone,Would this ever need a timezone consideration?
flexatone,It is a little surprising to fallback into an interactive mode here: can you take a CLI flag instead?
flexatone,"Will anything be written at this file path? If so, I would get something in our standard `/tmp` sub directories, not something in the common `/tmp` space."
chaburkland,"I wasn't sure what a good one would be, since Guru didn't set one. I'll look at the G-Drive to give me a rough estimate on the number of files per asset class for an upper bound"
chaburkland,Probably - although in that case it seems best to just delete. Keeping it uncommented ensures it doesn't grow _too_ stale. What do you think?
chaburkland,"It might be nice, but I think it might be best to keep it aligned with all the other MATs cli tools, which means I'll re-write this to align with how Gurus was doing it (`du.date_to_year_mo_day_str(run_date)`)"
chaburkland,"Sure - I""ll update the arg parser  "
chaburkland,"No - it's strange. This argument just needs to be not-falsy. If it's falsy, the program will attempt to fetch the latest static-file, which we don't care about for historical backfills.  That being said, I think making a symbolic constant here would be more helpful, as this has proved to be a continual source of confusion for people."
flexatone,"What about an `object` sentinel, i.e., `NO_FETCH = object()`?"
flexatone,"But if no one is calling it it can still get pretty stale! Uncommented I think it is being used somewhere, so if it really is not used anywhere, I would comment it out..."
chaburkland,Good idea - it's a refactor that Guru put off so I'll knock it out :+1: 
MadisonAster,"I hate to criticize my own code here, but are all of these assertions valuable? I think Chris might say in this case that we don't need to test every arg individually."
MadisonAster,I think you may have deleted this typehint by acciident
gettodaze,Thanks for the ping Quang! I think this is just a remnant of iterating on this module. I will remove.
gettodaze,"@philipmassouh If you pull default, it should be gone now. Thanks for catching!"
philipmassouh,yes it is just a reference
vhquang,"I think it is up to how confident we are and how much impact it will be. In this case, we can observe the effect right away after running the code and the script is not critical, I would agree we don't need to test every args. However, the time and effort on writing test for all of them is also good effort. Even if I don't think it is required I still appreciate the effort."
vhquang,"Yes, I overlooked this while resolve the merge conflict. Thanks for catching this!"
vhquang,```suggestion     def get_local_writeable_fp(self) -> str: ```
chaburkland,"I don't need to re-review for this, but this line won't get hit. This needs to be:  ```python with self.assertRaises(ValueError):     CountryInfo._convert_prefixed_str_to_date(""20201324"")  with self.assertRaises(ValueError):     CountryInfo._convert_prefixed_str_to_date(""20201232"") ```  The `self.assertRaises` context manager escapes after the first exception is raised."
philipmassouh,"oh yeah, i forgot to make that change-- it's done"
ForeverWintr,It's a good idea to use an epsilon when comparing floating point numbers. In this case I would do something like ```suggestion         expected = expected.tolist()         assert pytest.approx(expected) == actual.tolist() ```
ForeverWintr,It looks like some or all of these tests should be marked slow. Is that the case? We mark tests slow if they take more than ~1 second to run. 
ForeverWintr,"`cached_property` needs a `__dict__`, so doesn't work on namedtuples. I'll not cache this for now. "
philipmassouh,only the `from_latest` tests are slow. i need to figure out how to speed them up
johnjhawk,I don't think we even need the allocation sheet?  
chaburkland,"No I don't think so. I figured it was nice to have, but now the `market.xlsx` file is literally the same as `client.txt`, (except for file type) "
chaburkland,I double check with Robert about what he wants
johnjhawk,"great, it would be nice to remove it too."
vhquang,"Do you remember if we have any feature in `RMCarbonIntensityPlugin2022` that we want to apply for this? On top of my head, I think we don't have any feature for the 2022 that we want to apply. And what you have here is the correct one. I just want to double check."
gettodaze,"I thought `RMCarbonIntensityPlugin2022` was just for `RMC`, right? This is the one we used for the FRR test build."
nekobon,"Please add this new parameter to the older specs, too, and remove `hasattr` move. This way, it would be clear in the spec file if we forget to update the parameter. Otherwise, we might miss applying this cap without showing that the spec."
vhquang,"I just want to double check. I intend to set this param on old specs with UK_large as 1.0, ie: no weight cap. I think that is what we implicitly did in the past, and thus I wouldn't need to validate any test. Do you think it is better to set UK_large as 0.15 on old specs? (We may or may not need to re-validate tests, some tests may still pass)"
nekobon,"Can you explain a bit more on this comments? Is it like a TODO, or suggestion to improve?"
nekobon,Maybe  ```suggestion         to_process_lh_non_nan = to_process_lh[bi.spec.co_id_field].dropna() ```
gettodaze,"Ah yes, the top line is just a comment, but the bottom line is a todo for improvement: ```     # fill SEDOL from the live_holdings dataframe     # TOIMPROVE: perhaps move to before filling from old geu sedols ``` @nekobon How is that?"
gettodaze,Thanks!
gettodaze,"I'm going to resolve this conversation to merge, let me know if you would like a different change."
gettodaze,"What you have is fine, but I wonder if it might be more readable to typehint them further up: ```suggestion         pairs: tp.Tuple[tp.Tuple[str, tp.Callable[[ISSFrame], sf.Series]], ...] = (             (""coal_exclusion"", esg_reader.get_coal_exclusion),             (""weapon_exclusion"", esg_reader.get_weapon_exclusion),             (""tobacco_exclusion"", esg_reader.get_tobacco_exclusion),             (""ungc_exclusion"", esg_reader.get_un_compact_exclusion),             (""sdg_exclusion"", cls._get_sdg_exclusion), ```"
gettodaze,"And then you can just say  ```suggestion         for exclusion, func in pairs: ```"
gettodaze,"This also duplicates some code from from `get_low_carbon_exclusion`, but if this is the only duplication so far, I think its fine."
vhquang,"I like the suggestion about typehint. As for `get_low_carbon_exclusion`, previously RMC and RMC2022 were the only caller of it. With this, old RMC is the only usage. I want to leave old RMC as is for now. If Ted also wants to have this output report for old RMC, I will refactor this into an util to share between 2 classes. If not I may just move it into old RMC classmethod.  Anyhow, I want to table that decision, and get the recon build first."
gettodaze,Fill co_id
MadisonAster,lines 28 and 31 seem redundant here unless you're thinking that the inheritance might change in the future.
MadisonAster,"Purely a matter of style, but I'm not sure that I like the way you're adding these to the module's namespace and then importing them again inside of your test module. Maybe the test module should just import from SDKFields too? Or maybe just  use the SDKFields namespace directly wherever these are used since you have local variables like date_start and date_end elsewhere in the module."
chaburkland,"Yeah probably - I felt it couldn't hurt to be redundant, and to add a guard in case inheritance changes later. I guess I want a clear test signal to fail if that changes down the road"
chaburkland,I'll make the test module use `SDKFields.` directly :+1: 
gettodaze,"oh wow! never heard of `matches.discard`!  This looks good! Just want to make sure, this way will only keep the composite RAPIDs; so if you ever want separate rapids in the future, we will need to re implement this. I think your implementation the right choice for now, but just want to make sure its being considered."
ForeverWintr,"Hmm, that's a good point. I'm not sure how we would pick a single underlying rapid, but perhaps adding a `filter` argument here similar to your other methods would address this? "
ForeverWintr,"Wow, adding McRafi was this easy? I assumed it would be more involved. "
ForeverWintr,"  ```suggestion             lambda row, carve, size_field: row[_country_field] == ""CN"" ```"
johnjhawk,"Yep, it just loops through all of the different sizes."
ForeverWintr,"I will resolve this for now, and we can revisit if/when we need to find a child rapid."
gettodaze,This is intentional to have two links I am expecting?
gettodaze,Is this `same!` a note?
gettodaze,And here. Haha you'll never guess what order I wrote these comments.
gettodaze,If they were already `nan` why do you need to reassign them `nan`?
gettodaze,"Just curious, why are we returning `FieldSeriesPair` instead of just the `series`. Isn't the field embedded in `series.name`? "
gettodaze,Oh haha woops I forgot it also shows up in chronological order in the conversation tab.
chaburkland,When they are both nan the sum will be 0!
chaburkland,One of the links is from compustat's documentation and one is from worldscope!
chaburkland,"The `same!` note is to indicate that I've vetted the two links have identical implementations, hence the single method"
chaburkland,"It's being added to a frame using `FrameGO`, and the loop looks like: ```python for func in funcs:     field, col = func(fgo)     fgo[field] = col ```  it probably could just be: ```python for func in funcs:     col = func(fgo)     fgo[col.name] = col ```  I will refactor :+1: "
vhquang,"Does this docstring get out of date? I only see the inclusive/exclusive applies to `returns`, and not `levels`."
vhquang,Maybe you meant to clean up this debug code?
gettodaze,"No, it just contains too much information haha. I'll move the full info to documentation for `RapidChild`."
gettodaze,"Oh, no, I just want to leave that there to make future re-validation easier. I will put a note here `# to revalidate:`."
vhquang,I think info about levels vs returns is better document on the caller of this function instead of the function itself. I defer it to your decision whether that should be on the caller or RapidChild. You know the code better than I do.
gettodaze,"Yeah, I got rid of the `returns vs levels` documentation there. Thanks!"
ForeverWintr,I don't think you intended to commit this file. You can remove it with `git rm`
ForeverWintr,Why is `vendor_name` here twice?
ForeverWintr,Do you intend to use `vendor_name` here instead of hardcoding Solactive?
nekobon,"How about to use `shift`? Something like ``` group.assign.loc[:sf.ILoc[-1]?, SDKFields.DATE_END](group.shift(1) - self.ONE_DAY) ```"
chaburkland,Awesome!
chaburkland,"```python corrected_end_dates = (     group[SDKFields.DATE_START].shift(-1, fill_value=self.NAT).iloc[:-1]     - self.ONE_DAY )  group = group.assign.loc[sf.ILoc[:-1], SDKFields.DATE_END](     corrected_end_dates ) ```"
vhquang,"Also check for domain here, to validate port."
vhquang,Try import PlatformResource to set the port.
vhquang,Use ternary for string.
nekobon,"```suggestion             ""Please use `from_as_of_date` instead!"", ```"
kocharR,No for this query vendor name will always be Solactive. By command line may pass Simulated or Solactive.
kocharR,Thanks for catching that. I didn't intent to commit this file. 
ForeverWintr,Then why does this method accept `vendor_name` as an argument? Isn't it only used when you raise an error?
kocharR,"That is a good point. Vendor in this case would be ""Simulated"" ( file from research) but I am hoping to use the same script for solactive files too. Vendor_name = solactive or simulated also determines the returns attr_id. If solactive file comes with the same format, I have to modify code to use the value of vendor_name. That's the reason I kept it as it is.  "
ForeverWintr,"I'm not sure I understand. Are you saying that you keep passing `vendor_name` into this function, even though you don't use it, because you hope to use it at some point in the future?"
kocharR,I was talking about the command line arguments but now I look at function _check_source_portfolio_id and I will et rid of the parameter vendor_name. That parameter in the function is not needed. Let me make that change.
nekobon,I haven't seen `%` for a long time!
nekobon,Let's use hard-coded min and max dates as discussed
nekobon,This is not fixing what you think you're fixing...?
nekobon,(post == 0).sum() -> 0 or len(post)
nekobon,Reference sf ticket
ForeverWintr,Do you intend to set the port from `inventory` here too?
ForeverWintr,Did you disable `fmt` for this entire block so that this comment doesn't cause the line to wrap? Wouldn't it be easier to just move the comment above this line?
ForeverWintr,Why are these commented out?
johnjhawk,We could import this as `import datetime as dt` then we could reference that in the code below.  Up to you. 
nekobon,How about for simplicity ```suggestion         if set(num_missing_sic_codes.values) != valid_missing_nums: ```
chaburkland,"Actually that's not correct! If there are none missing, then the set might be `{0}`, and that's an acceptable outcome"
vhquang,"Unlike other web app, `aasite` does not have its PlatformResource defined in `inventory`: https://github.com/ResearchAffiliates/invsys/blob/40283b4dd845fd6086bb084cc40d9b9b772c04c5/deploy/inventory.py#L1748 I don't know the background for it, and don't know if we need its PlatformResource."
vhquang,"It was my intention. It is personal perspective, but I think it is clearer to have inline comment in this particular case. With comment on its own line: ```python     display_name: tp.Optional[str] = None     execution_name: tp.Optional[str] = None     # can define in isolation if no execution exists     machine_name: tp.Optional[str] = None       port: tp.Optional[int] = None     endpoint: tp.Optional[str] = None     audience: Audience = None ``` It wasn't clear about the scope the comment applies to."
vhquang,"I comment them out, since fast tests on this branch will hit production and will cause issue on production. The deployment path is for me to merge this PR first, then update PARC production to HTTPS, then enable code in this comment."
gettodaze,"Maybe redundant, but I think it's more clear to have a typehint for everything. ```suggestion         def check(frame: pd.DataFrame | sf.Frame, salt: tp.Any) -> None: ```"
gettodaze,You could put this logic inside check
chaburkland,"I can't! I'm essentially trying to:  `check(series)` `check(series.to_pandas())`  Except that `.to_pandas()` can possibly raise, so that's why I'm wrapping the second call"
ForeverWintr,"Personally I would do:  ```python     display_name: tp.Optional[str] = None     execution_name: tp.Optional[str] = None      # can define in isolation if no execution exists     machine_name: tp.Optional[str] = None        port: tp.Optional[int] = None     endpoint: tp.Optional[str] = None     audience: Audience = None ```  But I agree, personal preference. :)"
vhquang,:eyes: 
vhquang,:eyes: 
nekobon,:+1: 
nekobon,How about to add whether the dates are inclusive/exclusive.
nekobon,How about ```suggestion             if end_date <= start_date:                 p.error('expects `start_date` < `end_date`') ```
ForeverWintr,Why use old style string formatting (instead of `format`)?
ForeverWintr,Is this a numpy deprecation warning?
chaburkland,Could you maybe add the keyword for what 20 is?
chaburkland,"Yeah - this DB has timezone information in the date fields, and so when it is being converted to a numpy array, np raises this warning. I don't know how to resolve this warning without updating the column schema itself in the DB, or to manually write a method that removes timezone information from the `datetime` object before feeding it into a Frame constructor, but both of those seem way heavier than this requires."
chaburkland,Totally not because I forgot about how to use f-strings this way....
chaburkland,"To align this with how it's been done before, this should be:  `id integer primary key generated always as identity`"
chaburkland,What is `::regclass`? This doesn't appear in any of the previous alembic scripts.
chaburkland,What is `bpchar`? In all the other alembic scripts this is just `char`
chaburkland,Should this be `text`?
chaburkland,This should be `NOT NULL`. We always need changesets!
chaburkland,"Also, what is `int4`? All the other scripts just use `integer`"
chaburkland,These must all be `NOT NULL`.
chaburkland,I don't see `swap_type` in the tech doc. Did Jay ask for this?
chaburkland,Same comment here about `id integer primary key generated always as identity`
chaburkland,This should be `NOT NULL`
kocharR,"if you look at macro_attr and yield_curve_attr , you see  **CREATE TABLE macro_attr ( 	id serial NOT NULL,**   **CREATE TABLE yield_curve_attr ( 	id serial NOT NULL,**  who created these two tables?   Seems like it has not been uniform "
chaburkland,"Those are the only two I believe - I think those were the first two tables created, and then every table since uses `generated always with identity`"
kocharR,Yes 
ForeverWintr,"It's possible that we should use the ISLib compat version of the `slow` decorator here (and elsewhere in ISLib), but I'm not sure. I think @chaburkland or @nekobon can advise. "
chaburkland,Thanks for catching this @ForeverWintr. @philipmassouh you cannot import any non-SDK modules for any test in the `public` directory.  `from ISLib.compat import slow` is the import you want here
gettodaze,This is just fixing a typo
ForeverWintr,@philipmassouh actually caught this himself and asked me about it!
chaburkland,Is the intention to exclude any dates previous to the cutoff? (The old code did not do that)
chaburkland,Isn't this parameter `table_name`?
chaburkland,When would you want `table_name` to **not** equal `table_lookup(name)._NAME`?
chaburkland,Maybe make this a class-level symbolic constant?
chaburkland,:+1: 
chaburkland,I've never seen this before - what does this do?
chaburkland,Why did you remove the `rename`?
chaburkland,:+1: 
chaburkland,Some high-level feedback for this test. I think `test_fill_bus` is a bit opaque. I wonder if it might be better to split it up into sub-tests or to add more comments.
chaburkland,I'm wondering if we could add a test specifically for `_fill_frame`
gettodaze,"We decided that because the index is a lagged data date, not a true ""data date"", so naming it ""data date"" is a bit confusing."
gettodaze,"`table_lookup` does not allow lookup for unsupported columns, and this function is also used by the exploratory functions with unsupported columns."
gettodaze,"Ahh, I think I forgot an `assign`. Are you referring to  that its not `monthly_frame = monthly_frame.assign.loc[sel].fillfalsy_backward()`? "
chaburkland,Yeah!
vhquang,"I will add more description for this test.  I also agree on splitting the test, either to sub-tests or different tests. I think originally the author tried to re-use the creation of the mock frame and its associate mocks. They are pretty specific for this test case. There might be a better way to refactor this test."
vhquang,I think the test's name can be updated to `test_fill_frame` as the main testing object is the `ISSReader._fill_frame`
vhquang,"@gettodaze feel free to correct me, I think the intention is not having to write: ```python with patch.object(iss_reader, 'table_lookup', lambda _: MockTable):     with patch.object(ISSReader.RESOURCE, 'column_missing_value_map', {...}):         ISSReader._fill_frame(...) ``` ie: to avoid deep indentation for mock, and also to allow re-use the mocks in later code below."
vhquang,"Let me address this in separated PR, so that John M and I have more bandwidth to discuss about how to refactor it. The refactor on the test won't affect the feature that Joseph needs, and we want to have the change in this PR merge and release soon."
chaburkland,```python monthly_frame = monthly_frame.assign.loc[sel].apply(lambda s: s.fillfalsy_backward()) ```
gettodaze,"Oh yeah, @chaburkland I had meant to ask -- it seems like this would you suggested be heavier than what is in the PR, because it has to create many series objects. But perhaps the series objects are lightweight because it reuses the frame's np array and index?"
vhquang,"I am curious, does the lambda in `apply` on `frame.assign` takes in Frame or Series?"
gettodaze,"Speed test: ``` In [5]: f = ff.parse('i(ID, dtD)|s(100,100)')                                    In [11]: f2 = f.assign.iloc[[3,4,5,10, 30, 31]](np.nan)                          In [12]: sel = sf.Series.from_element(False, index=f2.index).assign.iloc[:20](Tr     ...: ue)   In [17]: %timeit f2.assign.loc[sel](f2.loc[sel].fillfalsy_backward())            1.91 ms ± 15.6 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)  In [18]: %timeit f2.assign.loc[sel].apply(lambda s: s.fillfalsy_backward())      1.79 ms ± 61.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) ```"
gettodaze,@vhquang Oh I see it takes frame! ``` In [24]: def myfunc(x):      ...:     print(x)      ...:     return x      ...:                                                                                                                                                                                                                                        In [25]: f2.assign.loc[sel].apply(myfunc)                                                                                                                                                                                                      <Frame> <Index>         0         1         2         3         4         ... 95        96        97        98        99        <int64> <IndexDate>                                                       ... 2065-01-17      1930.4    -610.8    694.3     1080.4    3511.58   ... 3287.02   2600.2    3511.58   3408.8    1699.34 1979-12-28      -1760.34  3243.94   -72.96    2580.34   1175.36   ... 3917.0    -3011.46  1175.36   647.9     268.96 2219-12-23      1857.34   -823.14   1826.02   700.42    2925.68   ... 121.12    -3148.74  2925.68   2755.18   3511.58 2052-09-12      nan       nan       nan       nan       nan       ... nan       nan       nan       nan       nan 2117-11-26      nan       nan       nan       nan       nan       ... nan       nan       nan       nan       nan 2323-03-29      nan       nan       nan       nan       nan       ... nan       nan       nan       nan       nan 2065-11-19      1175.36   1325.38   700.42    2105.38   -1259.28  ... 2166.88   3287.02   -1259.28  2520.5    647.9 2427-01-09      2925.68   -3424.62  3338.48   2398.18   3442.84   ... 3989.8    3917.0    3442.84   1194.56   2755.18 2304-09-13      3408.8    -779.94   2444.92   3884.48   -3093.72  ... -1990.38  121.12    -3093.72  -1957.02  -1259.28 2509-12-29      647.9     353.96    3944.56   3442.66   2520.5    ... 2309.92   2215.96   2520.5    3367.24   3442.84 2258-03-21      nan       nan       nan       nan       nan       ... nan       nan       nan       nan       nan 2298-04-20      -1259.28  -603.66   2398.18   -1760.34  -1957.02  ... 2041.76   3772.28   -1957.02  -3011.46  2520.5 2501-10-08      3442.84   1146.32   3884.48   1857.34   3367.24   ... 1932.8    2166.88   3367.24   -3148.74  1194.56 2441-04-14      -3093.72  -1952.64  3442.66   1699.34   2600.2    ... -610.8    3989.8    2600.2    713.68    -1957.02 2234-04-07      2520.5    3822.16   1930.4    268.96    -3011.46  ... 3243.94   -1990.38  -3011.46  -555.42   3367.24 2210-12-26      1194.56   3583.04   -1760.34  3511.58   -3148.74  ... -823.14   2309.92   -3148.74  1459.94   2600.2 2224-04-06      -1957.02  -273.3    1857.34   1175.36   713.68    ... 114.58    -635.52   713.68    3287.02   -3011.46 2202-08-20      3367.24   612.56    1699.34   2925.68   -555.42   ... -3367.74  2041.76   -555.42   3917.0    -3148.74 2006-10-27      2600.2    1625.5    268.96    3408.8    1459.94   ... 2812.54   1932.8    1459.94   121.12    713.68 2450-09-20      -3011.46  67.22     3511.58   647.9     3287.02   ... 1325.38   -610.8    3287.02   2215.96   -555.42 <datetime64[D]> <float64> <float64> <float64> <float64> <float64> ... <float64> <float64> <float64> <float64> <float64> Out[25]:  <Frame> <Index>         0         1         2         3         4         ... 95        96        97        98        99        <int64> <IndexDate>   ... ``` 
chaburkland,"It takes whatever the result of the selection is!  In this case: `frame.assign.loc[0].apply(func)`, the function takes a series In this case: `frame.assign.loc[[0]].apply(func)`, the function takes a frame  This is also faster, as it reuses the actual series/sub-frame from `frame`. "
vhquang,"I like the version of lambda apply, for concise. But for speed, the result from John M shows that the non-apply method is faster though."
chaburkland,"His showed faster! `.apply` was 1.79ms, the other was 1.91ms"
vhquang,ah right. I was reading the µs.
chaburkland,This was an unintended duplicate of the group for line 287 (or 303 from previous file)
chaburkland,"The main changes here are removing `NULL`, as that is the default, re-ordering the columns to align with the SqlAlchemy class definitions, and marking certain fields with `NOT NULL`.  Also, I add `instrument_id_root` which was missing"
chaburkland,"Since this code was manually copying from prod into local DB, then the sequence was going to be out of sync."
gettodaze,Does it need to take in `dates` as an argument? It seems `dates` is the same in both places.
vhquang,"It doesn't need to. But since our test logic implies time (2015-12-31 -> X will be filled, X -> 2019-12-31 will be nan), I feel it is clearer to declare that inside the test case, to get an idea of what the start/end timeline is."
vhquang,"It doesn't need to. But since our test logic implies time (2015-12-31 -> X will be filled, X -> 2019-12-31 will be nan), I feel it is clearer to declare that inside the test case, to get an idea of what the start/end timeline is."
vhquang,Does this URL need to be updated as well?
vhquang,:+1: 
chaburkland,This is managed by Xi - let me let her know to update it
chaburkland,This is incorrect! I think that the `DSField` named tuple could probably be re-worked to take advantage of the new architecture
chaburkland,"Since this a public API docstring, it should not change"
chaburkland,"Since this a public API docstring, it should not change"
chaburkland,I don't believe this is correct. I think `field_src` is expected something that resembles the old `SDKFields` class
chaburkland,I don't believe this is correct. I think `field_src` is expected something that resembles the old `SDKFields` class
chaburkland,I don't believe this is correct. I think `fields` is expected something that resembles the old `SDKFields` class
chaburkland,You'll need to update all `missing` references!
chaburkland,"Can we update these dtypes? Or better, make this a tuple of `SDKFieldAttrs`, and then the clients can extract the dtype out when they need it?"
chaburkland,"This notebook should not be modified as it's part of the public documentation, and `SDKFieldAttr` is not public!"
chaburkland,"This notebook should not be modified as it's part of the public documentation, and `SDKFieldAttr` is not public!"
chaburkland,"This notebook should not be modified as it's part of the public documentation, and `SDKFieldAttr` is not public!"
chaburkland,"This notebook should not be modified as it's part of the public documentation, and `SDKFieldAttr` is not public!"
chaburkland,"This notebook should not be modified as it's part of the public documentation, and `SDKFieldAttr` is not public!"
chaburkland,"This notebook should not be modified as it's part of the public documentation, and `SDKFieldAttr` is not public!"
chaburkland,"This notebook should not be modified as it's part of the public documentation, and `SDKFieldAttr` is not public!"
chaburkland,"This notebook should not be modified as it's part of the public documentation, and `SDKFieldAttr` is not public!"
chaburkland,"This notebook should not be modified as it's part of the public documentation, and `SDKFieldAttr` is not public!"
chaburkland,Can we update this to `fill_values=SDKFieldAttr.COUNTRY_EXCHANGE.fill_value`?
chaburkland,`SDKFieldAttr.DATA_DATE.dtype`
chaburkland,`SDKFieldAttr.DATA_DATE.fill_value`
chaburkland,Let's not change the docstring since it's potentially part of the public API
chaburkland,`SDKFieldAttr.DATA_DATE.dtype`
chaburkland,`SDKFieldAttr.DATA_DATE.dtype`
chaburkland,"`getattr(SDKFieldAttr, s.name.upper()).fill_value`"
chaburkland,`field.upper()`
chaburkland,Let's use `SDKFieldAttr.INSTR_PERM_ID.fill_value`
chaburkland,Let's use `SDKFieldAttr.INFO_CODE.fill_value`
chaburkland,Let's not change this public docstring
chaburkland,(Same for all the others in this file)
chaburkland,Can we possibly get rid of `DTYPES` entirely?
chaburkland,Let's not update this public docstring (or any other one in this file)
chaburkland,Let's update this to use `SDKFieldAttr.field.dtype`
chaburkland,Let's update this to use `SDKFieldAttr.field.dtype`
chaburkland,Let's update this to use `SDKFieldAttr.field.dtype`
chaburkland,Let's not any public docstrings in this module
chaburkland,`from ISLib import np_raise as np`
chaburkland,Can you look into this?
chaburkland,`from ISLib import np_raise as np`
chaburkland,`SDKFieldAttr.DATA_DATE.dtype`
chaburkland,`SDKFieldAttr.WS_PERM_ID_CO.dtype`
chaburkland,`SDKFieldAttr.DATA_DATE.dtype`
chaburkland,Are you're on a different version on `black`?
philipmassouh,https://github.com/ResearchAffiliates/invsys/pull/2427#issuecomment-1061148225 yeah it's still WIP haven't gotten to that part yet
philipmassouh,context: `np.dtype(...` does that still work?
gettodaze,Just want to double check that you want the `pst` today instead of the local or gmt today.
gettodaze,try `create table if not exists`
gettodaze,`centcon/input/schema.sql`
gettodaze,"Maybe leave a note that the default """" is just needed for migration"
gettodaze,"```suggestion def api_get_test(changeset: str, args: tp.Iterable[str], date: str) -> bool: ```"
chaburkland,Yes!
chaburkland,Is this the only place `_ScheduledTask` objects are created?
vhquang,"Yes, as far as I know."
chaburkland,`operating_income_bef_depre_and_amort` is the only addition
chaburkland,These were non-standard unicode characters so I replaced them with the `-` from the standard keyboard
chaburkland,"I removed these because they were already defined on `MeasuresSimpleRequiredMixin`, which means they are unnecessarily defined here too."
chaburkland,Re-validation from the `valid_mic` changes from before.
chaburkland,"This re-validation is necessary, because `GEIUCoTableGetterMixin._get_geiu_co_table` is where the `valid_mic` screen from GEIU is added if it doesn't exist.  Since it doesn't exist in any of the snapshots being tested here, simply calling `geiu_reader.co_table` will fail since the PSU logic expects a field that doesn't exist."
chaburkland,All this impl moved to `augur.core.sdk.geiu.py` as it was shared with Worldscope.
chaburkland,All of this impl was moved to `augur.core.sdk.geiu.py` as it was shared with Compustat.
chaburkland,"This used to be implemented as a cached static method, which I didn't like.  Here is essentially what the old impl was: ```python @classmethod @lru_cache def _precalculated_geiu(as_of_date):     return cls._PRECALCULATED_GEIU_CLASS.from_as_of_date(as_of_date) ```"
chaburkland,See this comment: https://researchaffiliates.slack.com/archives/GFEPY8EBX/p1647631849310269
chaburkland,The typehint change is is the only actual meaningful change in this file. The rest of the diffs is just me re-arranging these functions to be in alphabetical order
chaburkland,"Unfortunately this diff is extremely messy, as I both changed a lot, and very little.  Previously, the code was laid out like this: ```python class MeasuresPropertyTests(RATestCase):     # Definitions for a bunch of vendor-independent properties about the compound measures.  class TestMeasuresCAF(MeasuresPropertyTests):     # Instantiated 3 different Compustat measure instances, tested the properties on each one, and tested some specific examples for one of them as a form of spot check  class TestMeasuresWSF(MeasuresPropertyTests):     # Instantiated 3 different Worldscope measure instances, tested the properties on each one. ```  The biggest downside was that there were 6 different static resources that had to be downloaded.  The new change organizes the file like so: ```python class MeasureTests(RATestCase):     # Definitions for a bunch of vendor-independent properties about the compound measures. Abstract and needs  vendor-specific information to be defined in a subclass  class MeasuresCAFTests(MeasureTests):     # Defines Compustat vendor info, along with a custom additional specific spot check for gross_profits.  class TestMeasuresCAFUSD(MeasuresCAFTests):     # Implements a specific spot check (along with invoking the usd property tests) for most of the measures. For measures with no specific extra test, it just calls the usd property test  class TestMeasuresCAFLocal(MeasuresCAFTests):    # Calls all the local property tests  class MeasuresWSFTests(MeasureTests):     # Defines Worldscope vendor info  class TestMeasuresWSFUSD(MeasuresWSFTests):     # Calls all the usd property tests  class TestMeasuresWSFLocal(MeasuresWSFTests):     # Calls all the local property tests ```"
chaburkland,This is a new test I added for the compound measure `evic`. No property test existed for it before.
chaburkland,This is a new test I added for the compound measure `ff49`. No property test existed for it before.
chaburkland,This is a new test I added for the compound measure `equity_issuance_growth`. No property test existed for it before.
chaburkland,This is a new test I added for the compound measure `sic`. No property test existed for it before.
chaburkland,This is defined here as it's the only custom Compustat test that applies to both Local & USD measures.
chaburkland,"Because of how `unittest`/`pytest` will automatically collect every single method that beings with `test_`, we have to do this awkward move here.  Unless there is a better way to do this as I would love to just use normal inheritance."
chaburkland,"One of the main reasons I split it up into 4 classes, was to avoid the overhead of having one Test class have two measure instances alive at any point. This cuts that in half to help on memory costs."
ForeverWintr,I appreciate that you put `__init__` at the top of the class definition!
ForeverWintr,"Related to your pair session with Chris, `self` here will be used as the key in the class level cache. Is that intended? Maybe `CachedProperty` is better than `lru_cache` here?"
ForeverWintr,"Should this class also implement `__eq__`? IIRC, both are needed for storing in a dict or set. "
ForeverWintr,This looks like it will have the side effect of clearing the cache of all instances when one instance is deleted. Wouldn't it be better to remove the use of `lru_cache` below? 
ForeverWintr,"Personally I find this clearer. Feel free to reject.   ```suggestion         self.assertSetEqual(set(), counts - valid_counts) ```"
ForeverWintr,Is `super` needed here? Could you just do this? ```suggestion        self.book_w_floor_property_test() ```
ForeverWintr,"Are you doing this this way because you don't want the methods to be tests on the base class, but only on the children? "
ForeverWintr,"I think you could do something like this using pytest's [parametrize](https://docs.pytest.org/en/6.2.x/parametrize.html), where the data currently created in `setupClass` is passed to the parametrize decorator. "
chaburkland,I really don't want to remove the lru_cache here as don't want to have to pay the price of a full bus load anytime they want to use wide frames. 
chaburkland,Let me look into this!
ForeverWintr, ```suggestion ```
ForeverWintr,"I think there is a race condition here. If two processes get to line 106 at the same time, both will not see the file and will move on to 111. We could still see the StoreFileMutation error if one process is suspended in between 106 and 111, and the other moves on to opening the file in a `Bus`.   I thought [os.rename](https://docs.python.org/3/library/os.html#os.rename) failed if the target exists, but it looks like that's only on windows!  After some reading, I think using hard links as suggested [here](https://stackoverflow.com/questions/3222341/how-to-rename-without-race-conditions) is a viable approach, although I haven't been able to verify that it's atomic on windows. I *think* it's atomic on linux, as long as python uses the c [link](http://www.manpagez.com/man/2/link/) function.  ```suggestion     if noop_if_file_exists:         try:             # Create a hard link, which is atomic and fails if the file exists.             os.link(tmp_path, file_path)         except FileExistsError:             pass         tmp_path.unlink()         return file_path ```"
ForeverWintr,```suggestion     tmp_path.replace(file_path) ```
ForeverWintr,"I see you are handling the case where `file_path` is `None` here, but it doesn't look like the rest of the function works in that case. The docstring suggests we return a stringio, but it looks like we don't anymore. Maybe we can remove the `tp.Optional` from file_path?"
ForeverWintr,I think my comment above about race conditions applies here too. 
ForeverWintr,```suggestion ```
chaburkland,"I do think though I will limit the lru_cache size to 1, which will hopefully adress your concern."
chaburkland,Good idea - let me deprecate this method since it's already been exposed on the public API
chaburkland,Sure!
ForeverWintr,"Can't you just replace `lru_cache` with a different cache mechanism?  e.g.:  ```python    def _cached_co_bus(self, dates: tp.Sequence[dt.date]) -> sf.Bus:         """"""Loads a bus for a given set of dates. Caches the result""""""         if self._co_bus is None:             self._co_bus = self.co_bus(dates=dates)         return self._co_bus ```"
ForeverWintr,I'm pretty sure `lru_cache` uses a dictionary.
chaburkland,"parametrize cannot be used on instance methods, as it has no special handling for `self`."
chaburkland,"Well the thing that makes this tricky is there is parameter `dates`, so that approach wouldn't work"
ForeverWintr," actually, during your code review I saw the handling for `if file_path is None`. I missed that github had hidden it when reviewing! Please disregard the above."
ForeverWintr,"Yes, I think it would require converting these to pytest style tests. I didn't say it was easy! :smile: "
ForeverWintr,"Oh, I missed that. In that case how about `cachetools.LRUCache(1)` with dates as keys? If each instance had its own cache, could you avoid defining `__hash__` as well?"
ForeverWintr,"In the current approach instance A of this class can invalidate instance B's cache, and that feels weird to me. "
chaburkland,"Yeah I know it feels weird, except in this case I'm okay with that, since you shouldn't ever have two GEIU instances, and if you do, I'm okay with A clearing B's cache. Let me think more about a different way to implement this"
chaburkland,"To be clear, are you saying that you have a really strong desire for me to re-write this module using pytest style?"
chaburkland,@ForeverWintr I re-implemented this using instance-bound LRU caches from `cachetools`. Let me know what you think!
ForeverWintr,"No! I thought you were asking for other approaches, and was providing you one. After using pytest for a while, I prefer it, but I don't mean to imply that you should re-write these tests using it. "
ForeverWintr,"What I often do when in a situation like this is:  ```python def _key(self):     return (         self.__class__.__name__,         self.as_of_date,         self.FIELDS,         self._date_min,         self._date_max,         self._PRECALCULATED_GEIU_CLASS,         self._FRESH_GEIU_CLASS,     )  def __hash__(self):     return hash(self._key())  def __eq__(self, other):     if isinstance(other, type(self))         return self._key == other._key()     return NotImplemented ```  I realize that's not exactly the same as what you're doing here, but I mention it in case it appeals. "
ForeverWintr,Bus [Cachet](https://www.merriam-webster.com/dictionary/cachet)!
chaburkland,I like this suggestion - let me incorporate
johnjhawk,"I know it's a necessary evil, but parsing file path string always makes me nervous. Is there any verifications (asserts) that we can do here to verify that that sec_id is close to what we expect?"
chaburkland,"I think the most important check is that `int` succeeds, but I can also add a min/max valid range assertion"
nekobon,"How about  ```suggestion         weight_kwargs = dict(                 fieldattr=FieldAttrs.weight,                 table_name=constants.ComponentHistoryNames.CLIENT,                 reindex_by=FieldAttrs.co_id_field,                 reindex_duplicate_aggregation=np.sum,                 product=product,                 tlt=product_history.delivery_history.tlt,                 label=""cur_weight"",         )         recipes.append(             ColumnRecipeFieldattr(                 **weight_kwargs,                 history_index=-1,             )         )         recipes.append(             ColumnRecipeFieldattr(                 **weight_kwargs,                 history_index=-2,             )         ) ```"
nekobon,Do we want to confirm this is ndarray in case it is not?
nekobon,How about to use symbolic constants for these strings
nekobon,How about to put this as a class attribute for easier discovery
gettodaze,:heart_eyes: Great!
vhquang,"Ideally this line should be written by GlobalProtect, since they know when those servers will be changed. However, I don't know how things are done on GlobalProtect side."
vhquang,"Not relevant to this change, but that todo is now obsolete by by how we deploy gunicorn app."
flexatone,"Can we define the types within the dict? ```suggestion     ) -> tp.List[tp.Dict[str, tp.Any]]: ```"
chaburkland,This comment is unnecessary!
chaburkland,"This is a bit confusing to me, that the `select` and `filter` are mutually exclusive. If there is no value provided, it will be selected, if there is a value provided, it won't be selected, but it will be filtered for. I'm wondering if there's a better way to do this"
chaburkland,Maybe use a context manager here instead?
chaburkland,Why no `drop=True`?
chaburkland,"This function does not seem like a performance bottleneck, but just in case, if `all_series` is very long, this is a tad bit inefficient."
chaburkland,"I don't think this is possible. You can't store datetime objects in static frame Indices. They must live in `IndexDate` instances, which will always convert them to numpy dates."
chaburkland,"```suggestion         month_ends = list(du.eom_range_from_dates(start_date, end_date)) ``` Note this only works because you explicitly made sure `end_date` is an EOM date"
chaburkland,Is order not important?
chaburkland,This is cool!
gettodaze,"Will add a comment: ``` # If value is provided, there will only be one unique value in the column, and we don't need to select for it ```"
gettodaze,"@chaburkland Oh, would that be faster? I only want 1 of the columns (I return a series), so I figured dropping would be unnecessary and slower."
gettodaze,"I see. Were you thinking something like this: ```python         nonempty_series = [s for s in all_series if len(s)]         if nonempty_series:             date_min = date_min or min(s.index[0].item() for s in nonempty_series)             date_max = date_max or max(s.index[-1].item() for s in nonempty_series)             full_index = sf.IndexDate.from_date_range(date_min, date_max) ```"
gettodaze,"Oh, but `eom_range_from_dates` handles getting the `eom` on or before `end_date` for me, so I don't need to, right? ```python def eom_range_from_dates(     date_start: datetime.date, date_end: datetime.date ) -> tp.Iterable[datetime.date]:     """"""Generator of end of month dates which happens to be between the given dates. If `date_start` and/or `date_end` is already end-of-month, this date is included in the output (i.e. inclusive boundary).     Note that if `date_end` is mid-month, the last day of this month is NOT included, as it is outside the range.     """"""     end_y, end_m = date_end.year, date_end.month     if not is_eom(date_end):  # last day is previous month end         end_y, end_m = shift_year_mo((end_y, end_m), -1) ```"
gettodaze,Not as far as any of the use cases for this currently.
chaburkland,"Yeah that's good! Again, you don't need to if there's no performance issue"
chaburkland,Oh whoops - I didn't process that you were returning a series. Ignore me!
chaburkland,"It seems like it! I would definitely double check the behavior though, since I often mix up shifting in my head when I read code"
gettodaze,Tests are all passing for me
chaburkland,"The old behavior had a nasty bug, in that if there is an issue with mapping `field` to `field_fx_types`, then it would just succeed without applying any FX conversion.  This new approach makes the behavior more strict, by requiring the mapping to work for every column in frame (that is not skipped)."
chaburkland,Move to base class since now both writers use this.
chaburkland,"Moved this to it's own method to allow for easier testing. Plus there are some small changes, in that I need to update the index to use ra field names, instead of the vendor mnemonics that are in the series by default."
chaburkland,"Previously the mapping was not being relabeled, which meant that the series was useless. This is a bug fix."
chaburkland,Moved to base class as both writers use it now
ForeverWintr,Is this equivalent?  ```suggestion             if not co_frame[FundamentalFields.RAFY].duplicated().any(): ``` 
ForeverWintr,"Appease black.  ```suggestion         # Now that all base fields have been converted, re-derive.         frame = self.add_derived_fields(frame) ```"
vhquang,"```suggestion             # go through as_of_dates, newest to oldest. ```"
gettodaze,Thanks for correcting! I forgot about this one!
flexatone,"```suggestion             dict(data_date=[data_date], return_value=[return_value]) ```"
flexatone,"```suggestion         Economist and writer who publishes widely used but irregularly scheduled data sets, see http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html ```"
flexatone,"```suggestion     Preference Stock         A special type of common stock that shares in the earnings of the company, has limited voting rights, and may have a dividend preference. Preference shares may also have liquidation preference. ```"
flexatone,"```suggestion     Preferred Stock         Stock shares that represent a portion of ownership in a company, with the shares normally carrying fixed dividends. Sometimes the shares have voting rights, but not generally. ```"
gettodaze,Do you need this comment?
gettodaze,I like this comment
gettodaze,I would prefer that this is lower case so that it doesn't seem like a constant.
gettodaze,"Could we do `f""+{c}""`?"
gettodaze,"This is fine, but why not just provide the dictionary as input?"
gettodaze,"I'm guessing this is for legacy reasons, but why not just have this dictionary be a module level constant?"
gettodaze,"```suggestion @functools.lru_cache() def _get_country_groups_202204() -> dict[str, list[str]]: ``` (requires future annotations)"
gettodaze,"Could you leave a comment about this date, or give it a symbolic constant with a descriptive name?"
gettodaze,"Why not just have two variables: ```suggestion     rm_ru_cp = f""{rau_gen.PRODUCT_ID}-ru""     rm_ru_rm_date = datetime.datetime(2022, 3, 1) ```"
gettodaze,"I think this is fine. Maybe put a comment as to the importance of this. Alternatively, maybe  ```            if cp == rm_ru[""cp""] and date >= rm_ru[""rm_date""]:                 fill_ratio[date] = 0 ``` could be encapsulated in a `override_*` function, but this is fine."
gettodaze,"Oh, good catch to change this documentation!"
johnjhawk,"yeah, I'd like to leave it in as it explicitly tells the difference between it and the base country sub-group"
johnjhawk,"that's a great point.  Guru wrote this and he made it a function and wrapped it with an lru cache decorator. it seems like such an odd move, I'm thinking that it's for performance.  I'll make a note to test and refactor it to dict as I cant imagine a dict here would be slower than a function wrapped in lru cache."
johnjhawk,"good point, but I wanted to show that they are paired together. I dont want anyone using either one of them alone. "
johnjhawk,"great, point.  I'll make that change."
johnjhawk,great suggestion.  I made it a variable callde DS_FX_PRICES_CUTOVER.
AlanMLin,Thanks! Change implemented.
johnjhawk,"great idea,  that leaves an ""override"" breadcrumb and it provides a nice place to document the endeavour. i made this change"
johnjhawk,"yeah, legacy reasons : ( and I wasn't sure if Guru determined that a func wrapped in an lru cache was faster than a dict (I can't imagine that) but I didn't want to go down that rabbit hole on this urgent request.  so I left it."
chaburkland,"It's a small point, but could you insert these new entries in numeric order?"
nekobon,"How about to call it ""pre_upload_checks"" to be more explicit?"
vhquang,"I am just curious, can you remind me do we need to bump cache everytime we update the writer, or update the reader?"
vhquang,"I couldn't find info on the `drop` arg. Do we intend to report only on the first item in each duplicated group?  Secondly, I am curious about the assertion. Did you want to select the `IssuerID` column? Would it be better to do: ``` series = sub_frame[ISS_Issuers.IssuerID] ``` I don't see problem in the code, just curious on the intention."
vhquang,"I think this rely on `iter_group_items(..., drop=True)` won't re-index the sub_frame. If we rely on this, I think it is better to have unit test to ensure that behavior. We don't know if (or when) that behavior change in static_frame."
vhquang,I think this would be a little more explicit. ```suggestion             duplicate_issuer_ids = frozenset(issuerid_to_index.keys()) ```
vhquang,"Since we are tracking index, I have slight preference to rename `drop_locs` into `drop_ilocs` instead. But feel free to keep your choice here."
vhquang,Should we use `drop.iloc` instead of `drop.loc`?
vhquang,"Follow our discussion, let leave comment here so that it's clear we are tracking IssuerID for keep/remove."
vhquang,```suggestion         ret: tp.List[sf.Frame] = [] ```
vhquang,```suggestion         return tuple(ret) ```
vhquang,"It is clearer (for me at least), about the expected exception: ```suggestion             # Unhandled duplicated case.             handler.remove_duplicates_frames( ```"
vhquang,"Add docstring to help make it clear what we are returning. ```suggestion     ) -> tp.Tuple[sf.Frame, sf.Frame]:         """"""         Returns:             - Clean Frame after dropping duplicated.             - Frame of duplicated rows that are unhandled.         """""" ```"
gettodaze,Sure!
gettodaze,"I think `locs` is better because there I am using the index values here, not their iloc values (from 1061 `yield {v: k for k, v in series.iter_element_items()}`). It just happens that the index is the ilocs as well."
gettodaze,Good idea! Thanks
gettodaze,:pray: 
gettodaze,Same as the above comment
vhquang,Ah I see. That makes sense! Thanks for explaining.
chaburkland,This is the only change in behavior from code that I migrated from `crsp_price.py` to this new module
flexatone,I guess `columns` is usually small and we are fine with the linear search in `not in columns`?
chaburkland,Yeah it's 2 columns. Plus we need to check for order too
chaburkland,:+1:
vhquang,"Performance wise, I think it might be unnecessary to reindex, which is an expensive operation. The end goal is to add this exclusion to (1) `target_table` for visibility, (2) `excluded` series for functionality. For (1), we would end up with element-wise `add_colum_from_function` anyway, regardless if we reindex or not. For (2), `excluded.index` is a superset, so we would be fine without reindex."
vhquang,"I just realize that we may not need to inherit from `RMCarbonIntensityPlugin2022`. The `RMCarbonIntensityPlugin2022` has 2 new features: annual inflation calculation and SDG. Both are not needed for the RMC-EmXCN build. We may be fine with inherit from `RMCarbonIntensityPlugin` instead. Sorry if you are following my suggestion to do this.  I like the refactor in the `RMCarbonIntensityPlugin2022`, so let leave it there. We may need to move the `RMCarbonIntensityPlugin2022_EmXCN._get_exclusion_items` into `_add_exclusion_selection`. We would have more WET code, but at the benefit of not inheriting features we don't need from RMCarbonIntensityPlugin2022."
vhquang,"This looks OK to me. But FYI, I may replace this study params with what I have for RMC_EmXCN. There are couple things need to be set: - We build this for new EmXCN and CN carves. - Set the scope to 1&2 only. - We may skip CTI_PRODUCT_ID carve, since it is expected to have scope 3.  You don't need to do any of that in this PR. I will do it in the code for new family. I just want to give heads up, so it won't hurt your feeling if this study param gets removed."
gettodaze,I'm guessing you probably want to remove this comment?
gettodaze,```suggestion     def carve_product_id(self) -> str: ```
ForeverWintr,"Yes, thanks! "
vhquang,"FYI, I am copy this into `default` branch. I will make some methodology change, and want to watch out for any turnover. That shouldn't cause merge conflict for you, but it potentially may. So FYI."
johnjhawk,"Maybe in the log we could replace ""Return True"" with something like ""Return True and run the report even with missing data"""
johnjhawk,"We could grab the ldap id of the person debugging the report and send it only to them. Then we would be able to debug the entire process. I do that with the daily holdings report fyi  `        if debug_mode:             login_name: str = getpass.getuser()             self.mail_args.addr_to = f""{login_name}@rallc.com""  `"
nekobon,This shouldn't be necessary with valid the tradeable filter.
flexatone,Is this really an IP address? Should we use DNS? (I know it is a strange suggestion coming from me!)
flexatone,"This works too and is slightly better, I think. ```suggestion         [worker_status] = (s for s in app_statuses if s[""name""] == program.program_name) ```  "
vhquang,"This file gets rendered as part of `setup_remote`. So, you would need to bump changeset for portal, then run `setup_remote`, to have this configuration."
ForeverWintr,"It is really an IP addres! `private_ip_address` comes directly from the aws api.   I think IP is actually the right thing to use here, as these are autoscaling workers and they don't have unique names. They are all named `worker-dev-i`, and their hostname is derived from their IP (e.g.,  `ip-10-99-97-150`)."
gettodaze,The initial issue was doing `sr | sr` with two series of different indices. I changed it to use `via_fill_value` so we can get rid of this reindex.
gettodaze,Thanks for the tip! I created a separate class `RMCarbonIntensityPluginISS` so I can reuse `_get_exclusion_items` without the other functionalities. Let me know what you think.
gettodaze,Haha thanks Quang!
vhquang,Interesting. I didn't know `|` operation is not supported for different index. Thanks for that context.
vhquang,"The major difference between this class and its parent `RMCarbonIntensityPlugin` is the `add_exclusion_seledtion`. I don't feel the difference is enough to justify one extra layer of inheritance. I would prefer shallow inheritance (`RMCarbonIntensityPlugin` -> `RMCarbonIntensityPlugin2022`, and `RMCarbonIntensityPlugin` -> `RMCarbonIntensityPlugin2022_EmXCN`) with some amount duplicated code, over extra level of inheritance. The guideline that I have for myself is to endure the duplication until I can see the clear path for refactoring and its advantage. That helps me avoid over-engineer the code.   Also, I want to point out that the reason we have `RMCarbonIntensityPlugin2022_EmXCN` is just for client to _see_ the carbon info, without applying adjustment. Personally, I have a feeling, this may not be final product. So, I would avoid any complication at the moment."
vhquang,This test looks done to me. :+1:
gettodaze,"We can talk about it some more, but I feel that even though this implementation adds an extra layer of inheritance, it greatly simplifies the code. Its very easy to see the change in the `emexcn` plugin is just in the `_get_exclusion_items`, whereas if I were to reimplement the whole `_add_exclusion_selection`, its not very simple (at least from my view) to figure out that the major changes are just in coal and energy.  Are you thinking of a simpler way to code that?"
gettodaze,Oh thanks! I forgot to remove this todo!
ForeverWintr,"I'll mark this resolved for now, as I'm eager to deploy this. :)"
chaburkland,A source here might be really great
chaburkland,Yeah they do :sunglasses: 
chaburkland,`i'm` -> `I'm`
chaburkland,"I'm not sure this is always correct, since Python does name mangling on these sometimes: https://docs.python.org/3/tutorial/classes.html#private-variables"
chaburkland,I'm curious why this isn't named `get_dataframe_from_static_server()`?
chaburkland,"Isn't this missing `if __name__ == ""__main__"":`?"
chaburkland,`CamleCase` -> `CamelCase`
ForeverWintr,"```suggestion     ""I can now easily see that I'm iterating over each datestring in fx_dataframe['DataDate']\n"", ```"
ForeverWintr,"```suggestion     ""- CamelCase is a class\n"", ```"
ForeverWintr,Indeed it would. I'll try to find my source from 5 years ago. 
ForeverWintr,Perhaps I was too succinct here. In what way do you think name mangling contradicts this statement?
ForeverWintr,I don't feel that one is strongly better than the other; do you?
ForeverWintr,"Yes, but that's deliberate so I can demonstrate what happens without one. :)"
chaburkland,"I will occasionally use a leading ""__"" for a instance member, and then be surprised when I get an `AttributeError` cause Python mangled that name.  Maybe just add a note that says something like, ""In the context of classes, Python will perform name mangling."""
chaburkland,"I don't have a _strong_ preference, but I do have a preference haha. It's your talk though so you can decide"
nekobon,Would we want to add another test for the `True` case?
ForeverWintr,"I see; That doesn't make my statement incorrect, does it? It's just something that might be useful for people to know?  `self.__dunder` still works, you just can't inherit it because of the name mangling. I don't really want to get into that in this slide though. "
ForeverWintr,"Yes! However, John and I made this change as small as possible in case we had to deploy it as a hotfix. We have a subsequent PR that adds more tests around this: https://github.com/ResearchAffiliates/invsys/pull/2478  I will mark it ready for review once this is merged. :)"
vhquang,This has already been defined in L256.
chaburkland,```python 09:40:26  In [1] class Foo:              ...:     def __init__(self):              ...:         self.__foo = 14              ...:  09:40:35  In [2] f = Foo()  09:40:37  In [3] f.__foo --------------------------------------------------------------------------- AttributeError                            Traceback (most recent call last) <ipython-input-3-5c407179b833> in <module> ----> 1 f.__foo  AttributeError: 'Foo' object has no attribute '__foo'  ```
gettodaze,"```suggestion         self._raw_frame: sf.Frame | None = None         self._rapids: dict[str, Rapid] | None = None ```"
gettodaze,"Just curious, have you tested the `if none, load, return` performance versus just `cached_property`? I feel `cached_property` is simpler, but I'm not sure how much overhead it gives."
chaburkland,"My concern is that someone might hear that and think, ""Oh awesome! I'll start using leading ""__"" on my variables whenever I think they are super private."" And then they will run into confusing errors when they encounter name mangling.  I agree, it's not within the scope of this talk to take about mangling. My suggestion might be to say, ""`__extra_private` means blah blah. I would not recommend using this pattern, as the single leading `_` is almost always the convention you are looking for. The line between ""private"" and ""super private"" is vague, and it's better to err with the convention that most Python programmers are aware of."" Or something like that.  That all being said, I don't want to bikeshed much longer, so like before, you can do what you want with this feedback!"
ForeverWintr,I see; I didn't realize `f.__foo` didn't work. I was thinking of this:  ``` class Foo:     def __init__(self):         self.__foo = 14      def get_foo(self):         return self.__foo   f = Foo() f.get_foo() 14 ```  Thanks for the feedback though. I think this issue is sufficiently muddy that it makes sense to just not mention the leading double underscore here. 
ForeverWintr,"Oh, thanks for bringing that up. When I stopped last night I thought ""I should probably use `cached_property` here instead. Then I'd forgotten about it by this morning. I'll see about using it instead."
nekobon,Is `frame` better to be named `co_table`? Please add a docstring to explain what they do.
nekobon,Let's keep the argument and return order the same.
nekobon,This line is dropped. Is this intentional?
nekobon,:laughing: 
nekobon,```suggestion     #        Input:     #            Single valid chinese security under one company     #            Single invalid chinese security under one company     #            Two valid chinese securities under one company     #            Two (Invalid and valid) chinese securities under same company      #            Behavior for non-chinese companies is a subset of the tested     #            functionality so only this test is needed ```
ForeverWintr,"`cached_property` seems much better. With that change, these attributes can be private again, too! I'll make sure the tests pass with this change."
philipmassouh,"@chaburkland can you remind me about this, I brought it up and I forget why we decided it was redundant?"
philipmassouh,renamed variables
nekobon,```suggestion ```
nekobon,"```suggestion         self, *, score_field: str, country_group_field: str ```"
nekobon,```suggestion             if not cg_field.size: ```
nekobon,Please add a comment about the change
nekobon,```suggestion from RAPC.cspec.include.include_psur_202203 import include_psur_202203   class include_psur_202206(include_psur_202203): ```
nekobon,```suggestion ```
nekobon,```suggestion ```
ForeverWintr,"If you haven't already, could you check with Ted so he can update the product_id in RAPID.xlsx?"
chaburkland,I'm not sure this change requires a cache update!
chaburkland,`from ISLib import np_raise as np`
chaburkland,Let's add a comment here
vhquang,"Me neither, but talked with @gettodaze I have the impression all update on reader might need a cache update. Do we have a guide on when to and when not to?"
johnjhawk,:+1: 
gettodaze,"Could you write a test for this? Maybe in `RALib/test/test_imcron_date_config.py`, something like `test_pcb_imcron_config`: ```python     def test_pcb_imcron_config(self):          result = idc.get_is_due_status_with_params(             idc.PCBImcronConfig,             run_date=datetime.date(2021, 2, 14),             geu_dates=(datetime.date(2021, 2, 13),),         )         expected_result = (             True,             idc.SourcingDates(                 data_date=datetime.date(2021, 2, 13),                 run_date=datetime.date(2021, 2, 14),                 params_used=datetime.date(2021, 2, 13),             ),         )         self.assertEqual(expected_result, result)          result = idc.get_is_due_status_with_params(             idc.PCBImcronConfig,             run_date=datetime.date(2021, 2, 15),             geu_dates=(datetime.date(2021, 2, 13),),         )         self.assertEqual((False, None), result) ```"
gettodaze,"Wow, thanks!"
gettodaze,"Should I review this file? Or is `papyri/sketch/factset_iss.py` purely a sketch, or is it used for production? If the latter, we might want to make it an app with some tests."
ForeverWintr,This seems to be defined in several places. Should it go in a config or constants file?
ForeverWintr,"I assume this will be replaced soon. But until then maybe you should change his message so it doesn't tell lies!  ```suggestion     logger.debug(""Alerts would have been uploaded to DB, but this isn't implemented yet"") ```"
ForeverWintr,"IMO, this would be clearer:  ```suggestion     for fp in (FREQUENCY_CONFIG_INPUT_FP, DATA_CONFIG_INPUT_FP):         get_rule_config_from_fp(             fp=fp,             config=mutable_config,             session=session,             run_date=run_date,         ) ```"
ForeverWintr,"Given that this updates in place, should it be called something like: ```suggestion def update_rule_config_from_fp( ```"
ForeverWintr,"Maybe I'm missing something, but can this just be  ```suggestion     frame = frame.assign[FIELD_INSTRUMENT_ID](frame[FIELD_INSTRUMENT_ID].fillna(DEFAULT_ID_FLAG)) ```"
ForeverWintr,"Similar to above, perhaps I don't understand the shape of this frame but it looks like you could avoid these `apply`s and just call `iter_element` on the series."
ForeverWintr,"Going off of the variable name, If `rule is NoRule`, does that mean it's skipped? "
ForeverWintr,"I don't think you need `all()` here, as you can just iterate over the result of `filter`"
ForeverWintr,Can you identity test here? ```suggestion         if rule is NoRule: ```
ForeverWintr,"I think more context would be helpful here. Where is it already inactive, and where is it set inactive a second time?"
ForeverWintr,```suggestion     rules = rules.set_index(FIELD_ASSET_CLASS)[FIELD_RULE] ```
ForeverWintr,"Does this work?  ```suggestion         frame[FIELD_RULE] == NoRule, ```"
ForeverWintr,```suggestion     frame = frame.assign[FIELD_ASSET_CLASS](         frame[FIELD_ASSET_CLASS].iter_element().apply(lambda ac: ac.name)     ) ```
ForeverWintr,How about calling these arguments something like `send-production-email` and `send-dev-email`? That way you don't have to clarify that production mode only affects emails. 
ForeverWintr,The above suggestion would also remove the need for this check. 
ForeverWintr,Can this be imdev notifications? 
ForeverWintr,"I know you didn't add this, but this hidden customization based on current user feels bad. "
ForeverWintr,Could this be: ```suggestion     module_path = qc.__file__ ```
ForeverWintr,"```suggestion         cmd_line = "" "".join(x for x in cmd_line_parts if x) ```"
ForeverWintr,```suggestion     Decorates ``core_action`` such that its returned ``AlertMessage`` is wrapped up into an ``Alert`` ```
ForeverWintr,It looks like you could move these two function calls outside of this loop; is that the case?
ForeverWintr,"I'm not sure how this is run, but if this cache lives for a long time you risk missing updated data in the database, right?"
ForeverWintr,"Why is this a single element generator, rather than a regular function?    Also, this seems simpler to me:  ```suggestion     if (         last_observed := get_last_observed_date(             history_table=asset_class.history, session=session         ).get(instrument_id, None)     ) is None:         yield AlertMessage(message=""No data"")              elif not frequency_check(run_date=run_date, last_observed=last_observed):         yield AlertMessage(             message=f""Not been updated since {last_observed}"",             last_observed=last_observed,         ) ```"
ForeverWintr,Do you need `all` here?
ForeverWintr,"I think you could also do this, which avoids the `getattr`:  ```suggestion     for column in asset_class.history.__table__.columns:          if not isinstance(column.type, DecimalToFloat):             continue          numeric_fields.append(column.name)         sa_columns.append(column) ```"
ForeverWintr,"Can you sort frame once outside of this function, to avoid sorting every iteration?"
ForeverWintr,"Are these two checks redundant? If the frame is empty,  `exactly_zero.T.get(instrument_id)` should be `None`, right?"
ForeverWintr,Why the explicit return?
ForeverWintr,Do you need the `all`? ```suggestion     return dict(session.query(*query_fields)) ```
ForeverWintr,"I think you don't need the `all`. ```suggestion     return dict(session.query(attr_table.instrument_id, attr_table.ticker)) ```"
ForeverWintr,```suggestion         auto_tasks.build_tardis_dags( ```
ForeverWintr,Why do we need a fixture that points to the prod database?
ForeverWintr,"You might be interested in this approach, which uses a transaction to ensure that tested code can't commit anything to the db: https://github.com/ResearchAffiliates/invsys/blob/206ce92a7ae486346fa03c3e524bb3b4d5d3d87e/portcullis/test/conftest.py#L62"
ForeverWintr,At one point we tried to make a module for these constants:  https://github.com/ResearchAffiliates/invsys/blob/default/RALib/core/environment.py
johnjhawk,I updated this type hint. Please review and resolve is approve. Thanks.
johnjhawk,It looks like we expect these exception with certain series (produced by hypothesis)? Do we explicitly check for these exception (without hypothesis) in another place in the code?    I think it would be useful to know the circumstances these exception occur under and test for them explicitly with a          `with self.assertRaises(pd.errors.OutOfBoundsDatetime):` 
flexatone,"Yes, this is a correction. Thanks!"
flexatone,"Any dt64 value that cannot be represented in nanonseconds (such as the year 1482) will raise this exception. This only happens when converting SF or a NumPy array (perhaps) to Pandas. It is an edge case, but I think the exception is pretty clear: out-of-bounds datetime. I think this is more relevant for SF testing: I will add it there."
chaburkland,"These are equivalent, and the `.apply` approach is preferred since it's able to reuse the series from the `.assign` call"
chaburkland,The `.apply` approach is actually the preferred way to do series assignment since it's able to reuse the selection from `.assign`
philipmassouh,"haven't looked deeper but coincidentally we now have this failure on the slow test ``` =================================== FAILURES =================================== _________________ TestGEIUHistoryWorldscopeUnit.test_universe __________________ augur/augur/test/public/test_geiu_worldscope.py:188: in test_universe     universe = geiu._universe(date=TEST_DAY) ISLib/ISLib/cache.py:380: in wrapped     data = f(*args, **kwargs) augur/augur/core/sdk/geiu_worldscope.py:1508: in _universe     universe = GEIUWorldscope.from_sec( augur/augur/core/sdk/geiu_worldscope.py:1181: in from_sec     co = cls._co_extend( augur/augur/core/sdk/geiu_worldscope.py:96: in inner     return process(*args, **kwargs) augur/augur/core/sdk/geiu_worldscope.py:1084: in _co_extend     config.PROCESSOR_CO.gics( augur/augur/core/sdk/geiu_worldscope.py:474: in gics     gvkey_to_ws_perm_id = sf.Series(gvkey.index.values, index=gvkey.values) .env38/lib/python3.8/site-packages/static_frame/core/series.py:546: in __init__     self._index = index_from_optional_constructor(index, #type: ignore .env38/lib/python3.8/site-packages/static_frame/core/container_util.py:325: in index_from_optional_constructor     return default_constructor(value) .env38/lib/python3.8/site-packages/static_frame/core/index.py:327: in __init__     raise self._error_init_index_non_unique(labels_for_automap) from None E   static_frame.core.exception.ErrorInitIndexNonUnique: Labels have 4 non-unique values, including ''. =========================== short test summary info ============================ FAILED augur/augur/test/public/test_geiu_worldscope.py::TestGEIUHistoryWorldscopeUnit::test_universe = 1 failed, 253 passed, 2 skipped, 1 deselected, 21 warnings in 8630.11s (2:23:50) = ```"
chaburkland,"If my memory serves, the conversation we had about some unnecessary code was somewhere else in this file, not here. I can't remember deciding this was unnecessary, and so that would explain why there is a test failure"
chaburkland,Yeah. Except I see now a way to clean this up more since I've settled on a design and this strange boolean logic was connected a bit more to some uncertainty
chaburkland,"This is not valid syntax: ```python frame = frame.assign[FIELD_ASSET_CLASS].iter_element().map_all(ASSET_CLASS_MAP) ``` You must call `.apply` after the `.assign` selection, and use a callable allows you to re-use the result of the selection, which is better than doing this: ```python frame = frame.assign[FIELD_ASSET_CLASS].apply(frame[FIELD_ASSET_CLASS].iter_element().map_all(ASSET_CLASS_MAP)) ```"
chaburkland,"I'm not sure what else to add, since between the comment and the failure message, I think this is pretty clear to the target users of this.  For example, lets say a user adds the rule to config: ``` Macro | 1000 | NoRule ``` This means they don't want any rules applied to instrument 1000.  Now, eventually, in the actual `MacroAttr` table, let's say that instrument id 1000 is marked as inactive (this means - stop loading data for this instrument id!)  Now, the rule in the config file is redundant, since rules are automatically no applied to inactive instrument ids!"
chaburkland,"Unfortunately no! Because `NoRule` is a namedtuple (and therefore iterable), static-frame fails because it can't do scalar element comparison"
chaburkland,":eyes:   I like this alot. I was following Guru's pattern, but he's not here anymore, so...."
chaburkland,"This is run once daily after all loading scripts have finished. I think it's an acceptable risk since the odds that someone manually ran an update while QC was running right after the daily loading script finished, is essentially nil.  Plus, these are called alot, so caching here is essential for performance. Plus, I like that this will essentially ""lock"" in the state of the DB table."
chaburkland,"The reason it's a single element generator, is because the signature allows for this to yield multiple alerts. This specific rule only has one alert it can raise."
chaburkland,"Yeah I can. I made all these email changes cause I realized Guru's email was still configured in a lot of places, so I was going to take the initiative to have them come to me, so then I could sort out where more appropriate recipients would be."
chaburkland,Thanks for saying something. I will remove this branch since I don't think it's necessary
chaburkland,"No. The first check bails if the frame is empty, and the second check fails if the `instrument_id` isn't in the mapping"
chaburkland,Thanks! Turns out this was already defined in `kozuchi/core/util.py`. I'll update :+1:
ForeverWintr,"I don't follow. What does reuse mean here? It looks to me like `fillna` creates a new series in each case, and that series is inserted into the frame. "
ForeverWintr,"I meant this:  ```python frame = frame.assign[FIELD_ASSET_CLASS](frame[FIELD_ASSET_CLASS].iter_element().map_all(ASSET_CLASS_MAP)) ```  Does `apply` prevent a copy, internal to staticframe?"
ForeverWintr,"So could you change this to `f""{asset_class.name}, {instrument_id} is marked inactive in {config} but is already inactive in {table_name}""`?"
ForeverWintr,Ouch!
ForeverWintr,"That makes sense. To be clear, the case I was worried about was one where this is run once a day, but in the same process (e.g., a daemon that sleeps for 24 hours then wakes up and runs this). In that case, yesterday's result might still be in this cache. You could use `time_cache` to defend against that, but if that's not how it runs, then I think it's ok. "
ForeverWintr,"Maybe I wasn't clear. I think you could remove the first check, because if the frame is empty, `instrument_id` isn't in the mapping by definition. As long as transposing an empty frame works, which I think it should."
chaburkland,"Ah I see. Yeah, it's better to be safe. I'll go ahead and time_cache this :+1:"
chaburkland,You can't transpose an empty frame :/
ForeverWintr,"``` f = sf.Frame(columns=['a', 'b', 'c']) f.size 0 f.T <Frame> <Index> <int64> <Index> a b c <<U1> ```  Not saying you have to do it that way though."
philipmassouh,I thought I added it back... let me push and run just the failing test.
gettodaze,I think `du.isoformat_to_date` would be more transparent here.
gettodaze,could we use `for label in self._bus.index`?
gettodaze,"What are these doing? Checking for uniqueness? If so, what about `.duplicated().any()`?"
gettodaze,"Or even something like `datetime.strptime(label, f'{self.RESOURCE.PREFIX_CO}%Y-%M-%d').date()`"
gettodaze,"If you `from __future__ import annotations`, you don't need the quotes for `CompustatGEIUMonthly`."
chaburkland,The index has both co and sec in it. ``` co_yyyy-mm-01 co_yyyy-mm-02 co_yyyy-mm-03 ... sec_yyyy-mm-01 sec_yyyy-mm-02 sec_yyyy-mm-03 ```
chaburkland,This is checking for bi-directional uniqueness! All mappings must be at least 1<--->1+. Some of them are 1<--->1.
chaburkland,"This should be a `@staticmethod` since it doesn't need to use `cls`!  ```suggestion     @staticmethod     def get_data_fields(*, as_of_date: datetime.date) -> sf.Frame: ```"
chaburkland,"I would put `float('inf')` as a module-level constant: `INFINITY = float(""inf"")`"
chaburkland,"I would break this up into two functions: `get_qc_data`, and `get_qc_summary`, instead of having one function return this tuple"
chaburkland,I think more explicit names here would be better: `summary_frames` and `detail_frames`
chaburkland,This `return` is unnecessary!
chaburkland,"```suggestion         if options.year_mo_current:             as_of_date_current = du.date_str_to_date(du.get_end_of_month_str(options.year_mo_current))         else:             as_of_date_current = du.get_previous_eom(datetime.date.today())          if options.year_mo_last:             as_of_date_last = du.date_str_to_date(du.get_end_of_month_str(options.year_mo_last))                     else:             as_of_date_last = du.shift_months(du.get_previous_eom(today), -1) ```"
nekobon,"How about to call it Fields to be generic, in case we support other fields."
